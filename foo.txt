./node_modules/.astro/data-store.json:[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.2","content-config-digest","a8fb33867cc1b734","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://xahau.network/\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null,null],\"rehypePlugins\":[null,[null,{\"experimentalHeadingIdCompat\":false}],null,[null,{\"themes\":[{\"name\":\"Night Owl No Italics\",\"type\":\"dark\",\"colors\":{\"focusBorder\":\"#122d42\",\"foreground\":\"#d6deeb\",\"disabledForeground\":\"#cccccc80\",\"descriptionForeground\":\"#d6deebb3\",\"errorForeground\":\"#ef5350\",\"icon.foreground\":\"#c5c5c5\",\"contrastActiveBorder\":null,\"contrastBorder\":\"#122d42\",\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#4f4f4f\",\"textLink.activeForeground\":\"#3794ff\",\"textLink.foreground\":\"#3794ff\",\"textPreformat.foreground\":\"#d7ba7d\",\"textSeparator.foreground\":\"#ffffff2e\",\"editor.background\":\"#23262f\",\"editor.foreground\":\"#d6deeb\",\"editorLineNumber.foreground\":\"#4b6479\",\"editorLineNumber.activeForeground\":\"#c5e4fd\",\"editorActiveLineNumber.foreground\":\"#c6c6c6\",\"editor.selectionBackground\":\"#1d3b53\",\"editor.inactiveSelectionBackground\":\"#7e57c25a\",\"editor.selectionHighlightBackground\":\"#5f7e9779\",\"editorError.foreground\":\"#ef5350\",\"editorWarning.foreground\":\"#b39554\",\"editorInfo.foreground\":\"#3794ff\",\"editorHint.foreground\":\"#eeeeeeb2\",\"problemsErrorIcon.foreground\":\"#ef5350\",\"problemsWarningIcon.foreground\":\"#b39554\",\"problemsInfoIcon.foreground\":\"#3794ff\",\"editor.findMatchBackground\":\"#5f7e9779\",\"editor.findMatchHighlightBackground\":\"#1085bb5d\",\"editor.findRangeHighlightBackground\":\"#3a3d4166\",\"editorLink.activeForeground\":\"#4e94ce\",\"editorLightBulb.foreground\":\"#ffcc00\",\"editorLightBulbAutoFix.foreground\":\"#75beff\",\"diffEditor.insertedTextBackground\":\"#99b76d23\",\"diffEditor.insertedTextBorder\":\"#c5e47833\",\"diffEditor.removedTextBackground\":\"#ef535033\",\"diffEditor.removedTextBorder\":\"#ef53504d\",\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#011627\",\"editorStickyScrollHover.background\":\"#2a2d2e\",\"editorInlayHint.background\":\"#5f7e97cc\",\"editorInlayHint.foreground\":\"#ffffff\",\"editorInlayHint.typeBackground\":\"#5f7e97cc\",\"editorInlayHint.typeForeground\":\"#ffffff\",\"editorInlayHint.parameterBackground\":\"#5f7e97cc\",\"editorInlayHint.parameterForeground\":\"#ffffff\",\"editorPane.background\":\"#011627\",\"editorGroup.emptyBackground\":\"#011627\",\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-black)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#011627\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#011627\",\"editorGroup.dropBackground\":\"#7e57c273\",\"editorGroup.dropIntoPromptForeground\":\"#d6deeb\",\"editorGroup.dropIntoPromptBackground\":\"#021320\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#011627\",\"sideBySideEditor.verticalBorder\":\"#011627\",\"scrollbar.shadow\":\"#010b14\",\"scrollbarSlider.background\":\"#ffffff17\",\"scrollbarSlider.hoverBackground\":\"#ffffff40\",\"scrollbarSlider.activeBackground\":\"#084d8180\",\"panel.background\":\"#011627\",\"panel.border\":\"#5f7e97\",\"panelTitle.activeBorder\":\"#5f7e97\",\"panelTitle.activeForeground\":\"#ffffffcc\",\"panelTitle.inactiveForeground\":\"#d6deeb80\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#011627\",\"widget.shadow\":\"#011627\",\"editorWidget.background\":\"#021320\",\"editorWidget.foreground\":\"#d6deeb\",\"editorWidget.border\":\"#5f7e97\",\"quickInput.background\":\"#021320\",\"quickInput.foreground\":\"#d6deeb\",\"quickInputTitle.background\":\"#ffffff1a\",\"pickerGroup.foreground\":\"#d1aaff\",\"pickerGroup.border\":\"#011627\",\"editor.hoverHighlightBackground\":\"#7e57c25a\",\"editorHoverWidget.background\":\"#011627\",\"editorHoverWidget.foreground\":\"#d6deeb\",\"editorHoverWidget.border\":\"#5f7e97\",\"editorHoverWidget.statusBarBackground\":\"#011a2f\",\"titleBar.activeBackground\":\"var(--sl-color-black)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#010e1a\",\"titleBar.inactiveForeground\":\"#eeefff99\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#5a5d5e50\",\"toolbar.activeBackground\":\"#63666750\",\"tab.activeBackground\":\"#0b2942\",\"tab.unfocusedActiveBackground\":\"#0b2942\",\"tab.inactiveBackground\":\"#01111d\",\"tab.unfocusedInactiveBackground\":\"#01111d\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#5f7e97\",\"tab.unfocusedActiveForeground\":\"#5f7e97\",\"tab.unfocusedInactiveForeground\":\"#5f7e97\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#272b3b\",\"tab.lastPinnedBorder\":\"#585858\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":\"#262a39\",\"tab.activeBorderTop\":\"var(--sl-color-accent-high)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#3399cc\",\"tab.inactiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedActiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedInactiveModifiedBorder\":\"#3399cc40\",\"badge.background\":\"#5f7e97\",\"badge.foreground\":\"#ffffff\",\"button.background\":\"#7e57c2cc\",\"button.foreground\":\"#ffffffcc\",\"button.border\":\"#122d42\",\"button.separator\":\"#ffffff52\",\"button.hoverBackground\":\"#7e57c2\",\"button.secondaryBackground\":\"#3a3d41\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#46494e\",\"dropdown.background\":\"#011627\",\"dropdown.foreground\":\"#ffffffcc\",\"dropdown.border\":\"#5f7e97\",\"list.activeSelectionBackground\":\"#234d708c\",\"list.activeSelectionForeground\":\"#ffffff\",\"tree.indentGuidesStroke\":\"#585858\",\"input.background\":\"#0b253a\",\"input.foreground\":\"#ffffffcc\",\"input.placeholderForeground\":\"#5f7e97\",\"inputOption.activeBorder\":\"#ffffffcc\",\"inputOption.hoverBackground\":\"#5a5d5e80\",\"inputOption.activeBackground\":\"#122d4266\",\"inputOption.activeForeground\":\"#ffffff\",\"inputValidation.infoBackground\":\"#00589ef2\",\"inputValidation.infoBorder\":\"#64b5f6\",\"inputValidation.warningBackground\":\"#675700f2\",\"inputValidation.warningBorder\":\"#ffca28\",\"inputValidation.errorBackground\":\"#ab0300f2\",\"inputValidation.errorBorder\":\"#ef5350\",\"keybindingLabel.background\":\"#8080802b\",\"keybindingLabel.foreground\":\"#cccccc\",\"keybindingLabel.border\":\"#33333399\",\"keybindingLabel.bottomBorder\":\"#44444499\",\"menu.foreground\":\"#ffffffcc\",\"menu.background\":\"#011627\",\"menu.selectionForeground\":\"#ffffff\",\"menu.selectionBackground\":\"#234d708c\",\"menu.separatorBackground\":\"#606060\",\"editor.snippetTabstopHighlightBackground\":\"#7c7c74c\",\"editor.snippetFinalTabstopHighlightBorder\":\"#525252\",\"terminal.ansiBlack\":\"#011627\",\"terminal.ansiRed\":\"#ef5350\",\"terminal.ansiGreen\":\"#22da6e\",\"terminal.ansiYellow\":\"#c5e478\",\"terminal.ansiBlue\":\"#82aaff\",\"terminal.ansiMagenta\":\"#c792ea\",\"terminal.ansiCyan\":\"#21c7a8\",\"terminal.ansiWhite\":\"#ffffff\",\"terminal.ansiBrightBlack\":\"#575656\",\"terminal.ansiBrightRed\":\"#ef5350\",\"terminal.ansiBrightGreen\":\"#22da6e\",\"terminal.ansiBrightYellow\":\"#ffeb95\",\"terminal.ansiBrightBlue\":\"#82aaff\",\"terminal.ansiBrightMagenta\":\"#c792ea\",\"terminal.ansiBrightCyan\":\"#7fdbca\",\"terminal.ansiBrightWhite\":\"#ffffff\",\"selection.background\":\"#4373c2\",\"input.border\":\"#5f7e97\",\"punctuation.definition.generic.begin.html\":\"#ef5350f2\",\"progress.background\":\"#7e57c2\",\"breadcrumb.foreground\":\"#a599e9\",\"breadcrumb.focusForeground\":\"#ffffff\",\"breadcrumb.activeSelectionForeground\":\"#ffffff\",\"breadcrumbPicker.background\":\"#001122\",\"list.invalidItemForeground\":\"#975f94\",\"list.dropBackground\":\"#011627\",\"list.focusBackground\":\"#010d18\",\"list.focusForeground\":\"#ffffff\",\"list.highlightForeground\":\"#ffffff\",\"list.hoverBackground\":\"#011627\",\"list.hoverForeground\":\"#ffffff\",\"list.inactiveSelectionBackground\":\"#0e293f\",\"list.inactiveSelectionForeground\":\"#5f7e97\",\"activityBar.background\":\"#011627\",\"activityBar.dropBackground\":\"#5f7e97\",\"activityBar.foreground\":\"#5f7e97\",\"activityBar.border\":\"#011627\",\"activityBarBadge.background\":\"#44596b\",\"activityBarBadge.foreground\":\"#ffffff\",\"sideBar.background\":\"#011627\",\"sideBar.foreground\":\"#89a4bb\",\"sideBar.border\":\"#011627\",\"sideBarTitle.foreground\":\"#5f7e97\",\"sideBarSectionHeader.background\":\"#011627\",\"sideBarSectionHeader.foreground\":\"#5f7e97\",\"editorCursor.foreground\":\"#80a4c2\",\"editor.wordHighlightBackground\":\"#f6bbe533\",\"editor.wordHighlightStrongBackground\":\"#e2a2f433\",\"editor.lineHighlightBackground\":\"#0003\",\"editor.rangeHighlightBackground\":\"#7e57c25a\",\"editorIndentGuide.background\":\"#5e81ce52\",\"editorIndentGuide.activeBackground\":\"#7e97ac\",\"editorRuler.foreground\":\"#5e81ce52\",\"editorCodeLens.foreground\":\"#5e82ceb4\",\"editorBracketMatch.background\":\"#5f7e974d\",\"editorOverviewRuler.currentContentForeground\":\"#7e57c2\",\"editorOverviewRuler.incomingContentForeground\":\"#7e57c2\",\"editorOverviewRuler.commonContentForeground\":\"#7e57c2\",\"editorGutter.background\":\"#011627\",\"editorGutter.modifiedBackground\":\"#e2b93d\",\"editorGutter.addedBackground\":\"#9ccc65\",\"editorGutter.deletedBackground\":\"#ef5350\",\"editorSuggestWidget.background\":\"#2c3043\",\"editorSuggestWidget.border\":\"#2b2f40\",\"editorSuggestWidget.foreground\":\"#d6deeb\",\"editorSuggestWidget.highlightForeground\":\"#ffffff\",\"editorSuggestWidget.selectedBackground\":\"#5f7e97\",\"debugExceptionWidget.background\":\"#011627\",\"debugExceptionWidget.border\":\"#5f7e97\",\"editorMarkerNavigation.background\":\"#0b2942\",\"editorMarkerNavigationError.background\":\"#ef5350\",\"editorMarkerNavigationWarning.background\":\"#ffca28\",\"peekView.border\":\"#5f7e97\",\"peekViewEditor.background\":\"#011627\",\"peekViewEditor.matchHighlightBackground\":\"#7e57c25a\",\"peekViewResult.background\":\"#011627\",\"peekViewResult.fileForeground\":\"#5f7e97\",\"peekViewResult.lineForeground\":\"#5f7e97\",\"peekViewResult.matchHighlightBackground\":\"#ffffffcc\",\"peekViewResult.selectionBackground\":\"#2e3250\",\"peekViewResult.selectionForeground\":\"#5f7e97\",\"peekViewTitle.background\":\"#011627\",\"peekViewTitleDescription.foreground\":\"#697098\",\"peekViewTitleLabel.foreground\":\"#5f7e97\",\"merge.currentHeaderBackground\":\"#5f7e97\",\"merge.incomingHeaderBackground\":\"#7e57c25a\",\"statusBar.background\":\"#011627\",\"statusBar.foreground\":\"#5f7e97\",\"statusBar.border\":\"#262a39\",\"statusBar.debuggingBackground\":\"#202431\",\"statusBar.debuggingBorder\":\"#1f2330\",\"statusBar.noFolderBackground\":\"#011627\",\"statusBar.noFolderBorder\":\"#25293a\",\"statusBarItem.activeBackground\":\"#202431\",\"statusBarItem.hoverBackground\":\"#202431\",\"statusBarItem.prominentBackground\":\"#202431\",\"statusBarItem.prominentHoverBackground\":\"#202431\",\"notifications.background\":\"#01111d\",\"notifications.border\":\"#262a39\",\"notificationCenter.border\":\"#262a39\",\"notificationToast.border\":\"#262a39\",\"notifications.foreground\":\"#ffffffcc\",\"notificationLink.foreground\":\"#80cbc4\",\"extensionButton.prominentForeground\":\"#ffffffcc\",\"extensionButton.prominentBackground\":\"#7e57c2cc\",\"extensionButton.prominentHoverBackground\":\"#7e57c2\",\"terminal.selectionBackground\":\"#1b90dd4d\",\"terminalCursor.background\":\"#234d70\",\"debugToolBar.background\":\"#011627\",\"welcomePage.buttonBackground\":\"#011627\",\"welcomePage.buttonHoverBackground\":\"#011627\",\"walkThrough.embeddedEditorBackground\":\"#011627\",\"gitDecoration.modifiedResourceForeground\":\"#a2bffc\",\"gitDecoration.deletedResourceForeground\":\"#ef535090\",\"gitDecoration.untrackedResourceForeground\":\"#c5e478ff\",\"gitDecoration.ignoredResourceForeground\":\"#395a75\",\"gitDecoration.conflictingResourceForeground\":\"#ffeb95cc\",\"source.elm\":\"#5f7e97\",\"string.quoted.single.js\":\"#ffffff\",\"meta.objectliteral.js\":\"#82aaff\"},\"fg\":\"#d6deeb\",\"bg\":\"#23262f\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#a2bffc\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#f27775fe\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#d6deeb\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#919f9f\",\"fontStyle\":\"\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#5ca7e4\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#caece6\",\"fontStyle\":\"\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"fontStyle\":\"\",\"foreground\":\"#c5e478\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"background\":\"#ff2c83\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#d3423e\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#919f9f\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#cdebf7\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#ffffff\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#80cbc4\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#57eaf1\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#fad430\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#faf39f\",\"fontStyle\":\"\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#82aaff\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Comparison, returns, imports, and Keyword Operator Ruby\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#989da0\",\"background\":\"#F78C6C\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"background\":\"#8BD649\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#ec5f67\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#ef787f\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#31e1eb\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Unquoted String Zone\",\"scope\":[\"string.unquoted.preprocessor.message.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Region\",\"scope\":[\"punctuation.separator.hash.cs\",\"keyword.preprocessor.region.cs\",\"keyword.preprocessor.endregion.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"bold\"}},{\"name\":\"C# Other Variables\",\"scope\":[\"variable.other.object.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Enum\",\"scope\":[\"entity.name.type.enum.cs\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Dart String\",\"scope\":[\"string.interpolated.single.dart\",\"string.interpolated.double.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Dart Class\",\"scope\":[\"support.class.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#ff6d6d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#dddddd\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#e0dec6\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#6ae9f0\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#78ccf0\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#8b96ea\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#c789d6\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#ff869a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#d6deeb\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#8eace3\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#d7dbe0\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-6)\",\"terminalBackground\":\"var(--sl-color-gray-6)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-6)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#ffffff17\",\"markBorderColor\":\"#ffffff40\"}}},{\"name\":\"Night Owl Light\",\"type\":\"light\",\"colors\":{\"focusBorder\":\"#93a1a1\",\"foreground\":\"#403f53\",\"disabledForeground\":\"#61616180\",\"descriptionForeground\":\"#403f53\",\"errorForeground\":\"#403f53\",\"icon.foreground\":\"#424242\",\"contrastActiveBorder\":null,\"contrastBorder\":null,\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#dcdcdc66\",\"textLink.activeForeground\":\"#006ab1\",\"textLink.foreground\":\"#006ab1\",\"textPreformat.foreground\":\"#a31515\",\"textSeparator.foreground\":\"#0000002e\",\"editor.background\":\"#f6f7f9\",\"editor.foreground\":\"#403f53\",\"editorLineNumber.foreground\":\"#90a7b2\",\"editorLineNumber.activeForeground\":\"#403f53\",\"editorActiveLineNumber.foreground\":\"#0b216f\",\"editor.selectionBackground\":\"#e0e0e0\",\"editor.inactiveSelectionBackground\":\"#e0e0e080\",\"editor.selectionHighlightBackground\":\"#339cec33\",\"editorError.foreground\":\"#e64d49\",\"editorWarning.foreground\":\"#daaa01\",\"editorInfo.foreground\":\"#1a85ff\",\"editorHint.foreground\":\"#6c6c6c\",\"problemsErrorIcon.foreground\":\"#e64d49\",\"problemsWarningIcon.foreground\":\"#daaa01\",\"problemsInfoIcon.foreground\":\"#1a85ff\",\"editor.findMatchBackground\":\"#93a1a16c\",\"editor.findMatchHighlightBackground\":\"#93a1a16c\",\"editor.findRangeHighlightBackground\":\"#7497a633\",\"editorLink.activeForeground\":\"#0000ff\",\"editorLightBulb.foreground\":\"#ddb100\",\"editorLightBulbAutoFix.foreground\":\"#007acc\",\"diffEditor.insertedTextBackground\":\"#9ccc2c40\",\"diffEditor.insertedTextBorder\":null,\"diffEditor.removedTextBackground\":\"#ff000033\",\"diffEditor.removedTextBorder\":null,\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#fbfbfb\",\"editorStickyScrollHover.background\":\"#f0f0f0\",\"editorInlayHint.background\":\"#2aa29899\",\"editorInlayHint.foreground\":\"#f0f0f0\",\"editorInlayHint.typeBackground\":\"#2aa29899\",\"editorInlayHint.typeForeground\":\"#f0f0f0\",\"editorInlayHint.parameterBackground\":\"#2aa29899\",\"editorInlayHint.parameterForeground\":\"#f0f0f0\",\"editorPane.background\":\"#fbfbfb\",\"editorGroup.emptyBackground\":null,\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-gray-6)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#f0f0f0\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#f0f0f0\",\"editorGroup.dropBackground\":\"#2677cb2d\",\"editorGroup.dropIntoPromptForeground\":\"#403f53\",\"editorGroup.dropIntoPromptBackground\":\"#f0f0f0\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#f0f0f0\",\"sideBySideEditor.verticalBorder\":\"#f0f0f0\",\"scrollbar.shadow\":\"#cccccc\",\"scrollbarSlider.background\":\"#0000001a\",\"scrollbarSlider.hoverBackground\":\"#00000055\",\"scrollbarSlider.activeBackground\":\"#00000099\",\"panel.background\":\"#f0f0f0\",\"panel.border\":\"#d9d9d9\",\"panelTitle.activeBorder\":\"#424242\",\"panelTitle.activeForeground\":\"#424242\",\"panelTitle.inactiveForeground\":\"#424242bf\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#f6f6f6\",\"widget.shadow\":\"#d9d9d9\",\"editorWidget.background\":\"#f0f0f0\",\"editorWidget.foreground\":\"#403f53\",\"editorWidget.border\":\"#d9d9d9\",\"quickInput.background\":\"#f0f0f0\",\"quickInput.foreground\":\"#403f53\",\"quickInputTitle.background\":\"#0000000f\",\"pickerGroup.foreground\":\"#403f53\",\"pickerGroup.border\":\"#d9d9d9\",\"editor.hoverHighlightBackground\":\"#339cec33\",\"editorHoverWidget.background\":\"#f0f0f0\",\"editorHoverWidget.foreground\":\"#403f53\",\"editorHoverWidget.border\":\"#d9d9d9\",\"editorHoverWidget.statusBarBackground\":\"#e4e4e4\",\"titleBar.activeBackground\":\"var(--sl-color-gray-6)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#f0f0f099\",\"titleBar.inactiveForeground\":\"#33333399\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#b8b8b850\",\"toolbar.activeBackground\":\"#a6a6a650\",\"tab.activeBackground\":\"#f6f6f6\",\"tab.unfocusedActiveBackground\":\"#f6f6f6\",\"tab.inactiveBackground\":\"#f0f0f0\",\"tab.unfocusedInactiveBackground\":\"#f0f0f0\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#403f53\",\"tab.unfocusedActiveForeground\":\"#403f53b3\",\"tab.unfocusedInactiveForeground\":\"#403f5380\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#f0f0f0\",\"tab.lastPinnedBorder\":\"#a9a9a9\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":null,\"tab.activeBorderTop\":\"var(--sl-color-accent)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#2aa298\",\"tab.inactiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedActiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedInactiveModifiedBorder\":\"#93a1a1\",\"badge.background\":\"#2aa298\",\"badge.foreground\":\"#f0f0f0\",\"button.background\":\"#2aa298\",\"button.foreground\":\"#f0f0f0\",\"button.border\":null,\"button.separator\":\"#f0f0f066\",\"button.hoverBackground\":\"#22827a\",\"button.secondaryBackground\":\"#5f6a79\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#4c5561\",\"dropdown.background\":\"#f0f0f0\",\"dropdown.foreground\":\"#403f53\",\"dropdown.border\":\"#d9d9d9\",\"list.activeSelectionBackground\":\"#d3e8f8\",\"list.activeSelectionForeground\":\"#403f53\",\"tree.indentGuidesStroke\":\"#a9a9a9\",\"input.background\":\"#f0f0f0\",\"input.foreground\":\"#403f53\",\"input.placeholderForeground\":\"#93a1a1\",\"inputOption.activeBorder\":\"#2aa298\",\"inputOption.hoverBackground\":\"#b8b8b850\",\"inputOption.activeBackground\":\"#93a1a133\",\"inputOption.activeForeground\":\"#000000\",\"inputValidation.infoBackground\":\"#f0f0f0\",\"inputValidation.infoBorder\":\"#d0d0d0\",\"inputValidation.warningBackground\":\"#daaa01\",\"inputValidation.warningBorder\":\"#e0af02\",\"inputValidation.errorBackground\":\"#f76e6e\",\"inputValidation.errorBorder\":\"#de3d3b\",\"keybindingLabel.background\":\"#dddddd66\",\"keybindingLabel.foreground\":\"#555555\",\"keybindingLabel.border\":\"#cccccc66\",\"keybindingLabel.bottomBorder\":\"#bbbbbb66\",\"menu.foreground\":\"#403f53\",\"menu.background\":\"#f0f0f0\",\"menu.selectionForeground\":\"#403f53\",\"menu.selectionBackground\":\"#d3e8f8\",\"menu.separatorBackground\":\"#d4d4d4\",\"editor.snippetTabstopHighlightBackground\":\"#0a326433\",\"editor.snippetFinalTabstopHighlightBorder\":\"#0a326480\",\"terminal.ansiBlack\":\"#403f53\",\"terminal.ansiRed\":\"#de3d3b\",\"terminal.ansiGreen\":\"#08916a\",\"terminal.ansiYellow\":\"#e0af02\",\"terminal.ansiBlue\":\"#288ed7\",\"terminal.ansiMagenta\":\"#d6438a\",\"terminal.ansiCyan\":\"#2aa298\",\"terminal.ansiWhite\":\"#f0f0f0\",\"terminal.ansiBrightBlack\":\"#403f53\",\"terminal.ansiBrightRed\":\"#de3d3b\",\"terminal.ansiBrightGreen\":\"#08916a\",\"terminal.ansiBrightYellow\":\"#daaa01\",\"terminal.ansiBrightBlue\":\"#288ed7\",\"terminal.ansiBrightMagenta\":\"#d6438a\",\"terminal.ansiBrightCyan\":\"#2aa298\",\"terminal.ansiBrightWhite\":\"#f0f0f0\",\"selection.background\":\"#7a8181ad\",\"notifications.background\":\"#f0f0f0\",\"notifications.foreground\":\"#403f53\",\"notificationLink.foreground\":\"#994cc3\",\"notifications.border\":\"#cccccc\",\"notificationCenter.border\":\"#cccccc\",\"notificationToast.border\":\"#cccccc\",\"notificationCenterHeader.foreground\":\"#403f53\",\"notificationCenterHeader.background\":\"#f0f0f0\",\"input.border\":\"#d9d9d9\",\"progressBar.background\":\"#2aa298\",\"list.inactiveSelectionBackground\":\"#e0e7ea\",\"list.inactiveSelectionForeground\":\"#403f53\",\"list.focusBackground\":\"#d3e8f8\",\"list.hoverBackground\":\"#d3e8f8\",\"list.focusForeground\":\"#403f53\",\"list.hoverForeground\":\"#403f53\",\"list.highlightForeground\":\"#403f53\",\"list.errorForeground\":\"#e64d49\",\"list.warningForeground\":\"#daaa01\",\"activityBar.background\":\"#f0f0f0\",\"activityBar.foreground\":\"#403f53\",\"activityBar.dropBackground\":\"#d0d0d0\",\"activityBarBadge.background\":\"#403f53\",\"activityBarBadge.foreground\":\"#f0f0f0\",\"activityBar.border\":\"#f0f0f0\",\"sideBar.background\":\"#f0f0f0\",\"sideBar.foreground\":\"#403f53\",\"sideBarTitle.foreground\":\"#403f53\",\"sideBar.border\":\"#f0f0f0\",\"editorGroup.background\":\"#f6f6f6\",\"editorCursor.foreground\":\"#90a7b2\",\"editor.wordHighlightBackground\":\"#339cec33\",\"editor.wordHighlightStrongBackground\":\"#007dd659\",\"editor.lineHighlightBackground\":\"#f0f0f0\",\"editor.rangeHighlightBackground\":\"#7497a633\",\"editorWhitespace.foreground\":\"#d9d9d9\",\"editorIndentGuide.background\":\"#d9d9d9\",\"editorCodeLens.foreground\":\"#403f53\",\"editorBracketMatch.background\":\"#d3e8f8\",\"editorBracketMatch.border\":\"#2aa298\",\"editorError.border\":\"#fbfbfb\",\"editorWarning.border\":\"#daaa01\",\"editorGutter.addedBackground\":\"#49d0c5\",\"editorGutter.modifiedBackground\":\"#6fbef6\",\"editorGutter.deletedBackground\":\"#f76e6e\",\"editorRuler.foreground\":\"#d9d9d9\",\"editorOverviewRuler.errorForeground\":\"#e64d49\",\"editorOverviewRuler.warningForeground\":\"#daaa01\",\"editorSuggestWidget.background\":\"#f0f0f0\",\"editorSuggestWidget.foreground\":\"#403f53\",\"editorSuggestWidget.highlightForeground\":\"#403f53\",\"editorSuggestWidget.selectedBackground\":\"#d3e8f8\",\"editorSuggestWidget.border\":\"#d9d9d9\",\"debugExceptionWidget.background\":\"#f0f0f0\",\"debugExceptionWidget.border\":\"#d9d9d9\",\"editorMarkerNavigation.background\":\"#d0d0d0\",\"editorMarkerNavigationError.background\":\"#f76e6e\",\"editorMarkerNavigationWarning.background\":\"#daaa01\",\"debugToolBar.background\":\"#f0f0f0\",\"extensionButton.prominentBackground\":\"#2aa298\",\"extensionButton.prominentForeground\":\"#f0f0f0\",\"statusBar.background\":\"#f0f0f0\",\"statusBar.border\":\"#f0f0f0\",\"statusBar.debuggingBackground\":\"#f0f0f0\",\"statusBar.debuggingForeground\":\"#403f53\",\"statusBar.foreground\":\"#403f53\",\"statusBar.noFolderBackground\":\"#f0f0f0\",\"statusBar.noFolderForeground\":\"#403f53\",\"peekView.border\":\"#d9d9d9\",\"peekViewEditor.background\":\"#f6f6f6\",\"peekViewEditorGutter.background\":\"#f6f6f6\",\"peekViewEditor.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.background\":\"#f0f0f0\",\"peekViewResult.fileForeground\":\"#403f53\",\"peekViewResult.lineForeground\":\"#403f53\",\"peekViewResult.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.selectionBackground\":\"#e0e7ea\",\"peekViewResult.selectionForeground\":\"#403f53\",\"peekViewTitle.background\":\"#f0f0f0\",\"peekViewTitleLabel.foreground\":\"#403f53\",\"peekViewTitleDescription.foreground\":\"#403f53\",\"terminal.foreground\":\"#403f53\"},\"fg\":\"#403f53\",\"bg\":\"#f6f7f9\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#556484\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#ae3c3afd\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#403f53\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#5f636f\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#3a688f\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"foreground\":\"#bb2060\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#5d6376\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#58656a\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#646464\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#286d70\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword Operator Comparison, imports, returns and Keyword Operator Ruby\",\"scope\":[\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.module.ruby\",\"keyword.control.class.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Control Conditional\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"foreground\":\"#486e26\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#a64348\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#186e73\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#984e4d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#3e697c\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#555ea2\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#111111\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#7c5686\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Symbols\",\"scope\":[\"constant.language.symbol.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#954f5a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#403f53\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\",\"variable.other.property.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#76578b\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-7)\",\"terminalBackground\":\"var(--sl-color-gray-7)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-7)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#0000001a\",\"markBorderColor\":\"#00000055\"}}}],\"defaultLocale\":\"en\",\"cascadeLayer\":\"starlight.components\",\"styleOverrides\":{\"borderRadius\":\"0px\",\"borderWidth\":\"1px\",\"codePaddingBlock\":\"0.75rem\",\"codePaddingInline\":\"1rem\",\"codeFontFamily\":\"var(--__sl-font-mono)\",\"codeFontSize\":\"var(--sl-text-code)\",\"codeLineHeight\":\"var(--sl-line-height)\",\"uiFontFamily\":\"var(--__sl-font)\",\"textMarkers\":{\"lineDiffIndicatorMarginLeft\":\"0.25rem\",\"defaultChroma\":\"45\",\"backgroundOpacity\":\"60%\"}},\"plugins\":[{\"name\":\"Starlight Plugin\",\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}],\"removeUnusedThemes\":false}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",9,11,23,24,34,35,44,45,55,56,66,67,77,78,87,88,97,98,108,109,119,120,130,131,140,141,151,152,161,162,171,172,181,182,191,192,201,202,211,212,221,222,231,232,242,243,252,253,262,263,272,273,283,284,293,294,303,304,313,314,323,324,332,333,342,343,352,353,362,363,372,373,383,384,393,394,403,404,413,414,423,424,433,434,443,444,453,454,463,464,473,474,483,484,493,494,503,504,513,514,524,525,535,536,546,547,557,558,568,569,578,579,589,590,600,601,611,612,622,623,633,634,644,645,655,656,666,667,677,678,687,688,698,699,709,710,720,721,730,731,741,742,752,753,763,764,774,775,785,786,796,797,807,808,818,819,829,830,840,841,851,852,862,863,873,874,884,885,895,896,906,907,916,917,927,928,938,939,948,949,958,959,969,970,980,981,990,991,1000,1001,1011,1012,1022,1023,1033,1034,1044,1045,1055,1056,1066,1067,1077,1078,1088,1089,1099,1100,1110,1111,1121,1122,1132,1133,1143,1144,1154,1155,1165,1166,1176,1177,1187,1188,1198,1199,1209,1210,1220,1221,1231,1232,1242,1243,1253,1254,1264,1265,1275,1276,1286,1287,1297,1298,1308,1309,1319,1320,1330,1331,1341,1342,1352,1353,1363,1364,1374,1375,1385,1386,1396,1397,1407,1408,1418,1419,1429,1430,1440,1441,1451,1452,1462,1463,1473,1474,1484,1485,1495,1496,1506,1507,1517,1518,1528,1529,1539,1540,1550,1551,1561,1562,1572,1573,1583,1584,1594,1595,1604,1605,1615,1616,1625,1626,1635,1636,1644,1645,1653,1654,1663,1664,1673,1674,1683,1684,1693,1694,1702,1703,1712,1713,1722,1723,1732,1733,1742,1743,1752,1753,1761,1762,1771,1772,1781,1782,1791,1792,1801,1802,1811,1812,1821,1822,1831,1832,1840,1841,1850,1851,1860,1861,1870,1871,1880,1881,1890,1891,1900,1901,1910,1911,1919,1920,1929,1930,1939,1940,1949,1950,1959,1960,1969,1970,1979,1980,1989,1990,2003,2004,2014,2015,2025,2026,2036,2037,2047,2048,2058,2059,2069,2070,2080,2081,2091,2092,2102,2103,2112,2113,2123,2124,2134,2135,2145,2146,2156,2157,2167,2168,2178,2179,2189,2190,2200,2201,2211,2212,2222,2223,2233,2234,2244,2245,2255,2256,2266,2267,2277,2278,2288,2289,2299,2300,2310,2311,2321,2322,2332,2333,2343,2344,2354,2355,2364,2365,2374,2375,2384,2385],{"id":9,"data":12,"body":20,"filePath":21,"digest":22,"deferredRender":14},{"title":13,"editUrl":14,"head":15,"template":16,"sidebar":17,"pagefind":14,"draft":18},"Xahau Documentation",true,[],"doc",{"hidden":18,"attrs":19},false,{},"import { LinkCard } from '@astrojs/starlight/components';\n\nWelcome to the Xahau Documentation. This is your comprehensive guide to understanding and working with Xahau. This documentation is divided into three main categories: Features, Infrastructure, and Technical.\n\nEach category is designed to provide you with detailed insights and instructions about different aspects of Xahau.\n\n### Features\n\nThe Features section is where you'll find information about the unique aspects of Xahau. One of the key areas covered in this section is Developer Tooling.\n\nOur Developer Tooling page covers Hooks Tools and Client Libraries, simplifying the process of interacting with Hooks and the Xahau Ledger. This section is designed to help you understand the functionality and capabilities of Xahau, with practical examples to help illustrate these features in action.\n\n### Protocol Reference\n\nThe Protocol Reference section of Xahau's documentation provides an in-depth look at the platform's unique aspects, including various transaction types like AccountDelete, CheckCancel, and Payment, each with its own specific use and characteristics.&#x20;\n\nIt also covers the different ledger objects integral to the network's operation, such as AccountRoot and Amendments. This comprehensive overview aims to enhance the understanding of Xahau's functionalities and capabilities, ensuring users can fully leverage the network's features.\n\n### Infrastructure\n\nThe Infrastructure section provides detailed instructions for setting up the build environment on both Ubuntu 22.04 and macOS 13.5.2.\n\nIn the 'Building Xahau' chapter, you will find a step-by-step guide through the process of establishing environmental variables, installing core and Xahaud dependencies, and compiling the software.\n\nThis includes the acquisition and setup of essential components like LLVM, Boost, WasmEdge, and Protobuf. The steps explain why certain versions and configurations are needed to ensure compatibility and optimal performance.\n\nThis section ends with cloning the Xahau repository and creating the Xahaud target, setting developers on the path to adding to or deploying the Xahau network.\n\n**We hope this documentation provides you with the information you need to understand, use, and contribute to Xahau. Happy exploring!**","src/content/docs/docs/index.mdx","c6d622aa29004e25","docs/what-is-different",{"id":23,"data":25,"body":31,"filePath":32,"digest":33,"deferredRender":14},{"title":26,"description":27,"editUrl":14,"head":28,"template":16,"sidebar":29,"pagefind":14,"draft":18},"XRPL/Xahau: What is Different?","A list of notable differences between the XRP Ledger and Xahau.",[],{"hidden":18,"attrs":30},{},"import { Aside, LinkCard } from '@astrojs/starlight/components';\n\n#### IOU Token Escrow & PayChannels\n\nXahau introduces IOU Token Escrow and PayChannels as unique features, enhancing transaction flexibility and security. They facilitate the temporary holding of IOU tokens under predefined conditions (escrow) and the establishment of payment channels for efficient, off-ledger transactions.\n\n\u003CLinkCard title=\"Payments\" href=\"../features/network-features/payments\" />\n\n#### URITokens NOT NFTokens\n\nInstead of using NFTokens like XRPL, Xahau employs URITokens. URITokens are a form of non-fungible digital assets with unique identifiers and metadata, offering a novel approach to asset representation on the blockchain.\n\n\u003CLinkCard title=\"URIToken\" href=\"../features/network-features/uritoken\" />\n\n#### Different Repo\n\nXahau and XRPL operate from different repositories, signifying that they are separate protocols with their own development trajectories and documentation. This distinction implies that Xahau may offer unique features and optimizations not found in XRPL.\n\n[https://github.com/Xahau/xahaud](https://github.com/Xahau/xahaud)\n\n#### Different Build Process (WASM & LLVM)\n\nXahau's build process incorporates WebAssembly (WASM) and the Low-Level Virtual Machine (LLVM), which is not described in the XRPL build process. Xahau is utilizing these technologies for enhanced smart contract capabilities and to improve the performance and cross-platform compatibility of its codebase.\n\n\u003CLinkCard title=\"Building Xahau\" href=\"../infrastructure/building-xahau\" />\n\n#### Different Amendment Time (5 days)\n\nThe amendment process in Xahau has a specified time frame of 5 days, differing from XRPL's timeline. Amendments are protocol changes, and the 5-day period refers to the duration validators have to reach a consensus and implement these changes.\n\n\u003CLinkCard title=\"Amendments\" href=\"../features/amendments\" />\n\n#### Different Starting Sequence\n\nXahau employs a different starting sequence for accounts than XRPL. The initial sequence on the account is the ripple epoch time when the account was create/imported into Xahau.\n\n#### Import / Burn 2 Mint\n\nImporting from XRPL to Xahau grants users 2 XAH tokens, indicating an incentive mechanism to encourage asset migration or bridging from XRPL to Xahau, potentially to enhance network adoption and liquidity.\n\n\u003CLinkCard title=\"Burn 2 Mint (B2M)\" href=\"../features/burn-2-mint\" />\n\n#### Balance Rewards (Rewards for using XAH)\n\nXahau offers balance rewards for utilizing XAH, a feature absent in XRPL. This is a reward system for holding or using Xahau's native token, XAH, to promote network engagement and stability.\n\n\u003CLinkCard title=\"Balance Rewards\" href=\"../features/network-features/balance-rewards\" />\n\n#### Hooks\n\nHooks in Xahau, which are not present in XRPL, are programmable scripts or smart contract-like functions that can be attached to accounts. They add a layer of programmability and automation to the network's operations.\n\n\u003CLinkCard title=\"Hooks\" href=\"../hooks\" />\n\n#### Governance Structure\n\nXahau's governance structure differs from XRPL's. Xahau has its own approach to decision-making, proposal systems, or validator roles, which could influence the network's evolution.\n\n\u003CLinkCard title=\"Governance Game\" href=\"../features/governance-game\" />\n\n#### Node Requirements\n\nRunning a Xahau node has different requirements compared to an XRPL node. These differences relate to the technical specifications needed to support Xahau's unique features and network demands.\n\n\u003CLinkCard title=\"System Requirements\" href=\"../infrastructure/system-requirements\" />\n\n#### Native Token\n\nXahau's native token is XAH, distinct from XRPL's XRP. As the primary currency within the Xahau network, XAH likely serves as the main medium of exchange and a store of value, central to the network's economic framework.\n\n\u003CLinkCard title=\"Currency Formats\" href=\"../protocol-reference/data-types/currency-formats\" />\n\n#### Versioning (Uses Dates)\n\nXahau employs a date-based versioning system, unlike XRPL's versioning approach. This method may provide a more intuitive means of tracking the network's updates and historical development.\n\n\u003CLinkCard title=\"Versioning Process\" href=\"../features/versioning-process\" />","src/content/docs/docs/what-is-different.mdx","be97844418386834","docs/features/amendments",{"id":34,"data":36,"body":41,"filePath":42,"digest":43,"deferredRender":14},{"title":37,"editUrl":14,"head":38,"template":16,"sidebar":39,"pagefind":14,"draft":18},"Amendments",[],{"hidden":18,"attrs":40},{},"Amendments represent new features or other changes to transaction processing.\n\nThe amendment system uses the consensus process to approve any changes that affect transaction processing on Xahau. Fully-functional, transaction process changes are introduced as amendments; validators then vote on these changes. If an amendment receives more than 80% support for five days, the amendment passes and the change applies permanently to all subsequent ledger versions. Disabling a passed amendment requires a new amendment to do so.\n\n**Note:** Bug fixes that change transaction processes also require amendments.\n\n### Amendment Process\n\nThe Contributing Code to Xahau topic walks through the workflow to develop an amendment from an idea to activation on Xahau.\n\nAfter the code for an amendment is built into a software release, the process to enable it happens within the Xahau network, which checks the status of amendments every _flag_ ledger (typically about 15 minutes apart).\n\nEvery 256th ledger is called a **flag** ledger. The flag ledger doesn't have special contents, but the amendment process happens around it.\n\n1. **Flag Ledger -1:** When `xahaud` validators send validation messages, they also submit their amendment votes.\n2. **Flag Ledger:** Servers interpret the votes from trusted validators.\n3.  **Flag Ledger +1:** Servers insert an `EnableAmendment` pseudo-transaction and flag based on what they think happened:\n\n    * The `tfGotMajority` flag means the amendment has more than 80% support.\n    * The `tfLostMajority` flag means support for the amendment has decreased to 80% or less.\n    * No flag means the amendment is enabled.\n\n    **Note:** It's possible for an amendment to lose 80% support on the same ledger it reaches the required five day period to be enabled. In these cases, an `EnableAmendment` pseudo-transactions is added for both scenarios, but the amendment is ultimately enabled.\n4. **Flag Ledger +2:** Enabled amendments apply to transactions on this ledger onwards.\n\n### Amendment Voting\n\nEach version of `xahaud` is compiled with a list of known amendments and the code to implement those amendments. Operators of `xahaud` validators configure their servers to vote on each amendment and can change it at any time. If the operator doesn't choose a vote, the server uses a default vote defined by the source code.\n\n**Note:** The default vote can change between software releases. \\[Updated in: rippled 1.8.1]\\[]\n\nAmendments must maintain five days of support from more than 80% of trusted validators to be enabled. If support drops below 80%, the amendment is temporarily rejected, and the two week period restarts. Amendments can gain and lose a majority any number of times before they become permanently enabled.\n\nAmendments that have had their source code removed without being enabled are considered **Vetoed** by the network.\n\n### Amendment Blocked Servers\n\nAmendment blocking is a security feature to protect the accuracy of Xahau's data. When an amendment is enabled, servers running earlier versions of `xahaud` without the amendment's source code no longer understand the rules of the network. Rather than guess and misinterpret ledger data, these servers become **amendment blocked** and can't:\n\n* Determine the validity of a ledger.\n* Submit or process transactions.\n* Participate in the consensus process.\n* Vote on future amendments.\n\nThe voting configuration of a `xahaud` server has no impact on it becoming amendment blocked. A `xahaud` server always follows the amendments enabled by the rest of the network, so blockages are based solely on having the code to understand rule changes. This means you can also become amendment blocked if you connect your server to a parallel network with different amendments enabled. For example, the Xahau Testnet typically has experimental amendments enabled. If you are using the latest production release, your server likely won't have the code for those experimental amendments.\n\nYou can unblock amendment blocked servers by upgrading to the newest version of `xahaud`.\n\n### Retiring Amendments\n\nWhen amendments are enabled, the source code for pre-amendment behaviors remain in `xahaud`. While there are use-cases for keeping old code, such as reconstructing ledger outcomes for verification, tracking amendments and legacy code adds complexity over time.\n\nThe [XRP Ledger Standard 11d](https://github.com/XRPLF/XRPL-Standards/discussions/19) defines a process for retiring old amendments and associated pre-amendment code. After an amendment has been enabled on the Mainnet for two years, it can be retired. Retiring an amendment makes it part of the core protocol unconditionally; it's no longer tracked or treated as an amendment, and all pre-amendment code is removed.","src/content/docs/docs/features/amendments.mdx","d474a6751898a97c","docs/features/burn-2-mint",{"id":44,"data":46,"body":52,"filePath":53,"digest":54,"deferredRender":14},{"title":47,"description":48,"editUrl":14,"head":49,"template":16,"sidebar":50,"pagefind":14,"draft":18},"Burn 2 Mint (B2M)","Burn2Mint is a low-level inter-chain primitive and is intended for enterprise users to self-supply their own liquidity as needed for their own purposes.",[],{"hidden":18,"attrs":51},{},"import { Aside, Tabs, TabItem } from '@astrojs/starlight/components';\n\n\u003CAside type=\"caution\">\nSince the ZeroB2M amendment has been voted in at Xahau, Burn 2 Mint (B2M) is no longer available to mint new assets. B2M is still available, but just for **key synchonisation** or to activate an account based (for which the information & procedures below are still relevant)\n\n[https://xahscan.com/amendment/7CA0426E7F411D39BB014E57CD9E08F61DE1750F0D41FCD428D9FB80BB7596B0](https://xahscan.com/amendment/7CA0426E7F411D39BB014E57CD9E08F61DE1750F0D41FCD428D9FB80BB7596B0)\n\u003C/Aside>\n\n## Burn2Mint Technical Manual (Xahau Testnet)\n\n\u003CAside type=\"caution\">\n**This process is deliberately non-trivial and not designed for end users.** Mistakes result in a burn not being able to turn into a mint.\n\nThis is a warning that will appear on the production version of this document. You may disregard it because you are burning free testnet XRP in this instance.\n\u003C/Aside>\n\nBurn2Mint is a low-level inter-chain primitive intended for enterprise users to self-supply their liquidity as needed for their purposes. Running your own nodes and performing this operation yourself on your nodes means you and you alone bear responsibility for the outcome of the procedure.\n\nThe generation & collection of XPOPs fundamentally relies on collecting validation messages on the overlay network, which are ephemeral by nature. If your nodes are not reliably connected, or if your hardware, network connection, or operating system fails at the wrong point in time, then the XPOP for a Burn Transaction might not be generated or might not be generated correctly. This can lead to loss of funds as the Burn Transaction's XPOP was not captured in time, and it’s possible the validation messages are lost forever, making a Mint Transaction impossible despite a successful Burn Transaction.\n\nIf you are not comfortable with taking these technical risks or do not understand what you are doing, or are not an enterprise user, then please source your liquidity via other friendly alternatives.\n\n### Setup\n\nTo perform B2M, _two_ XRPL protocol nodes should be operated by the user:\n\n1. **Obtain xPOP from burn**\n\n\u003CTabs>\n\u003CTabItem label=\"xPOP Collector & Server (easier)\">\nRun this (e.g., using Docker Compose; see repo Docs)\\\n[**https://github.com/Xahau/Validation-Ledger-Tx-Store-to-xPOP**](https://github.com/Xahau/Validation-Ledger-Tx-Store-to-xPOP)\n\n* The service listens for XRPL validation messages, closed ledgers, and transactions.\n* It stores this data in an organized file system.\n* It is essential for generating xPOPs, as XRPL validation messages are ephemeral; without storing them, a transaction burn can't be turned into a mint.\n* **How it Works**:\n  * A watcher connects to multiple XRPL nodes and listens for specific data.\n  * The captured data is then saved, organized, and used to generate xPOPs\n\nSimply fetch the xPOP now from:\\\n`http[s]://{your-host}:{your-port}/xpop/{tx-hash}`\n\nYou can easily fetch/create xPOPs from a node using the repo above using this NPM package:\n\n[**https://www.npmjs.com/package/xpop**](https://www.npmjs.com/package/xpop)\n\u003C/TabItem>\n\n\u003CTabItem label='or: dedicated \"Burning Node\"'>\n**Burn Node**, comprising:\n\n* A modified Rippled instance (modified to record XPOPs)\n* Universal linux binary here: [https://tvntezq.dlvr.cloud/rippled_with_xpop](https://tvntezq.dlvr.cloud/rippled_with_xpop)\n* [https://github.com/RichardAH/rippled/tree/proof-of-burn](https://github.com/RichardAH/rippled/tree/proof-of-burn)\n* Running a with a rippled.cfg that has:\n  * an **\\[xpop_dir]** stanza specifying an output directory for generated XPOPs.\n  * a **\\[network_id]** stanza specifying network_id: 1\n    * (in production this would be network 0)\n  *   a `validators.txt` containing:\\\\\n\n      ```\n      [validator_list_sites]\n      https://vl.altnet.rippletest.net\n      [validator_list_keys]\n      ED264807102805220DA0F312E71FC2C69E1552C9C5790F6C25E3729DEB573D5860\n      ```\n\u003C/TabItem>\n\u003C/Tabs>\n\n2. **Mint**\n\n* In this test scenario, you will connect directly to the Xahau. You do not need to run your own node. In the production scenario, you will need to run a Mint node, which is just a stock node for the target network. This is because public nodes will probably opt out of accepting Import transactions due to legal risk.\n  * Connect to **wss://xahau-test.net**\n  * Or download download/run: [**https://github.com/Xahau/Xahau-Testnet-Docker**](https://github.com/Xahau/Xahau-Testnet-Docker)\n\n## Sample (nodejs)\n\nThis example creates a testnet account, burns 10 XRP & then imports this on Xahau Testnet, using the xPOP fetched using the tools mentioned above.\n\n```js\nimport { derive, utils, signAndSubmit } from 'xrpl-accountlib'\nimport { TxData } from 'xrpl-txdata'\nimport { XrplClient } from 'xrpl-client'\nimport { xpop, setEndpoints as xpopEndpoints } from 'xpop'\nimport fetch from 'node-fetch'\n\n// The above needs:\n//   npm install xrpl-accountlib xrpl-txdata xrpl-client xpop node-fetch \n\nconsole.log('Obtaining XRPL Testnet account (faucet)')\nconst faucet = await (await fetch('https://faucet.altnet.rippletest.net/accounts', { method: 'POST' })).json()\nconsole.log(' -->', faucet.account.address)\nconst account = derive.familySeed(faucet.account.secret)\n\nxpopEndpoints((await (await fetch('https://xrpl.ws-stats.com/xpop/list?json=true')).json()).bestguess)\n\nconst nodes = {\n  testnet: [\n    new XrplClient('wss://s.altnet.rippletest.net:51233'),\n    new XrplClient('wss://testnet.xrpl-labs.com'),\n  ],\n  xahau: [\n    new XrplClient('wss://xahau-test.net'),\n  ]\n}\n\nconsole.log('Waiting for network connections to be ready')\nawait Promise.all(Object.keys(nodes).map(k => Promise.race(nodes[k].map(n => n.ready()))))\n\nconsole.log('Waiting for faucet account funding & obtaining network values...')\nawait new Promise(resolve => setTimeout(resolve, 4000)) // Wait till ledger is closed\n\nconst [\n  testnetParams,\n  xahauParams,\n] = await Promise.all([\n  Promise.race(nodes.testnet.map(n => utils.accountAndLedgerSequence(n, account))),\n  Promise.race(nodes.xahau.map(n => utils.accountAndLedgerSequence(n, account))),\n])\n\nconst testnetTx = {\n  ...testnetParams.txValues,\n  TransactionType: 'AccountSet',\n  Fee: String(10_000_000),\n  OperationLimit: xahauParams.txValues.NetworkID,\n  NetworkID: undefined, // Testnet has a NetworkID \u003C 1024, so none should be provided\n}\n\nconsole.log('Submitting burn...', testnetTx)\nconst testnetSubmitted = await Promise.race(nodes.testnet.map(n => signAndSubmit(testnetTx, n, account)))\nconsole.log('Submitted burn to testnet')\nconsole.log(' -->', 'https://testnet.xrpl.org/transactions/' + testnetSubmitted.tx_id)\n\nconsole.log('Obtaining burn tx data...')\n\nconst txdata = new TxData(nodes.testnet.map(n => n.getState().server.uri), {\n  AllowNoFullHistory: true,\n  EndpointTimeoutMs: 2_000,\n  OverallTimeoutMs: 10_000,\n})\n\nconst appliedtx = await txdata.getOne(testnetSubmitted.tx_id)\nconsole.log(' -->', 'Burn validated in ledger', appliedtx?.result?.ledger_index)\n\nconsole.log('Waiting for closed ledger before fetching xPOP...')\nawait new Promise(resolve => setTimeout(resolve, 4000)) // Wait till ledger is closed\n\nconsole.log('Fetching xPOP...')\n\nconst Blob = await xpop(testnetSubmitted.tx_id, appliedtx?.result?.ledger_index, 1)\n\nconsole.log(' -->', 'xPOP fetched, hex strlen:', Blob.length)\n\nconst hooksTx = {\n  ...xahauParams.txValues,\n  TransactionType: 'Import',\n  Fee: '0',\n  Blob,\n}\n\nconsole.log('Submitting for mint of xPOP...')\n\nconst b2mSubmitted = await Promise.race(nodes.xahau.map(n => signAndSubmit(hooksTx, n, account)))\n\nconsole.log(' -->', 'B2M submitted! TX on Xahau Testnet:')\nconsole.log(' -->', 'https://test.xahauexplorer.com/explorer/' + b2mSubmitted?.tx_id)\nconsole.log('     -->', b2mSubmitted.response.engine_result, b2mSubmitted.response.engine_result_message)\n\n// Closing connections\nObject.keys(nodes).map(k => nodes[k].map(n => n.close()))\n```\n[Source](https://gist.github.com/WietseWind/cd8a7a8c88f218fe7b768f59a665685d)\n\n## Technical Summary of B2M's procedure\n\n#### New Transaction Type: `Import`\n\nXahau Testnet (_network_id=21338_) introduces a new transaction type called _**Import**_, which accepts an XPOP from the Ripple testnet chain (_network_id=1_) and provides for a “burn-to-mint” unidirectional value transfer and key / account synchronization.\n\n### Burn Transaction\n\nA _**Burn Transaction**_ is a transaction that burns XRP on a source XRPL chain, which would be used as proof (XPOP) to mint on a destination XRPL chain.\n\nThe following are supported transaction types:\n\n* AccountSet\n* SetRegularKey\n* SignerListSet.\n\n\u003CAside type=\"caution\">\nTickets _**are not accepted**_ in **any** Burn Transactions and would lead to a Burn Transaction being invalid for minting. To protect against spam, transactions must be validated with a real, natural sequence number.\n\u003C/Aside>\n\nNote that other transaction types are not currently supported and cannot be used to mint on Xahau Testnet. (However, this may change).\n\nAll three transaction types can be used for minting. This means the _**Fee**_ burned by the Burn Transaction is subsequently minted on Xahau Testnet after a successful `Import`.\n\nIf `SetRegularKey` or `SignerListSet` is used, then key synchronization occurs according to the standard rules of the transaction type. If `AccountSet` it is used, then no key synchronization occurs on the destination XRPL chain (Xahau Testnet).\n\nA field called _**OperationLimit**_ must be present on the Burn Transaction to be the destination chain’s Network ID. This field is to prevent replay attacks on other B2M-integrated chains.\n\nThe Burn Transaction may be used for Minting if it has either a **tesSUCCESS** transaction code or _any_ of the **tec** transaction codes. Meaning _if_ the fee was burnt, then the transaction can be used for minting. However, key synchronization _only_ occurs when the Burn Transaction result was tesSUCCESS.\n\nExample Burn Transaction:\n\n```json\n{\n\t\"TransactionType\": \"AccountSet\",\n\t\"Fee\": 10000000,\n\t\"OperationLimit\": 21338\n}\n```\n\n### XPOP Collection\n\nBefore submitting the Burn Transaction, ensure your Burn Node is synchronized with the testnet chain (Network ID: `1`).\n\nAfter checking your Burn Node's state, submit the signed Burn Transaction to the Burn Node.\n\nThe Burn Node watches closed ledgers for transactions containing the **OperationLimit** field and uses collected validation messages to generate an XPOP (Proof Of Burn). These are written to a file under the directory specified in **\\[xpop_dir]** stanza in the Burn Node’s `rippled.cfg`.\n\nWait for the ledger to close, then browse through the xpop_dir for the Burn Transaction's XPOP according to its TXID. The file contains a JSON document, which is the XPOP that you'll be relaying to the destination XRPL chain (HooksV3).\n\nTake the raw contents of this file and encode it as HEX. This will become the contents of the \\*_Blob_ field in the `Import` transaction.\n\n### Mint Transaction\n\nYour binary codec will be missing the necessary fields to construct the `Import` (Mint) transaction. If you are using ripple-binary-codec, you can update its `definitions.json` file in the following way:\n\n1. Change directory into `node_modules`\n2. Run `find . | grep 'dist/enums/definitions.json'` to locate the relevant file to update\n3. Connect to **wss://hooks-testnet-v3.xrpl-labs.com**\n4. Request: `{\"command\":\"server_definitions\"}`\n5. Dump the contents of the `\"result\"` key into `definitions.json` from step 2.\n\nThe `Import` transaction type takes only one non-common field _**Blob.**_. This must contain the HEX-encoded XPOP from the XPOP Collection phase.\n\n* You can do this with `cat xpopjsonfile | xxd -p | tr -d '\\n'`\n\nThe `Account` and `SigningPubKey` field (or Signers array) must match exactly between the Burn Transaction and the Mint Transaction. Users can only mint to the same account, which they burned from.\n\nIf the `Account` field specifies an account that does not yet exist on Xahau Testnet, and it will be created. In this case, use 0 for the `Sequence` field on the Mint Transaction. If the account already exists on Xahau Testnet, then use the next available Sequence number on the account on Xahau Testnet.\n\nExample Import:\n\n```json\n{\n\t\"Account\": \"\u003Csame as it was in the Burn Transaction>\",\n\t\"TransactionType\": \"Import\",\n\t\"Blob\": \"\u003Chex encoded (upper case) XPOP>\",\n\t\"Sequence\": 0\n} \n```\n\nIMPORTANT: **The Mint Transaction must be signed exactly the same way and by the same account as the Burn Transaction!**\n\nEncode and sign the transaction appropriately, yielding a signed transaction blob (hex).\n\nIf you are not running your own Mint node:\n\n* Connect to **wss://xahau-testn.et**\n* Submit the transaction to the node:\n\n```json\n{\n\t\"command\": \"submit\",\n\t\"tx_blob\": \"\u003CHEX ENCODED IMPORT TXN>\"\n}\n```\n\nOr, if you are running your own Mint node:\n\n* Ensure the Mint Node is running and synchronised to Network ID 21338.\n* Use the `submit` RPC call to submit the Mint Transaction.\n  * You can do this from command line using `./hooksv3d submit \u003Chex here>`\n\n### Considerations\n\nIf the Account is to be created on Xahau Testnet but the keying for the account is unclear from the context of the Burn Transaction, then the Account is created in a blackholed mode. It can be subsequently rekeyed using either keying transaction type.\n\nIf the Burn Transaction is either a `SignerListSet` or a `SetRegularKey` transaction, then provided it had a tesSUCCESS transaction result on the source XRPL chain (testnet), that same keying operation is now applied to that same account on the destination XRPL chain (Xahau Testnet).\n\nDuring testing, Accounts on Xahau Testnet _can_ be deleted, however, on the production Hooks-enabled chain, they will not be able to be deleted.\n\nAccounts on Xahau Testnet have an optional _**ImportSequence**_ field in the AccountRoot. If **Import** has ever been used on that account on Xahau Testnet, this field is present and is populated with the most recently imported Burn Transaction’s Sequence number. This is to prevent replay attacks, but it also means that you should never submit your Burn2Mints out of sequence, otherwise the skipped transactions will never be accepted for Minting.","src/content/docs/docs/features/burn-2-mint.mdx","4e33c01a6d957254","docs/features/balance-adjustments",{"id":55,"data":57,"body":63,"filePath":64,"digest":65,"deferredRender":14},{"title":58,"description":59,"editUrl":14,"head":60,"template":16,"sidebar":61,"pagefind":14,"draft":18},"Balance Adjustments","How to claim a Balance Adjustment on Xahau",[],{"hidden":18,"attrs":62},{},"### Opt-in + Claim\n\nOpting into Balance Adjustments is the same transaction as claiming an adjustment. You must do this first to kick off the ability to claim later.\n\n```json\n{\n    \"Account\": \"\u003CrAddr...>\",\n    \"TransactionType\": \"ClaimReward\",\n    \"Issuer\": \"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh\",\n    \"NetworkID\": 21337\n}    \n```\n\n### Opt-out\n\nTo opt-out of Balance Adjustments, omit the Issuer field and set Flags to 1. Doing this will delete your average balance statistics. These will not be restored. If you opt-in again, they will be reset to a starting position.\n\n```json\n{\n    \"Account\": \"\u003CrAddr...>\",\n    \"TransactionType\": \"ClaimReward\",\n    \"NetworkID\": 21337,\n    \"Flags\": 1\n} \n```\n\n### Technical Details\n\nBalance Adjustments are implemented as a combination of two pieces of code:\n\n1. BalanceRewards Amendment (native code)\n2. Genesis Account's Reward Hook (hook code).\n\nBalanceRewards collect average balance statistics about the accounts they are activated on. These statistics are then passed to a target Hook when the user wishes to claim.\n\nAll interactions with this amendment are via the ClaimReward transaction:\n\n```json\n{\n    \"Account\": \"\u003CrAddr...>\",\n    \"TransactionType\": \"ClaimReward\",\n    \"Issuer\": \"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh\",\n    \"NetworkID\": 21337\n}    \n```\n\nWhen a ClaimReward transaction is successfully submitted with a **tesSUCCESS** error code, the account's average balance statistics are reset. The only other thing the amendment does is invoke the Hooks on the specified Issuer's account.\n\nThe _Issuer_ field is the account responsible for fulfilling the claim. Depending on what's installed on the Issuer account, several things can happen:\n\n* If no Hook is installed on the Issuer's account, then nothing is done, and the BalanceRewards statistics are simply reset.\n* If a Hook is installed on the Issuer's account and the Hook performs a rollback, then the transaction fails, and the statistics are _not_ reset.\n* If a Hook is installed on the Issuer's account and the Hook performs accept, then the transaction succeeds, and the statistics are reset. In this case, the Hook should also emit a transaction back to the user's account containing their reward.\n\nIn practice, on Xahau, the Issuer will probably always be the genesis account **rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh**.\n\nUnless:\n\n* Network Governance results in a different account being used for BalanceAdjustments.\n* A non-Governance party runs its own BalanceRewards giveaway that the user wants to be involved with. Note that successful claims result in the average balance statistics being reset, so only one type of reward can be claimed per reset.\n\nThe average balance statistics exist as a collection of three new fields on the AccountRoot object. These are:\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"240\">Field\u003C/th>\u003Cth width=\"95.33333333333331\">Type\u003C/th>\u003Cth>Explanation\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ccode>sfRewardAccumulator\u003C/code>\u003C/td>\u003Ctd>UINT64\u003C/td>\u003Ctd>The area under of the balance-time graph for your account since last ClaimReward transaction.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>sfRewardLgrFirst\u003C/code>\u003C/td>\u003Ctd>UINT32\u003C/td>\u003Ctd>The ledger number of the last ClaimReward transaction.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>sfRewardLgrLast\u003C/code>\u003C/td>\u003Ctd>UINT32\u003C/td>\u003Ctd>The ledger sequence number of the last transaction in or out of your account.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>sfRewardTime\u003C/code>\u003C/td>\u003Ctd>UINT32\u003C/td>\u003Ctd>The ledger time the last reward was claimed.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>","src/content/docs/docs/features/balance-adjustments.mdx","49739198a7accfe8","docs/features/governance-game",{"id":66,"data":68,"body":74,"filePath":75,"digest":76,"deferredRender":14},{"title":69,"description":70,"editUrl":14,"head":71,"template":16,"sidebar":72,"pagefind":14,"draft":18},"Governance Game","The Governance Game is an innovative governance mechanism within the Xahau ecosystem to ensure a community-centric approach towards decision-making.",[],{"hidden":18,"attrs":73},{},"### Overview\n\nThe Xahau Governance Game allows up to 400 stakeholders to democratically participate in the management of the Xahau network via the Governance Hook installed on the Genesis Account.\n\n### Layer 1\n\nThe game consists of a \"Layer 1\" table at which there are 20 seats. A Xahau account (r-address) may fill each seat, or it may be empty. When a seat is filled, it is said that a member of the table sits there.\n\nTo play the game, the members of the table cast votes. The votes are for one of three types of topics:\n\n* Seat topics\n* Hook topics\n* Reward topics.\n\nSeat topics are S00 through S19 and represent a vote for who (if anyone) currently sits in that seat. A vote of 80% is sufficient to make a change. The voting process is continuous, with the final vote that crosses the threshold actioning the change.\n\nHook topics are H0 through H9 and represent which Hooks, including the Governance Hook itself, are installed on the table's account. These topics require 100% of the members seated at that table to agree before a change can be made. This allows the Governance Game to be updated and for more Genesis account features to be added over time.\n\nReward topics are RR and RD, which stand for Reward-Rate and Reward-Delay, respectively. These topics also require 100% of the members at the table to agree in order to make a change. These parameters affect the BalanceAdjustments system: how much each active user on the network can claim and how often.\n\n### Layer 2\n\nThe members who fill seats on the Layer 1 table are Xahau accounts (r-addresses). The governance game is designed to be structurally recursive, such that one of these accounts may itself be a table consisting of another 20 seats. This is called a Layer 2 table, and the seats are Layer 2 seats.\n\nWithin a Layer 2 table, the same seat voting and hook voting topics exist, with the same voting rules as the Layer 1 table. This allows a table to govern its own membership and the hooks that run there.\n\nIn addition to these topics, a Layer 2 table may also, by a 51% vote, raise a vote to the Layer 1 table. This is a vote on behalf of the r-address that the Layer 2 table exists on and counts as a single vote at the Layer 1 table.\n\nThe Layer 2 table vote may fall below 51%, in which case the vote originally raised to the Layer 1 table is **not** retracted. Only a new (different) vote attaining 51% can change the table's vote at Layer 1.\n\nLayer 2 tables can only vote on Reward topics via a vote raised to Layer 1.\n\nIn summary, Layer 2 members can vote for:\n\n* Seats and Hooks for their own table, and\n* Seats, Hooks, and Reward topics for the L1 table via the Layer 1 seat their Layer 2 table resides in.\n\n### Game Constraints\n\n* Any table may have at least 2 members and at most 20 members.\n* A single r-address can only occupy one seat at a given table but may occupy one seat at each of many different tables.\n* The Governance Game is not designed to recurse beyond two layers. There's no technical infeasibility in implementing a Layer 3 table, but the current Governance Hook does not support it.\n\n### Validator Rewards\n\nValidator rewards are an incentive for running a validator on the network. The rewards are generated by the network and granted to the intersection of Layer 1 members and active UNL validators. To qualify for validator rewards within a given block of 256 ledgers, the following must be true:\n\n* The validator is on the Xahau UNL.\n* The validator validates successfully in the eyes of other UNL validators.\n* When the validator's master public key is converted to an r-address, that account sits at the L1 Table.\n\nRewards are ad-hoc and based on Xahau users' Balance Adjustments. When a user performs a Balance Adjustment, an amount equal to their adjustment divided by 20 is sent to the r-address of each of the active validators that meet the above criteria.\n\n## Technical Specification\n\nThe Governance Hook is installed on the genesis account by the XahauGenesis amendment several ledgers after ledger 1 on a new network. This is the L1 table. To create an L2 table, install the Hook on a different account, then seat that account at the L1 table.\n\n### Governance Hook Parameters\n\nWhen the Governance Hook is installed, it is installed with a set of HookParameters. These specify the initial composition of the table.\n\nEach HookParameter has a 3-byte name consisting of either 3 Ascii characters or 2 Ascii characters and an identifier as below. LE = Little Endian.\n\n```\nParameter Name: {'I', 'R', 'R'}\nParameter Value: Initial Reward Rate \u003C8 byte XFL fraction between 0 and 1, LE>\nParameter Name: {'I', 'R', 'D'}\nParameter Value: Initial Reward Delay \u003C8 byte LE XFL seconds between rewards>\nParameter Name: {'I', 'M', 'C'}\nParameter Value: Initial Member Count \u003C1 byte>\nParameter Name: {'I', 'S', 0x00}\nParameter Value: Initial seat #0's member's 20 byte Account ID.\nParameter Name: {'I', 'S', 0x01}\nParameter Value: Initial seat #1's member's 20 byte Account ID.\n... etc ... up to at most Seat 19.\n\n```\n\nTo kick-off the game, an Invoke transaction must be sent to the Hook. This may be sent by any account. No Blob or HookParameters are required. This Invoke transaction triggers the Hook for the first time and prompts it to create state entries for each initial seat, reward rate, and reward delay.\n\n### Governance Hook State\n\nThe Hook State of the Governance Hook is stored in the zero namespace: `0000000000000000000000000000000000000000000000000000000000000000.`\n\nThere are several types of state entry. The first is what are referred to as forward and reverse member keys. These map each seat number to the member who sits there and each member to the seat they sit at.\n\n```\nKey: 0x0000000000000000000000000000000000000000000000000000000000000005\nVal: \u003C20 byte AccountID of the member at seat 5 or all 0's or absent.>\n\nKey: \u003C20 byte AccountID of the member at seat 3>\nVal: 0x03\n```\n\nNext, there are some singleton state entries. Member Count, Reward Rate, and Reward Delay, respectively:\n\n```\nKey in Ascii: MC\nKey: 0x0000000000000000000000000000000000000000000000000000000000004D43\nVal: \u003C1 byte member count (how many seats are occupied)>\n\nKey in Ascii: RR\nKey: 0x0000000000000000000000000000000000000000000000000000000000005252\nVal: \u003C8 byte LE XFL reward rate (between 0 and 1 (1 being 100%))>\n\nKey in Ascii: RD\nKey: 0x0000000000000000000000000000000000000000000000000000000000005244\nVal: \u003C8 byte LE XFL reward delay in seconds>\n```\n\nFinally, votes and vote counters are also stored in Hook state. When a vote is cast by a seat it is recorded in Hook state as follows:\n\n```\nVote key is 32 bytes comprising:\n    'V' (0x56) - vote\n    'H' (0x48) or 'R' (0x52) or 'S' (0x53) - topic type\n    'R' (0x52) or 'D' (0x44) or 0 (0x00) to 19 (0x13) - topic detail\n     1  (0x01) or  2  (0x02) - target layer for this vote\n    0x00 00 00 00 00 00 00 00 - 8 bytes of padding\n    20 byte Account ID - the voter\nVote data:\n    20 byte Account ID or 8 byte XFL\n```\n\nWhen a vote is cast, it increments a vote counter-state entry. This counter keeps track of how many votes there currently are for this topic-data pair and allows the Hook to action the vote when voting crosses the required threshold. The counter state is as follows:\n\n```\nCounter key is 32 bytes comprising:\n    'C' (0x43) - count\n    'H' (0x48) or 'R' (0x52) or 'S' (0x53) - topic type\n    'R' (0x52) or 'D' (0x44) or 0 (0x00) to 19 (0x13) - topic detail\n     1  (0x01) or  2  (0x02) - target layer for this vote\n     0's for padding\n     vote data or left-truncated vote data\n```\n\n### Governance Hook Transactions\n\nThe Governance Hook is interacted with by its members using ttINVOKE transactions. In addition to this, the Hook may also emit its own ttINVOKE transactions if it is an L2 table raising a vote to the L1 table.\n\nA vote transaction contains a HookParameters array at the top level of the transaction:\n\n```\n{\n    Account: \u003Cmember's account>,\n    TransactionType: Invoke,\n    NetworkID: 21337,\n    Destination: \u003Ctable's account>,\n    HookParameters:\n    [\n        {\n            HookParameter:\n            {\n                HookParameterName: \"4C\",     // L - the target layer\n                HookParameterValue: \"01\",    // 01 for L1 table, 02 for L2 table\n                                             // note: this is the table the vote is\n                                             // intended for, not the table you're at\n                                             // i.e. for a L2 table you can vote on\n                                             // your own membership or on L1's\n            }\n        },\n        {\n             HookParameter:\n             {\n                 HookParameterName: \"54\",    // T - topic type\n                 HookParameterValue: \"4801\", // H [0x00-0x09] or \n                                             // S [0x00-0x13] or\n                                             // RR or RD\n             }\n        },\n        {\n             HookParameter:\n             {\n                 HookParameterName: \"56\",    // V - vote data\n                 HookParameterValue: \u003C32 or 20 or 8 bytes of vote data>\n             }\n         }\n    ]\n}\n    \n```\n\n### Clearing a Vote\n\nThere is no way to \"delete a vote\" per se. You can change your vote back to reflect the current position instead.&#x20;\n\nSo, for example, if no one sits at seat 8 and you have voted for account A to sit there, and then you change your mind, you can make a vote to vacate seat 8 (even though it's already vacant) thus aligning your vote with the current state of the seat.&#x20;\n\nTo do this, you vote with all 0's in the vote data, to the same length as the vote topic normally requires. So, for a seat vote, this is 20 bytes of 0.","src/content/docs/docs/features/governance-game.mdx","7792ec0dfddd5c59","docs/data-apis",{"id":77,"data":79,"body":84,"filePath":85,"digest":86,"deferredRender":14},{"title":80,"editUrl":14,"head":81,"template":16,"sidebar":82,"pagefind":14,"draft":18},"Data APIs",[],{"hidden":18,"attrs":83},{},"The primary Data API is located at https://data.xahau.network/","src/content/docs/docs/data-apis/index.mdx","1a8918497a5e8666","docs/features/faucet-and-explorer",{"id":87,"data":89,"body":94,"filePath":95,"digest":96,"deferredRender":14},{"title":90,"editUrl":14,"head":91,"template":16,"sidebar":92,"pagefind":14,"draft":18},"Faucet & Explorers",[],{"hidden":18,"attrs":93},{},"The Xahau Faucet & Explorers can be found here:\n\n## Testnet\n\n* **Faucet:** [**https://xahau-test.net**](https://xahau-test.net)\n  * To automate funding accounts on testnet, HTTP POST to:\\\n    [https://xahau-test.net/accounts](https://xahau-test.net/accounts)\\\n    Empty body: new account (prefunded)\\\n    JSON body with `destination` property: fund the mentioned `destination` account.\n* **Explorers:**\n  * **Xahauexplorer:** [**https://test.xahauexplorer.com**](https://test.xahauexplorer.com)\n  * **XRPLF:** [**https://explorer.xahau-test.net**](https://explorer.xahau-test.net)\n  * **XRPL.org:** [**https://xahau-testnet.xrpl.org**](https://xahau-testnet.xrpl.org)\n  * **XRPLWin:** [**https://xahau-testnet.xrplwin.com**](https://xahau-testnet.xrplwin.com/)\n\n## Mainnet\n\n* **Homepage:** [**https://xahau.network**](https://xahau.network/)\n* **Explorers:**\n  * **Xahauexplorer:** [**https://xahauexplorer.com**](https://xahauexplorer.com/)\n  * **Xahscan:** [**https://xahscan.com/**](https://xahscan.com/)\n  * **XRPLF:** [**https://explorer.xahau.network**](https://explorer.xahau.network/)\n  * **XRPL.org:** [**https://xahau.xrpl.org**](https://xahau.xrpl.org)\n  * **XRPLWin:** [**https://xahau.xrplwin.com**](https://xahau.xrplwin.com/)","src/content/docs/docs/features/faucet-and-explorer.mdx","aff93645e18f60f1","docs/features/public-nodes-rpc",{"id":97,"data":99,"body":105,"filePath":106,"digest":107,"deferredRender":14},{"title":100,"description":101,"editUrl":14,"head":102,"template":16,"sidebar":103,"pagefind":14,"draft":18},"Public Nodes (RPC)","Running your own node: amazing. Hit the ground running? Use the public Xahau RPC nodes.",[],{"hidden":18,"attrs":104},{},"## Mainnet (network 21337)\n\n* Websocket\n  * `wss://xahau.network`\n  * `wss://xahau.org` (alias, some ad-blockers block .network)\n* HTTP POST RPC\n  * `https://xahau.network`\n  * `https://xahau.org` (alias, some ad-blockers block .network)\n* Network Definitions (Binary Codec, ...)\n  * [`https://xahau.network/server_definitions.json`](https://xahau.network/server_definitions.json)\n\n## Testnet (network 21338)\n\n* Websocket\n  * `wss://xahau-test.net`\n* HTTP POST RPC\n  * `https://xahau-test.net`\n* Network Definitions (Binary Codec, ...)\n  * [`https://xahau-test.net/server_definitions.json`](https://xahau-test.net/server_definitions.json)\n\n## JSHooks-Testnet (network 31338)\n\n* Websocket\n  * `wss://jshooks.xahau-test.net`\n* HTTP POST RPC\n  * `https://jshooks.xahau-test.net`\n* Network Definitions (Binary Codec, ...)\n  * [`https://jshooks.xahau-test.net/server_definitions.json`](https://jshooks.xahau-test.net/server_definitions.json)","src/content/docs/docs/features/public-nodes-rpc.mdx","7522f32795588768","docs/features/versioning-process",{"id":108,"data":110,"body":116,"filePath":117,"digest":118,"deferredRender":14},{"title":111,"description":112,"editUrl":14,"head":113,"template":16,"sidebar":114,"pagefind":14,"draft":18},"Versioning Process","This document outlines our versioning workflow on GitHub, to streamline the development, testing, and deployment of new features and fixes.",[],{"hidden":18,"attrs":115},{},"import { Aside } from '@astrojs/starlight/components';\n\nThis document outlines the versioning process we use in our GitHub repository. We use a three-branch workflow: `dev`, `candidate`, and `release`. This process ensures that all new features and fixes are thoroughly tested before release.\n\n### Dev Branch\n\nThe dev branch is the main branch for ongoing development. All new features, bug fixes, and improvements are merged into this branch. This is the most active branch, and it's where developers should base their work.\n\nTo contribute to the dev branch, follow these steps:\n\n1. Fork the repository to your own GitHub account.\n2. Clone the forked repository to your local machine.\n3. Create a new branch for your feature or bug fix.\n4. Make your changes and commit them to your branch.\n5. Push your branch to your forked repository on GitHub.\n6. Create a pull request from your branch to the dev branch in the main repository.\n\n\u003CAside type=\"caution\">\nAll merges into the dev branch must be squashed\n\u003C/Aside>\n\nCode maintainers will review your pull request and provide feedback. Once the code is approved, it will be merged into the dev branch.\n\n### Candidate Branches\n\nOnce the features in the `dev` branch are ready for testing, they are merged into a `candidate` branch. This branch serves as a staging area for code that is almost ready for release.\n\nThe code in the `candidate` branch is thoroughly tested. Any bugs or issues found are fixed in the `dev` branch and then merged back into the `candidate` branch.\n\nThe `candidate` branch is typically in this testing phase for about 2 weeks. However, this period can be longer or shorter, depending on the urgency of the fixes or the size of the new features.\n\n1. Create a new branch `candidate` from `dev`.\n2. Create a PR from the `candidate` branch to the `release` branch with a name like \"Proposed.\"\n3. Update the \"High Level Overview of Change\" to include the Pull Requests from `candidate`. Update the \"Context of Change\" to include any additional notes about the PR's\n\n### Release Branch\n\nAfter the code in the `candidate` branch has been thoroughly tested and all issues have been addressed, it is merged into the `release` branch. This is the final step before the code is released.\n\nThe `release` branch contains the code that is currently in production or is about to be released. Only fully tested and stable code should be in this branch.\n\nOnce the code is in the `release` branch, it is tagged with a version number. This version number is used to track the release and is also used when creating release notes.\n\nIn the `release` branch, a binary is built and published at https://build.xahau.tech/. This binary is the final product that is delivered to the end users.\n\nTo release the code, follow these steps:\n\n1. Merge the `candidate` pull request into the release branch.\n2. Delete the `candidate` branch.\n\n\u003CAside type=\"caution\">\nAll merges into the release branch must be done with \\`git merge --ff-only candidate\\`\n\u003C/Aside>\n\n### Summary\n\nThis three-branch workflow ensures that all code is thoroughly tested before release. It allows us to catch and fix issues before they reach production, and it provides a clear path for moving code from development to release. The use of a custom LAN for testing and profiling metrics ensures that our code is not only functional but also efficient and performant.","src/content/docs/docs/features/versioning-process.mdx","a6e99e724c63eb79","docs/compliance/responsible-disclosure",{"id":119,"data":121,"body":127,"filePath":128,"digest":129,"deferredRender":14},{"title":122,"description":123,"editUrl":14,"head":124,"template":16,"sidebar":125,"pagefind":14,"draft":18},"Responsible Disclosure","Our Responsible Disclosure Policy provides clear guidelines for submitting reports through our support portal, ensuring confidentiality.",[],{"hidden":18,"attrs":126},{},"import { Aside } from '@astrojs/starlight/components';\n\n### Responsible Disclosure Policy\n\nAt Xahau, we believe that the security of our systems is extremely important.\n\nDespite our concern for the security of our systems during product development and maintenance, there's always the possibility of someone finding something we need to improve/update/change/fix /...\n\nWe appreciate you notifying us if you have found a weak point in one of our systems as soon as possible so we can immediately take measures to protect our customers and their data.\n\n### How to Report\n\nIf you believe you have found a security issue in one of our systems, please notify us as soon as possible by posting a **high level description of your finding and contact information (so someone can reach out) on Github:** [**https://github.com/Xahau/xahaud/issues**](https://github.com/Xahau/xahaud/issues)\n\n### Rules\n\nThis responsible disclosure policy is not an open invitation to actively scan our network and applications for vulnerabilities. Our continuous monitoring will likely detect your scan, and these will be investigated.\n\n#### We ask you to:\n\n* Not share information about the security issue with others until the problem is resolved, and to immediately delete any confidential data acquired\n* Not further abuse the problem, for example, by downloading more data than is necessary to demonstrate the leak or to view, delete, or amend the data of third parties\n* Provide detailed information in order for us to reproduce, validate, and resolve the problem as quickly as possible. Include your test data, timestamps, and URL(s) of the system(s) involved\n* Leave your contact details (e-mail address and/or phone number) so that we may contact you about the progress of the solution. We do accept anonymous reports.\n* Do not use attacks on physical security, social engineering, distributed denial of service, spam, or applications of third parties\n\n### Responsible Disclosure procedure(s)\n\n#### When you report a security issue, we will act according to the following:\n\n* You will receive a confirmation of receipt from us within 4 working days after the report is made\n* You will receive a response with the assessment of the security issue and an expected date of resolution within 4 working days after the confirmation of receipt is sent\n* We will take no legal steps against you in relation to the report if you have kept to the conditions as set out above\n* We will handle your report confidentially, and we will not share your details with third parties without your permission unless that is necessary in order to fulfill a legal obligation\n\n#### This responsible disclosure scheme is not intended for:\n\n* Complaints\n* Website unavailable reports\n* Phishing reports\n* Fraud reports\n\nFor these complaints or reports, please post a **high level description of your issue and contact information (so someone can reach out) on Github:** [**https://github.com/Xahau/xahaud/issues**](https://github.com/Xahau/xahaud/issues)\n\n### Bug bounty program\n\nXahau encourages the reporting of security issues or vulnerabilities. We may make an appropriate reward for confidential disclosure of any design or implementation issue that could be used to compromise the confidentiality or integrity of our users' data that was not yet known to us. We decide whether the report is eligible and the amount of the reward.\n\n### Exclusions\n\n#### The following types of security problems are excluded\n\n* (D)DOS attacks\n* Error messages or error pages without sensitive data\n* Tests & sample data as publicly available in our repositories on Github\n* Common issues like browser header warnings or DNS configuration, identified by vulnerability scans\n* Vulnerability scan reports for the software we publicly use\n* Security issues related to outdated OS's, browsers, or plugins\n* Reports for security problems that we have been notified of before\n\nPlease note: Reports that lack any proof (such as screenshots or other data), detailed information, or details on how to reproduce any unexpected result will be investigated but will not be eligible for any reward.\n\nThis policy is based on the National Cyber Security Centre’s Responsible Disclosure Guidelines and an [example by Floor Terra](https://responsibledisclosure.nl/).","src/content/docs/docs/compliance/responsible-disclosure.mdx","6a75801f15bd3c52","docs/compliance/security-audit",{"id":130,"data":132,"body":137,"filePath":138,"digest":139,"deferredRender":14},{"title":133,"editUrl":14,"head":134,"template":16,"sidebar":135,"pagefind":14,"draft":18},"Security Audits",[],{"hidden":18,"attrs":136},{},"import { Aside } from '@astrojs/starlight/components';\n\nThe Hooks amendment, integral to XRPL's smart contract infrastructure, has passed a detailed security audit by FYEO. The audit examined the Hooks framework implementation, including the Hook API, helper functions, and execution environment.&#x20;\n\nWith no severe security issues detected and all minor issues resolved, this audit serves as a testament to our commitment to security and the robustness of Hooks.&#x20;\n\nBy enabling smart transaction logic directly on XRPL's Layer 1, Hooks bring increased flexibility to tailor applications to their unique needs, inspiring further innovation within the XRPL ecosystem.\n\nDevelopers now have robust tools for creating and deploying custom logic, accessible on our testnet.\n\n### **Assurance of Ongoing Security**\n\nThe audit's successful completion is not just a milestone but a cornerstone for the ongoing security and sustainability of the Hooks network.\n\nWith all identified vulnerabilities addressed, the Hooks amendment is set to drive innovation securely on Xahau.\n\n\u003CAside type=\"note\">\nThe full security audit can be found [**here**](https://xrpl-labs.com/static/misc/Security%20Assessment%20of%20the%20XRP%20Labs%20Hooks%20Amendment%20v1.0.pdf).&#x20;\n\u003C/Aside>\n\nTo a brighter, more innovative future with Xahau!","src/content/docs/docs/compliance/security-audit.mdx","178f0a70c4b7554e","docs/hooks",{"id":140,"data":142,"body":148,"filePath":149,"digest":150,"deferredRender":14},{"title":143,"description":144,"editUrl":14,"head":145,"template":16,"sidebar":146,"pagefind":14,"draft":18},"Hooks","Introducing Hooks: The Smart Contract Functionality for Xahau.",[],{"hidden":18,"attrs":147},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"note\">\nHooks are small, efficient WebAssembly modules designed specifically for Xahau.&#x20;\n\nHooks can be written in any language (compilable with WebAssembly), and most business logic and smart contract concepts can be implemented in a hook.\n\n[**Development by XRPL Labs**](https://xrpl-labs.com/#team)\n\u003C/Aside>\n\n### What are Hooks? \u003Ca href=\"#what-are-hooks\" id=\"what-are-hooks\">\u003C/a>\n\nHooks allow the creation of customized logic and automation within the Xahau, making transactions smarter and more convenient. These small, efficient modules add custom on-ledger functionality, such as creating custom triggers for specific events on the ledger.&#x20;\n\nThese triggers can be used to send on-ledger actions or execute other actions in response to the specified event. Hooks are currently available on the [Xahau network](https://xahau.network/).\n\n> _To learn more about the theoretical concepts of Hooks you can visit the_ [_Concepts_](concepts/introduction) _section._\n\n> _To learn how to code Hooks in C and its functions, visit_ [_Hooks C-Functions_](functions/overview/hook-api-conventions/)_._\n\n> _There is a_ [_Hooks Builder site_](https://builder.xahau.network/) _where you can develop, test, debug, and deploy your own Hooks on testnet in your browser, using our examples or building your own from scratch._\n\n> There is an upcoming development to allow writing Hooks in JavaScript, also known as JSHooks. At the moment it can be tested using [JSHooks](https://github.com/Xahau/jshooks-alpha) repo.\n\n### Why are Hooks a Big Deal? \u003Ca href=\"#why-are-hooks-a-big-deal\" id=\"why-are-hooks-a-big-deal\">\u003C/a>\n\nSimply put, Hooks add a robust smart contract functionality to Xahau, empowering you to construct and deploy applications with bespoke functionalities aligning with your specific needs and requirements.\n\nHooks provide a versatile platform as they can be used for implementing a broad spectrum of business logic and smart contract paradigms. Once a hook is set up on an account, it enables you to do the following:\n\n* Block or allow transactions to and from the account.\n* Change and keep track of the hook’s internal state and logic to inform programmatic choices.\n* Autonomously initiate new transactions on the account’s behalf.\n\nHooks can be written in C or any other preferred language and then compiled into WebAssembly.\n\n\u003Cfigure>\n![Using Hooks Builder, you can develop, test, debug and deploy your own Hooks on our testnet, using our examples or building your own from scratch.](../assets/cdn.feather-2.webp)\n\u003Cfigcaption>*Using Hooks Builder, you can develop, test, debug and deploy your own Hooks on our testnet, using our examples or building your own from scratch.*\u003C/figcaption>\n\u003C/figure>\n\nThe Hooks Builder serves as an integrated development environment, facilitating the crafting, testing, debugging, and deployment of your Hooks on our testnet.\n\nWhether you're utilizing our examples or building from scratch, Hooks Builder provides a helpful environment for honing and deploying your smart contract solutions.\n\n### Some Examples of specific Hooks and Use Cases \u003Ca href=\"#some-examples-of-specific-hooks\" id=\"some-examples-of-specific-hooks\">\u003C/a>\n\nShowcasing the potential of Hooks with these concrete examples, each illustrating a unique application of smart contract functionality on Xahau:\n\n* **Auto-Savings Hook**: Automate savings by configuring a Hook to transfer a set amount of XAH to a separate savings account on the ledger. This could be done to help save a portion of XAH and build up savings at specified intervals—daily, weekly, or monthly. This recurring transfer mechanism can be a base for developing personal finance applications or subscription-based models.\n* **Carbon-Offset Hook**: Each transaction triggers an additional transfer of 1% of the amount to a carbon offset account managed by a trusted non-governmental organization (NGO) using the money for a good cause. This feature can be used as a base for building applications that contribute to environmental sustainability with every transaction made.\n* **Firewall Hook**: By filtering incoming and outgoing transactions. The Firewall Hook can block malicious transactions originating from known scam accounts or containing suspicious memos. By retrieving an updated blocklist from a Hook on a different account, the firewall maintains a robust defense against fraud without the need for manual intervention. Additionally, implementing spending limits to deny high-value unauthorized withdrawals could be a crucial feature for financial applications.\n\n### **Distinguishing Hooks from Ethereum Virtual Machine (EVM)**\n\nXahau Hooks and the EVM allow developers to build and deploy custom logic and automation within their platforms. However, some key differences between these two technologies set them apart.&#x20;\n\n* **Platform Compatibility**: Hooks are tailored for Xahau, while EVM smart contracts are designed for Ethereum-based blockchains.\n* **Execution Efficiency**: Hooks utilize WebAssembly (WASM), outperforming the bytecode used by the EVM in terms of speed and efficiency.\n* **Predictable Execution Time**: Xahau Hooks use guards to ensure maximum execution time is well-bounded and known ahead of time, improving efficiency.\n\n### Alternatives to Hooks on the XRPL ecosystem\n\nRipple and Peersyst announced that an EVM-compatible sidechain is now live [on the company's devnet](https://opensource.ripple.com/docs/evm-sidechain/intro-to-evm-sidechain/). This sidechain functions as an autonomous blockchain, complete with its unique consensus protocol and transaction rules. The EVM sidechain is an alternative to Hooks, adding smart contract functionality to the ecosystem.&#x20;\n\nHowever, it's essential to note that EVM sidechain contracts function on Layer 2, which requires a two-step process where XRP is transitioned onto the sidechain for contract execution and then back to the main ledger. Once on the sidechain, then again on the XRPL, meaning Layer 2 smart contracts cannot influence the flow. Hooks can decide if a transaction is allowed in the first place. Layer 2 can make a retroactive decision, but the initial transaction has already happened.\n\nHooks are more closely integrated with XRPL, operating directly on Xahau, an Layer 1 XRPL-core fork, so they are more tightly integrated with the underlying blockchain technology than the EVM-compatible sidechain to take advantage of the specific features and capabilities of the XRPL platform. With the inherent scalability and performance of WebAssembly, Hooks are optimal to enhance Xahau's functionality.\n\n### Hooks Will Expand the On-ledger Functionality and Help Xahau Grow\n\nHooks add native smart contract capabilities to Xahau, enabling the crafting of custom applications that meet the unique needs of users, bringing new functionalities, and opening up whole new domains of functionality. With Hooks, the possibilities are virtually unlimited.\n\nAs Xahau continues to grow, there is no doubt that Hooks will play a significant role in driving further innovation and adoption of the platform by retail and enterprise users.","src/content/docs/docs/hooks/index.mdx","fc0bf0160bd3cb72","docs/protocol-reference/binary-format",{"id":151,"data":153,"body":158,"filePath":159,"digest":160,"deferredRender":14},{"title":154,"editUrl":14,"head":155,"template":16,"sidebar":156,"pagefind":14,"draft":18},"Binary Format",[],{"hidden":18,"attrs":157},{},"[\\[Source\\]](https://github.com/Xahau/xahaud/blob/dev/src/ripple/protocol/impl/STObject.cpp#L696-L718)\n\nThis page describes the Xahau's canonical binary format for transactions and other data. This binary format is necessary to create and verify digital signatures of those transactions' contents, and is also used in other places including in the peer-to-peer communications between servers. The `xahaud` APIs typically use JSON to communicate with client applications. However, JSON is unsuitable as a format for serializing transactions for being digitally signed, because JSON can represent the same data in many different but equivalent ways.\n\nThe process of serializing a transaction from JSON or any other representation into their canonical binary format can be summarized with these steps:\n\n1.  Make sure all required fields are provided, including any required but \"auto-fillable\" fields.\n\n    The Transaction Formats Reference defines the required and optional fields for Xahau transactions.\n\n    **Note:** The `SigningPubKey` must also be provided at this step. When signing, you can derive this key from the secret key that is provided for signing.\n2. Convert each field's data into its \"internal\" binary format.\n3. Sort the fields in canonical order.\n4. Prefix each field with a Field ID.\n5. Concatenate the fields (including prefixes) in their sorted order.\n\nThe result is a single binary blob that can be signed using well-known signature algorithms such as ECDSA (with the secp256k1 elliptic curve) and Ed25519. For purposes of Xahau, you must also \\[hash]\\[Hash] the data with the appropriate prefix (`0x53545800` if single-signing, or `0x534D5400` if multi-signing). After signing, you must re-serialize the transaction with the `TxnSignature` field included.\n\n**Note:** Xahau uses the same serialization format to represent other types of data, such as ledger objects and processed transactions. However, only certain fields are appropriate for including in a transaction that gets signed. (For example, the `TxnSignature` field, containing the signature itself, should not be present in the binary blob that you sign.) Thus, some fields are designated as \"Signing\" fields, which are included in objects when those objects are signed, and \"non-signing\" fields, which are not.\n\n#### Examples\n\nBoth signed and unsigned transactions can be represented in both JSON and binary formats. The following samples show the same signed transaction in its JSON and binary formats:\n\n**JSON:**\n\n```json\n\n\u003Cdiv data-gb-custom-block data-tag=\"include\" data-0='_code-samples/tx-serialization/py/test-cases/tx1.json'>\u003C/div>\n\n```\n\n**Binary (represented as hexadecimal):**\n\n```\n\n\u003Cdiv data-gb-custom-block data-tag=\"include\" data-0='_code-samples/tx-serialization/py/test-cases/tx1-binary.txt'>\u003C/div>\n\n```\n\n### Sample Code\n\nThe serialization processes described here are implemented in multiple places and programming languages:\n\n* In C++ [in the `rippled` code base](https://github.com/Xahau/xahaud/blob/dev/src/ripple/protocol/impl/STObject.cpp).\n* In JavaScript in this repository's code samples section.\n* In Python 3 in this repository's code samples section.\n\nAdditionally, many client libraries provide serialization support under permissive open-source licenses, so you can import, use, or adapt the code for your needs.\n\n### Internal Format\n\nEach field has an \"internal\" binary format used in the `xahaud` source code to represent that field when signing (and in most other cases). The internal formats for all fields are defined in the source code of [`SField.cpp`](https://github.com/Xahau/xahaud/blob/master/src/ripple/protocol/impl/SField.cpp). (This file also includes fields other than transaction fields.) The Transaction Format Reference also lists the internal formats for all transaction fields.\n\nFor example, the `Flags` common transaction field becomes a UInt32 (32-bit unsigned integer).\n\n#### Definitions File\n\nThe following JSON file defines the important constants you need for serializing Xahau data to its binary format and deserializing it from binary:\n\n[**https://github.com/XRPLF/xrpl.js/blob/main/packages/ripple-binary-codec/src/enums/definitions.json**](https://github.com/XRPLF/xrpl.js/blob/main/packages/ripple-binary-codec/src/enums/definitions.json)\n\nThe following table defines the top-level fields from the definitions file:\n\n| Field                 | Contents                                                                                                                                                                                                                                                                                                                                                  |\n| --------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `TYPES`               | Map of data types to their \"type code\" for constructing field IDs and sorting fields in canonical order. Codes below 1 should not appear in actual data; codes above 10000 represent special \"high-level\" object types such as \"Transaction\" that cannot be serialized inside other objects. See the Type List for details of how to serialize each type. |\n| `LEDGER_ENTRY_TYPES`  | Map of ledger objects to their data type. These appear in ledger state data, and in the \"affected nodes\" section of processed transactions' metadata.                                                                                                                                                                                                     |\n| `FIELDS`              | A sorted array of tuples representing all fields that may appear in transactions, ledger objects, or other data. The first member of each tuple is the string name of the field and the second member is an object with that field's properties. (See the \"Field properties\" table below for definitions of those fields.)                                |\n| `TRANSACTION_RESULTS` | Map of transaction result codes to their numeric values. Result types not included in ledgers have negative values; `tesSUCCESS` has numeric value 0; `tec`-class codes represent failures that are included in ledgers.                                                                                                                                  |\n| `TRANSACTION_TYPES`   | Map of all transaction types to their numeric values.                                                                                                                                                                                                                                                                                                     |\n\nFor purposes of serializing transactions for signing and submitting, the `FIELDS`, `TYPES`, and `TRANSACTION_TYPES` fields are necessary.\n\nThe field definition objects in the `FIELDS` array have the following fields:\n\n| Field            | Type    | Contents                                                                                                                                                                                              |\n| ---------------- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `nth`            | Number  | The field code of this field, for use in constructing its Field ID and ordering it with other fields of the same data type.                                                                           |\n| `isVLEncoded`    | Boolean | If `true`, this field is length-prefixed.                                                                                                                                                             |\n| `isSerialized`   | Boolean | If `true`, this field should be encoded into serialized binary data. When this field is `false`, the field is typically reconstructed on demand rather than stored.                                   |\n| `isSigningField` | Boolean | If `true` this field should be serialized when preparing a transaction for signing. If `false`, this field should be omitted from the data to be signed. (It may not be part of transactions at all.) |\n| `type`           | String  | The internal data type of this field. This maps to a key in the `TYPES` map, which gives the type code for this field.                                                                                |\n\n#### Field IDs\n\n[\\[Source - Encoding\\]](https://github.com/seelabs/rippled/blob/cecc0ad75849a1d50cc573188ad301ca65519a5b/src/ripple/protocol/impl/Serializer.cpp#L117-L148) [\\[Source - Decoding\\]](https://github.com/seelabs/rippled/blob/cecc0ad75849a1d50cc573188ad301ca65519a5b/src/ripple/protocol/impl/Serializer.cpp#L484-L509)\n\nWhen you combine a field's type code and field code, you get the field's unique identifier, which is prefixed before the field in the final serialized blob. The size of the Field ID is one to three bytes depending on the type code and field codes it combines. See the following table:\n\n|                      | Type Code \u003C 16 | Type Code >= 16 |\n| -------------------- | -------------- | --------------- |\n| **Field Code \u003C 16**  |                |                 |\n| **Field Code >= 16** |                |                 |\n\nWhen decoding, you can tell how many bytes the field ID is by which bits **of the first byte** are zeroes. This corresponds to the cases in the above table:\n\n|                            | High 4 bits are nonzero                                                                                     | High 4 bits are zero                                                              |\n| -------------------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |\n| **Low 4 bits are nonzero** | 1 byte: high 4 bits define type; low 4 bits define field.                                                   | 2 bytes: low 4 bits of the first byte define field; next byte defines type        |\n| **Low 4 bits are zero**    | 2 bytes: high 4 bits of the first byte define type; low 4 bits of first byte are 0; next byte defines field | 3 bytes: first byte is `0x00`, second byte defines type; third byte defines field |\n\n**Caution:** Even though the Field ID consists of the two elements that are used to sort fields, you should not sort by the serialized Field ID itself, because the byte structure of the Field ID changes the sort order.\n\n#### Length Prefixing\n\nSome types of variable-length fields are prefixed with a length indicator. `Blob` fields (containing arbitrary binary data) are one such type. For a list of which types are length-prefixed, see the Type List table.\n\n**Note:** Some types of fields that vary in length are not length-prefixed. Those types have other ways of indicating the end of their contents.\n\nThe length prefix consists of one to three bytes indicating the length of the field immediately after the type prefix and before the contents.\n\n* If the field contains 0 to 192 bytes of data, the first byte defines the length of the contents, then that many bytes of data follow immediately after the length byte.\n*   If the field contains 193 to 12480 bytes of data, the first two bytes indicate the length of the field with the following formula:\n\n    ```\n      193 + ((byte1 - 193) * 256) + byte2\n    ```\n*   If the field contains 12481 to 918744 bytes of data, the first three bytes indicate the length of the field with the following formula:\n\n    ```\n      12481 + ((byte1 - 241) * 65536) + (byte2 * 256) + byte3\n    ```\n* A length-prefixed field cannot contain more than 918744 bytes of data.\n\nWhen decoding, you can tell from the value of the first length byte whether there are 0, 1, or 2 additional length bytes:\n\n* If the first length byte has a value of 192 or less, then that's the only length byte and it contains the exact length of the field contents in bytes.\n* If the first length byte has a value of 193 to 240, then there are two length bytes.\n* If the first length byte has a value of 241 to 254, then there are three length bytes.\n\n### Canonical Field Order\n\nAll fields in a transaction are sorted in a specific order based first on the field's type (specifically, a numeric \"type code\" assigned to each type), then on the field itself (a \"field code\"). (Think of it as sorting by family name, then given name, where the family name is the field's type and the given name is the field itself.)\n\n#### Type Codes\n\nEach field type has an arbitrary type code, with lower codes sorting first. These codes are defined in [`SField.h`](https://github.com/Xahau/xahaud/blob/master/src/ripple/protocol/SField.h#L57-L74).\n\nFor example, [UInt32 has type code 2](https://github.com/Xahau/xahaud/blob/72e6005f562a8f0818bc94803d222ac9345e1e40/src/ripple/protocol/SField.h#L59), so all UInt32 fields come before all [Amount fields, which have type code 6](https://github.com/Xahau/xahaud/blob/72e6005f562a8f0818bc94803d222ac9345e1e40/src/ripple/protocol/SField.h#L63).\n\nThe definitions file lists the type codes for each type in the `TYPES` map.\n\n#### Field Codes\n\nEach field has a field code, which is used to sort fields that have the same type as one another, with lower codes sorting first. These fields are defined in [`SField.cpp`](https://github.com/Xahau/xahaud/blob/72e6005f562a8f0818bc94803d222ac9345e1e40/src/ripple/protocol/impl/SField.cpp#L72-L266).\n\nFor example, the `Account` field of a \\[Payment transaction]\\[] [has sort code 1](https://github.com/Xahau/xahaud/blob/72e6005f562a8f0818bc94803d222ac9345e1e40/src/ripple/protocol/impl/SField.cpp#L219), so it comes before the `Destination` field which [has sort code 3](https://github.com/Xahau/xahaud/blob/72e6005f562a8f0818bc94803d222ac9345e1e40/src/ripple/protocol/impl/SField.cpp#L221).\n\nField codes are reused for fields of different field types, but fields of the same type never have the same field code. When you combine the type code with the field code, you get the field's unique Field ID.\n\n### Type List\n\nTransaction instructions may contain fields of any of the following types:\n\n| Type Name | Type Code | Bit Length | Length-prefixed? | Description                                                                                                                                                                                                  |\n| --------- | --------- | ---------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| AccountID | 8         | 160        | Yes              | The unique identifier for an account.                                                                                                                                                                        |\n| Amount    | 6         | 64 or 384  | No               | An amount of XRP or tokens. The length of the field is 64 bits for XRP or 384 bits (64+160+160) for tokens.                                                                                                  |\n| Blob      | 7         | Variable   | Yes              | Arbitrary binary data. One important such field is `TxnSignature`, the signature that authorizes a transaction.                                                                                              |\n| Hash128   | 4         | 128        | No               | A 128-bit arbitrary binary value. The only such field is `EmailHash`, which is intended to store the MD-5 hash of an account owner's email for purposes of fetching a [Gravatar](https://www.gravatar.com/). |\n| Hash160   | 17        | 160        | No               | A 160-bit arbitrary binary value. This may define a currency code or issuer.                                                                                                                                 |\n| Hash256   | 5         | 256        | No               | A 256-bit arbitrary binary value. This usually represents the \"SHA-512Half\" hash of a transaction, ledger version, or ledger data object.                                                                    |\n| PathSet   | 18        | Variable   | No               | A set of possible payment paths for a cross-currency payment.                                                                                                                                                |\n| STArray   | 15        | Variable   | No               | An array containing a variable number of members, which can be different types depending on the field. Two cases of this include memos and lists of signers used in multi-signing.                           |\n| STIssue   | 24        | 160 or 320 | No               | An asset definition, XRP or a token, with no quantity.                                                                                                                                                       |\n| STObject  | 14        | Variable   | No               | An object containing one or more nested fields.                                                                                                                                                              |\n| UInt8     | 16        | 8          | No               | An 8-bit unsigned integer.                                                                                                                                                                                   |\n| UInt16    | 1         | 16         | No               | A 16-bit unsigned integer. The `TransactionType` is a special case of this type, with specific strings mapping to integer values.                                                                            |\n| UInt32    | 2         | 32         | No               | A 32-bit unsigned integer. The `Flags` and `Sequence` fields on all transactions are examples of this type.                                                                                                  |\n\nIn addition to all of the above field types, the following types may appear in other contexts, such as ledger objects and transaction metadata:\n\n| Type Name   | Type Code | Length-prefixed? | Description                                                                                                                                                                 |\n| ----------- | --------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Transaction | 10001     | No               | A \"high-level\" type containing an entire transaction.                                                                                                                       |\n| LedgerEntry | 10002     | No               | A \"high-level\" type containing an entire ledger object.                                                                                                                     |\n| Validation  | 10003     | No               | A \"high-level\" type used in peer-to-peer communications to represent a validation vote in the consensus process.                                                            |\n| Metadata    | 10004     | No               | A \"high-level\" type containing metadata for one transaction.                                                                                                                |\n| UInt64      | 3         | No               | A 64-bit unsigned integer. This type does not appear in transaction instructions, but several ledger objects use fields of this type.                                       |\n| Vector256   | 19        | Yes              | This type does not appear in transaction instructions, but the Amendments ledger object's `Amendments` field uses this to represent which amendments are currently enabled. |\n\n#### AccountID Fields\n\nFields of this type contain the 160-bit identifier for an XRP Ledger account. In JSON, these fields are represented as \\[base58]\\[] XRP Ledger \"addresses\", with additional checksum data so that typos are unlikely to result in valid addresses. (This encoding, sometimes called \"Base58Check\", prevents accidentally sending money to the wrong address.) The binary format for these fields does not contain any checksum data nor does it include the `0x00` \"type prefix\" used in address base58 encoding. (However, since the binary format is used mostly for signed transactions, a typo or other error in transcribing a signed transaction would invalidate the signature, preventing it from sending money.)\n\nAccountIDs that appear as stand-alone fields (such as `Account` and `Destination`) are length-prefixed despite being a fixed 160 bits in length. As a result, the length indicator for these fields is always the byte `0x14`. AccountIDs that appear as children of special fields (Amount `issuer` and PathSet `account`) are _not_ length-prefixed.\n\n#### Amount Fields\n\nThe \"Amount\" type is a special field type that represents an amount of currency, either XAH or a token. This type consists of two sub-types:\n\n*   XAH\n\n    XAH is serialized as a 64-bit unsigned integer (big-endian order), except that the most significant bit is always 0 to indicate that it's XAH, and the second-most-significant bit is `1` to indicate that it is positive. Since the maximum amount of XAH (1017 drops) only requires 57 bits, you can calculate XAH serialized format by taking standard 64-bit unsigned integer and performing a bitwise-OR with `0x4000000000000000`.\n*   **Tokens**\n\n    Tokens consist of three segments in order:\n\n    1. 64 bits indicating the amount in the token amount format. The first bit is `1` to indicate that this is not XAH.\n    2. 160 bits indicating the currency code. The standard API converts 3-character codes such as \"USD\" into 160-bit codes using the standard currency code format, but custom 160-bit codes are also possible.\n    3. 160 bits indicating the issuer's Account ID. (See also: Account Address Encoding)\n\nYou can tell which of the two sub-types it is based on the first bit: `0` for XAH; `1` for tokens.\n\nThe following diagram shows the serialization formats for both XAH amounts and token amounts:\n\ninclude_svg(\"img/serialization-amount.svg\", 'XAH amounts have a \"not XAH\" bit, a sign bit, and 62 bits of precision. Token amounts consist of a \"not XRP\" bit, a sign bit, an exponent (8 bits), significant digits (54 bits), currency code (160 bits), and issuer (160 bits).')\n\n**Token Amount Format**\n\n[\\[Source\\]](https://github.com/Xahau/xahaud/blob/35fa20a110e3d43ffc1e9e664fc9017b6f2747ae/src/ripple/protocol/impl/STAmount.cpp)\n\ninclude_svg(\"img/currency-number-format.svg\", \"Token Amount Format diagram\")\n\nXahau uses 64 bits to serialize the numeric amount of a (fungible) token. (In JSON format, the numeric amount is the `value` field of a currency amount object.) In binary format, the numeric amount consists of a \"not XAH\" bit, a sign bit, significant digits, and an exponent, in order:\n\n1. The first (most significant) bit for a token amount is `1` to indicate that it is not an XAH amount. (XAH amounts always have the most significant bit set to `0` to distinguish them from this format.)\n2. The sign bit indicates whether the amount is positive or negative. Unlike standard [two's complement](https://en.wikipedia.org/wiki/Two's_complement) integers, `1` indicates **positive** in Xahau format, and `0` indicates negative.\n3. The next 8 bits represent the exponent as an unsigned integer. The exponent indicates the scale (what power of 10 the significant digits should be multiplied by) in the range -96 to +80 (inclusive). However, when serializing, we add 97 to the exponent to make it possible to serialize as an unsigned integer. Thus, a serialized value of `1` indicates an exponent of `-96`, a serialized value of `177` indicates an exponent of 80, and so on.\n4. The remaining 54 bits represent the significant digits (sometimes called a _mantissa_) as an unsigned integer. When serializing, this value is normalized to the range 1015 (`1000000000000000`) to 1016-1 (`9999999999999999`) inclusive, except for the special case of the value 0. In the special case for 0, the sign bit, exponent, and significant digits are all zeroes, so the 64-bit value is serialized as `0x8000000000000000000000000000000000000000`.\n\nThe numeric amount is serialized alongside the currency code and issuer to form a full token amount.\n\n**Currency Codes**\n\nAt a protocol level, currency codes in Xahau are arbitrary 160-bit values, except the following values have special meaning:\n\n* The currency code `0x0000000000000000000000005852500000000000` is **always disallowed**. (This is the code \"XAH\" in the \"standard format\".)\n* The currency code `0x0000000000000000000000000000000000000000` (all zeroes) is **generally disallowed**. Usually, XAH amounts are not specified with currency codes. However, this code is used to indicate XAH in rare cases where a field must specify a currency code for XAH.\n\nThe `xahaud` APIs support a **standard format** for translating three-character ASCII codes to 160-bit hex values as follows:\n\ninclude_svg(\"img/currency-code-format.svg\", \"Standard Currency Code Format\")\n\n1. The first 8 bits must be `0x00`.\n2. The next 88 bits are reserved, and should be all `0`'s.\n3. The next 24 bits represent 3 characters of ASCII. Ripple recommends using [ISO 4217](https://www.xe.com/iso4217.php) codes, or popular pseudo-ISO 4217 codes such as \"BTC\". However, any combination of the following characters is permitted: all uppercase and lowercase letters, digits, as well as the symbols `?`, `!`, `@`, `#`, `$`, `%`, `^`, `&`, `*`, `\u003C`, `>`, `(`, `)`, `{`, `}`, `[`, `]`, and `|`. The currency code XAH (all-uppercase) is reserved for XAH and cannot be used by tokens.\n4. The next 40 bits are reserved and should be all `0`'s.\n\nThe **nonstandard format** is any 160 bits of data as long as the first 8 bits are not `0x00`.\n\n#### Array Fields\n\nSome transaction fields, such as `SignerEntries` (in \\[SignerListSet transactions]\\[]) and `Memos`, are arrays of objects (called the \"STArray\" type).\n\nArrays contain several object fields in their native binary format in a specific order. In JSON, each array member is a JSON \"wrapper\" object with a single field, which is the name of the member object field. The value of that field is the (\"inner\") object itself.\n\nIn the binary format, each member of the array has a Field ID prefix (based on the single key of the wrapper object) and contents (comprising the inner object, serialized as an object). To mark the end of an array, append an item with a \"Field ID\" of `0xf1` (the type code for array with field code of 1) and no contents.\n\nThe following example shows the serialization format for an array (the `SignerEntries` field):\n\ninclude_svg(\"img/serialization-array.svg\", 'Array field ID, followed by the Field ID and contents of each array element, followed by the \"Array end\" field ID')\n\n#### Blob Fields\n\nThe Blob type is a length-prefixed field with arbitrary data. Two common fields that use this type are `SigningPubKey` and `TxnSignature`, which contain (respectively) the public key and signature that authorize a transaction to be executed.\n\nBlob fields have no further structure to their contents, so they consist of exactly the amount of bytes indicated in the variable-length encoding, after the Field ID and length prefixes.\n\n#### Hash Fields\n\nXahau has several \"hash\" types: Hash128, Hash160, and Hash256. These fields contain arbitrary binary data of the given number of bits, which may or may not represent the result of a hash operation.\n\nAll such fields are serialized as the specific number of bits, with no length indicator, in big-endian byte order.\n\n#### Issue Fields\n\nSome fields specify a _type_ of asset, which could be XAH or a fungible token, without an amount. These fields have consist of one or two 160-bit segments in order:\n\n1. The first 160 bits are the currency code of the asset. For XAH, this is all 0's.\n2. If the first 160 bits are all 0's (the asset is XAH), the field ends there. Otherwise, the asset is a token and the next 160 bits are the AccountID of the token issuer.\n\n#### Object Fields\n\nSome fields, such as `SignerEntry` (in \\[SignerListSet transactions]\\[]), and `Memo` (in `Memos` arrays) are objects (called the \"STObject\" type). The serialization of objects is very similar to that of arrays, with one difference: **object members must be placed in canonical order** within the object field, where array fields have an explicit order already.\n\nThe canonical field order of object fields is the same as the canonical field order for all top-level fields, but the members of the object must be sorted within the object. After the last member, there is an \"Object end\" Field ID of `0xe1` with no contents.\n\nThe following example shows the serialization format for an object (a single `Memo` object in the `Memos` array).\n\ninclude_svg(\"img/serialization-object.svg\", 'Object field ID, followed by the Object ID and contents of each object member in canonical order, followed by the \"Object end\" field ID')\n\n#### PathSet Fields\n\nThe `Paths` field of a cross-currency \\[Payment transaction]\\[] is a \"PathSet\", represented in JSON as an array of arrays. For more information on what paths are used for, see Paths.\n\nA PathSet is serialized as **1 to 6** individual paths in sequence[\\[Source\\]](https://github.com/Xahau/xahaud/blob/4cff94f7a4a05302bdf1a248515379da99c5bcd4/src/ripple/app/tx/impl/Payment.h#L35-L36). Each complete path is followed by a byte that indicates what comes next:\n\n* `0xff` indicates another path follows\n* `0x00` indicates the end of the PathSet\n\nEach path consists of **1 to 8** path steps in order[\\[Source\\]](https://github.com/Xahau/xahaud/blob/4cff94f7a4a05302bdf1a248515379da99c5bcd4/src/ripple/app/tx/impl/Payment.h#L38-L39). Each step starts with a **type** byte, followed by one or more fields describing the path step. The type indicates which fields are present in that path step through bitwise flags. (For example, the value `0x30` indicates changing both currency and issuer.) If more than one field is present, the fields are always placed in a specific order.\n\nThe following table describes the possible fields and the bitwise flags to set in the type byte to indicate them:\n\n| Type Flag | Field Present | Field Type    | Bit Size | Order |\n| --------- | ------------- | ------------- | -------- | ----- |\n| `0x01`    | `account`     | AccountID     | 160 bits | 1st   |\n| `0x10`    | `currency`    | Currency Code | 160 bits | 2nd   |\n| `0x20`    | `issuer`      | AccountID     | 160 bits | 3rd   |\n\nSome combinations are invalid; see Path Specifications for details.\n\nThe AccountIDs in the `account` and `issuer` fields are presented _without_ a length prefix. When the `currency` is XRP, the currency code is represented as 160 bits of zeroes.\n\nEach step is followed directly by the next step of the path. As described above, the last step of a path is followed by either `0xff` (if another path follows) or `0x00` (if this ends the last path).\n\nThe following example shows the serialization format for a PathSet:\n\ninclude_svg(\"img/serialization-pathset.svg\", \"PathSet is several paths each followed by a continue or end byte; each path is several path steps consisting of a type byte and one or more 160-bit fields based on the type byte\")\n\n#### UInt Fields\n\nXahau has several unsigned integer types: UInt8, UInt16, UInt32, and UInt64. All of these are standard big-endian binary unsigned integers with the specified number of bits.\n\nWhen representing these fields in JSON objects, most are represented as JSON numbers by default. One exception is UInt64, which is represented as a string because some JSON decoders may try to represent these integers as 64-bit \"double precision\" floating point numbers, which cannot represent all distinct UInt64 values with full precision.\n\nAnother special case is the `TransactionType` field. In JSON, this field is conventionally represented as a string with the name of the transaction type, but in binary, this field is a UInt16. The `TRANSACTION_TYPES` object in the definitions file maps these strings to specific numeric values.","src/content/docs/docs/protocol-reference/binary-format.mdx","682a309f970e5ab3","docs/resources/media-kit",{"id":161,"data":163,"body":168,"filePath":169,"digest":170,"deferredRender":14},{"title":164,"editUrl":14,"head":165,"template":16,"sidebar":166,"pagefind":14,"draft":18},"Media Kit",[],{"hidden":18,"attrs":167},{},"Logos and branding guidelines are available on https://github.com/Xahau/Graphics","src/content/docs/docs/resources/media-kit.mdx","ae6238489c167786","docs/resources/whitepaper",{"id":171,"data":173,"body":178,"filePath":179,"digest":180,"deferredRender":14},{"title":174,"editUrl":14,"head":175,"template":16,"sidebar":176,"pagefind":14,"draft":18},"Whitepaper",[],{"hidden":18,"attrs":177},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"caution\" title=\"Disclaimer\">\nThis whitepaper is based on [the whitepaper](https://github.com/Xahau/Whitepaper) by the Xahau Launch Alliance, but is continuously updated to reflect changes made by the \ndecentralised governance since launch.\n\nLast update: **July 1, 2025**\n\u003C/Aside>\n\n\u003CAside type=\"caution\" title=\"Disclaimer\">\nThis crypto-asset white paper has not been approved by any competent authority in any Member State of the European Union. The offeror of the crypto-asset is solely responsible for the content of this crypto-asset white paper.\n\u003C/Aside>\n\n\n## 1. Summary\n\n1. The Xahau Ledger (Xahau) is the smart contract sidechain for the XRPL ecosystem. It is a fork of the XRP Ledger’s (XRPL’s) open-source rippled codebase that embodies all the useful and innovative features of the XRPL, including its environmental sustainability, but tweaks and upgrades the codebase to support smart contracts. \n2. Xahau’s core features are:\n    * **XRPL Core:** Xahau retains the key features that have made the XRPL one of the most enduring and popular networks, including the **XRP Ledger Consensus Protocol** (Previously: Ripple Protocol Consensus Algorithm), the **DEX**, and the logic of protecting the ledger against spam and bloat by charging and burning fees in the native token, but it substitutes the recent **XLS-20 NFTs** for the cleaner, simpler **URITokens**.\n    * **Hooks for Smart Contracts:** The big new feature of Xahau is Hooks, the smart contract implementation for rippled. Hooks are small pieces of code installed on an account that impose rules on the transactions the account sends or receives before those transactions can be finalized. \n    * **Native Token & Better Tokenomics:** Xahau will be secured by its native token, XAH (currency code: XAH), and powered by better tokenomics designed to reward validators and support smart contracts. \n    * **Genesis Hook Governance Game:** Xahau’s Genesis account is powered by a Hook that regulates, amongst other things, the emission of new XAH and this Hook is governed by a two-tiered governance game with up to 20 independently owned validators as participants.\n3. In concert, these features create a new network within the XRPL ecosystem that implements the Hooks amendment to deliver fast, cheap, secure smart contracts for the XRPL ecosystem supported by a properly incentivised community of validators and developers. \n4. The development of the Xahau Ledger has been driven by the Xahau Launch Alliance, five experienced and committed entities within the XRPL community that have carried the cost and risk of establishing the new network without an ICO. \n5. Xahau will launch fully functional and decentralised with over 10 independently owned validators run by a representative mixture of the XRPL ecosystem, including developers, exchanges, and long-term community members.\n\n## 2. Xahau – Built from the XRPL’s DNA  \n\n1. Xahaud - the software that runs Xahau - is a fork of rippled, the open-source codebase of the XRPL. It retains the key features that have made the XRPL one of the most popular and enduring networks since it was launched in 2012. \n\n### XRP Ledger Consensus Protocol\n\n2. Xahau uses the XRP Ledger Consensus Protocol (Previously: Ripple Protocol Consensus Algorithm) – sometimes called Proof of Association (PoA). It is designed to overcome the limitations of traditional consensus mechanisms like Proof of Work (PoW) or Proof of Stake (PoS), particularly the high energy consumption associated with PoW. \n3. The XRP Ledger Consensus Protocol (Previously: Ripple Protocol Consensus Algorithm) works as follows\n    * **Validator Proposal:** Each validator proposes a new set of transactions, called a \"candidate set,\" which they believe should be included in the \nnext ledger. This candidate set includes both new transactions and any transactions that were not previously included in a validated ledger.\n    * **Agreement Phase:** Validators communicate with each other to exchange and evaluate candidate sets. They independently verify the validity and order of transactions proposed by other validators. Through a series of iterative rounds, validators attempt to converge on a single candidate set that the majority agrees upon. \n    * **Finalization:** Once a supermajority of validators (at least 80%) agrees on a specific candidate set, that set is considered \"finalized.\" Finalized candidate sets become the basis for the next ledger.\n    * **Ledger Closing:** The ledger is closed, and a new ledger is created based on the transactions in the finalized candidate set. This process occurs roughly every 3-5 seconds in the XRPL, allowing for fast transaction settlement times. \n4. Under the XRP Ledger Consensus Protocol (Previously: Ripple Protocol Consensus Algorithm), each validator specifies a UNL (Unique Node List) being a list of other validators it trusts. The canonical ledger is found through the overlap between the UNLs of all the validators. \n5. To facilitate social consensus on the appropriate UNL, several entities, including the XRPL Foundation, publish recommended Validator Lists (or VLs) of the validators they deem suitably trustworthy. Following a generally accepted dUNL helps ensure you stay on the main ledger and do not unintentionally end up following an irrelevant fork. Xahau will follow a similar, social-consensus approach to defining a dUNL, with organisations like the XRPL Foundation publishing its recommended VL. \n6. The XRP Ledger Consensus Protocol (Previously: Ripple Protocol Consensus Algorithm) Protocol provides several advantages, including high scalability, low energy consumption, and resistance to censorship and network forks. By utilizing a set of trusted validators and this unique consensus algorithm, Xahau achieves fast and secure transaction processing while maintaining decentralization and reliability. \n\n### The DEX\n\n7. Xahau retains a version of the XRPL’s limit order book decentralized exchange (DEX) that allows users to trade and exchange assets directly on the ledger. The DEX leverages Xahau's decentralized and trustless architecture to enable peer-to-peer asset trading without the need for intermediaries. \n8. In summary, the decentralized exchange works as follows:\n    * **Order Creation:** Users can create buy or sell orders on the DEX by specifying the asset they want to trade, the desired quantity, and the price they are willing to accept or pay. \n    * **Order Matching:** The DEX’s order book maintains a record of all open buy and sell orders. When a new order is placed, the DEX automatically matches it against existing orders based on price and quantity. \n    * **Cross-Currency Trading:** The DEX supports cross-currency trading, enabling users to trade between different assets. To facilitate this, the DEX uses the ledger’s native currency as a bridge currency, allowing users to convert one asset to the native currency and then to another asset. \n    * **Pathfinding Function:** The pathfinding function is a key component of the DEX. It helps users find the most efficient trading path when converting one asset to another. For example, if a user wants to trade Asset A for Asset D, but there is no direct market available, the pathfinding function will search for the best sequence of trades (e.g., A to B, B to C, and C to D) to achieve the desired conversion with minimal slippage and fees. \n    * **Automatic Order Execution:** Once a trade is matched, the DEX automatically executes the transaction. The ledger's consensus mechanism ensures that the transaction is validated and added to the ledger, providing a high level of security and immutability. \n    * **Trustless and Decentralized:** The DEX operates in a trustless and decentralized manner. It does not rely on a centralized exchange or require users to deposit their funds into a third-party wallet. Instead, users maintain control over their assets throughout the trading process, reducing counterparty risk. \n    * **Low Fees and Fast Settlement:** Trading on the DEX incurs minimal fees compared to traditional centralized exchanges. Xahau's consensus protocol allows for fast settlement times, enabling near-instantaneous transaction processing. \n9. With these features, the DEX provides users with a convenient and secure platform for peer-to-peer token trading. By leveraging the trustless and decentralized nature of Xahau, the DEX offers efficient cross-token trading and seamless order matching while maintaining user control and privacy. \n\n### Burned Transaction Fees\n\n10. To protect itself against spam and bloat, the XRPL charges transaction fees and account reserves in its native currency and burns all transaction fees, rather than redistribute them to validators. Xahau follows this “fees charged and burned” model to likewise protect itself. \n11. While this is a proven mechanism for protecting the ledger, it has implications for Xahau’s Tokenomics, as discussed later. The fees burned by Xahau’s smart contracts, while still small, will be much higher and more variable than standard transaction fees on the XRPL. \n\n### URIToken NFTs instead of XLS-20 NFTs\n\n12. Unlike the XLS-20 NFT standard introduced to the XRPL, which relies on compressing NFTs into on-ledger “pages”, Xahau will use URIToken objects. \n13. URITokens (short for Uniform Resource Identifier Token) are an innovative way to represent and manage NFTs, their metadata and ownership information within Xahau. Each token is a first-class ledger object with a unique address that does not change when the current owner does. \n14. URIToken NFTs have many benefits over the XLS-20 NFT standard, including: \n    * **Lightweight and Efficient:** URITokens are first-class on-ledger objects that can be created, destroyed, transferred, bought and sold, and which interoperate easily with Hooks. Trading is limited to a single sell offer per token, that can be accepted either by the specified destination account or, if no destination is specified, then the general public. There is no brokered mode. \n    * **Interoperability and Immutability:** URITokens come with a built-in extensible metadata JSON standard and an optional Digest field (a hash making the content of the NFT immutable). This provides flexibility for developers and creators to choose their preferred storage solutions, such as IPFS or traditional web servers. It also promotes interoperability with existing NFT standards and platforms, facilitating the integration with the broader NFT ecosystem. \n    * **Improved User Experience:** URITokens can be easily located by their keylet (on ledger address) that does not depend on the current owner of the token. The NFT metadata and ownership information can be easily accessed and updated through standard web protocols. Users can simply click on the URI associated with an NFT to view its details, including images, descriptions, and provenance. This approach simplifies the user experience and reduces the complexity of interacting with NFTs on Xahau. \n15. Thus, URITokens provide a lightweight, flexible, and cost-efficient solution for NFTs on Xahau. \n\n## 3. Hooks – Smart Contracts for the XRPL Ecosystem\n\n1. Hooks is a smart contract solution developed specifically for the XRPL ecosystem. Hooks are small, efficient pieces of code defined on a Xahau account that execute logic on transactions sent to or received by the account before those transactions are finalised in the ledger. Hooks are thus a way for developers to create and deploy smart contracts on Xahau, opening a wide range of possibilities for decentralized applications (dApps) and automated transactions. \n2. Xahau implements the Hooks amendment as a sidechain so the XRPL ecosystem can benefit from Hooks now rather than later. It also allows the XRPL community to better evaluate whether and how to implement Hooks on the XRPL mainnet in the future. \n\n### Benefits of Hooks \n\n3. Some key benefits of Hooks over other smart contract solutions include: \n    * **Simplicity and Efficiency:** Hooks are lightweight and efficient compared to conventional smart contract solutions. The underlying architecture of Xahau, which focuses on transaction settlement and fast consensus, ensures quick execution of smart contracts without compromising performance. \n    * **Native Integration:** Hooks are a layer-one smart contract solution and thus live natively inside the ledger, allowing developers to create contracts that interact directly with on-ledger objects, balances and transactions. In contrast to layer-two smart contract solutions, this tight integration simplifies the development process and ensures seamless interoperability with Xahau's ecosystem. \n    * **Low Fees and Scalability:** Hooks leverage Xahau's low transaction fees and high scalability. Like most chains, Xahau can handle a high volume of transactions per second, making it suitable for applications that require fast and cost-effective smart contract execution. \n    * **Security and Reliability:** Hooks inherit the robust security and reliability of the XRPL. The XRP Ledger Consensus Protocol (Previously: Ripple Protocol Consensus Algorithm), which powers Xahau, ensures a decentralized network with consensus among trusted validators. This strong security foundation provides confidence for developers and users alike. \n    * **Ecosystem Compatibility:** Hooks are designed to be compatible with existing XRPL tools and services, making it easier for developers to integrate smart contracts into their applications. This compatibility enables seamless interaction with other features of the XRPL, such as decentralized exchanges and payment channels. \n    * **Account Decentralisation:** Using Hooks it is possible for a Xahau account to be fully autonomous and to emit and receive transactions according to the logic of its Hook, instead of relying on external private key holders to manually authorise transactions. \n\n### Sample Use-Cases\n\n4. By introducing smart contract capabilities to the XRPL ecosystem, Hooks offer a powerful and efficient solution for developers seeking to build decentralized applications and automate transactions. Examples of the kinds of functions Hooks can achieve include: \n    * **Whitelists:** A Hook enabled account can protect accounts against fraud or sanctioned transactions by being coded to only accept or send transactions to whitelisted accounts. \n    * **Blacklists:** A hook enabled account can be coded to refuse to receive or send transactions to any prohibited (blacklisted) account. \n    * **Sophisticated Escrow:** A Hook enabled account can hold any asset received from nominated account and only forward or return those assets if told to do so by a valid transaction that meets predetermined criteria. \n    * **Automated Registry:** A Hook enabled account can act as an automated registry and mint and redeem URI NFTs as evidence of registration or registration rights. \n    * **Self-Sovereign Treasury:** Issued currencies can mimic decentralised, counterparty-free assets by being deposited into a self-owned Account with a Hook that emits the currency according to a disclosed and predetermined emission schedule. \n5. The combination of simplicity, low fees, scalability, security, and ecosystem compatibility means Xahau offers early access to an attractive smart contract solution for the XRPL ecosystem. Xahau’s experience with Hooks will help the community determine whether and how to implement Hooks on the XRPL in the future. \n\n## 4. XAH – Native Token & Tokenomics\n\n1. Xahau is secured by its native token, XAH. Its salient details are as follows: \n    * **Native Token:** XAH \n    * **Ticker:** XAH \n    * **Smallest Unit:** 1 drop or 0.000001 XAH \n    * **Function:** XAH is the currency of the network. It is a utility token to purchase network services. Like the XRPL, transactions on Xahau incur a fee or reserve that is charged in XAH to protect the Ledger against spam and bloat. \n    * **Initial Liquidity:** 600 million distributed to launch participants. \n    * **Max Supply:** Uncapped. \n    * **Emission Mechanisms:** The supply of XAH is determined via the amendments enabled in Xahau’s consensus protocol: \n    * **Monthly Balance Adjustment:** To put back into circulation some of the XAH burned from transaction fees, each active user can claim an increase in their account balance of ~0.34% of their average monthly balance (equal to 4% pa. compounding). This emission is controlled by the Protocol Governance Game which uses a combination of the Hooks, BalanceRewards and the XahauGenesis amendments. \n    * **Monthly Seat Rewards:** To put back into circulation some of the XAH burned from the transaction fees, and to incentivise active and appropriate governance, an amount matching the total claimed Monthly Balance Adjustments is also rewarded to Governance Game validators. \n\n### Initial Distribution\n\n2. The Launch parties have invested significant time and resources to launch Xahau. An initial distribution is provided at the protocol level by the XahauGenesis amendment. \n3. The protocol will pay a modest 600 million Xahau XAH as follows: 12 million to each of the eight Governance Game validator Seats on launch. \n    * 16 million additional to GateHub for DEX stablecoin liquidity bootstrapping. \n    * 160 additional million to XRPL Labs (Xaman) for Intellectual Property - Xaman has carried the main technical and financial burden of developing Hooks and xahaud. This additional distribution is for that effort. \n    * 328 million to the XRPL Foundation (now INFTF), to help ensure the health of the XRPL Protocol (now Xahau) ecosystem moving forward. \n\n### Monthly Balance Adjustment \n\n4. One challenge Xahau must manage is the additional expense of smart contracts compared to normal XRPL transactions. \n5. On the XRPL, transaction fees cost as little as one drop or 0.000001 XRP. Against a total supply of 100 billion XRP, this is a trivial-but-sufficient cost. Hooks transactions, on the other hand, can cost orders of magnitude more to set and to trigger. Further, while every XRPL transaction is standardised, Hooks can vary enormously in their complexity and cost. To properly protect itself against spam and bloat from its Hooks, the Ledger must charge appropriately (and dynamically) for the size and logic complexity of every Hook transaction. \n6. The consequence is that, as a smart contract chain that burns fees, XAH could easily be burned to near-zero, and certainly much more rapidly than equivalent XRP would be burned on the XRPL, potentially leading to perverse incentives to horde Xahau rather than use it to deploy and run Hooks. \n7. To guard against these risks, Xahau needs a protocol-level mechanism that puts burned tokens back into circulation, but one that does not simply incentivise high fees. This is the purpose of the monthly balance adjustment. \n8. The Monthly Balance Adjustment works as follows: \n    * Each month, each Xahau account can choose to claim (against the protocol) an adjustment based on their average XAH balance (computed since the last adjustment). The adjusted amount is the equivalent of 4% p.a. compounded (roughly 0.34% per month). \n    * Users can claim their balance adjustment by sending a RewardClaim transaction to the Genesis account at any time provided 30 days has passed since the last claim. Doing so demonstrates they are an active user. \n    * Upon receipt of the claim transaction, the protocol, via the BalanceRewards and XahauGenesis amendments, increases the user’s account balance by the balance adjustment. \n    * Unclaimed balance adjustments are foregone as a penalty for inactivity. \n    * 4% is the initial rate at launch, but it can be changed via the Governance Game if it proves too small or too large in the future. \n9. This mechanism allows active users to claim a monthly adjustment that puts further XAH into circulating supply, mitigating the risk of the token being burned down to zero through smart contract execution fees. \n\n### Monthly Governance Validator Rewards \n\n10. The Xahau Genesis Account is enabled with a Hook that controls, among other things, the emission of XAH. This Hook needs a governance arrangement so that it can be monitored, amended, and/or replaced in the face of changing network and real-world conditions. \n11. It is well known that XRPL mainnet validators do not receive any kind of reward for the services they provide for underpinning the mainnet Ledger. However, infrastructure costs money to run, and real-world experience shows that this lack of incentive leads to a lack of actively managed validators. \n12. The Xahau Genesis Hook needs to know, or be told, which accounts it must trust when deciding whether to update itself. So, those accounts must be known in advance, rather than emerging from the overlapping UNLs. \n13. The technical solution to this problem is an incentivised Genesis Hook Governance Game that rewards certain Validators for overseeing the Hook. It works as follows: \n    * There are 20 “Seats” on the Genesis Hook Governance Game. \n    * Each Seat is controlled either by a single Xahau Account (Level 1) or a self-managing committee of 3-20 Accounts (Level 2). \n    * For each occupied Seat, the protocol mints and distributes 1/20th of the total Monthly Balance Adjustments claimed that month. \n    * If a Seat is held by a committee of Accounts, the rewards for that Seat are split in a manner of that committee’s choosing. \n    * If no users claim a Balance Adjustment that month no rewards are paid to any validators. \n    * Each Flag Ledger (256 ledgers) an on-ledger record called a UNLReport is generated. This report contains a list of validators’ public keys that 80% of other validators believe participated adequately in consensus since the previous Flag Ledger. The Genesis Hook will only distribute validator rewards to Seats that correspond to the public keys of validators on the UNLReport. \n14. Thus, the Genesis Hook Governance Game includes a reward mechanism designed to ensure that trusted accounts are rewarded for running trustworthy validators, that those rewards are linked to user activity, and that those rewards put new XAH into distribution, mitigating the risk of a token liquidity crunch from high smart contract execution fees. \n\n## 5. Xahau Governance Game  \n1. XRP Ledger Consensus Protocol (Previously: Ripple Protocol Consensus Algorithm) chains rely on a robust overlap in validator UNLs to define the canonical ledger. If a validator does not trust enough of the same machines that everyone else trusts, they risk unknowingly listening to an irrelevant fork of the ledger. Determining the best UNL is a matter of social (off-chain) consensus. \n2. To assist that social consensus, various entities publish dUNLs – lists of validators everyone should follow. Xahau will follow the same approach, with the XRPL Foundation and others expected to publish such lists. So, like the XRPL, Xahau will be a public permissionless chain for which anyone can run a validator. And like the XRPL, any update of the protocol will be dependent on more than 80% of UNL validators supporting the changes, in the same manner as the XRPL. \n3. While the dUNL helps define the validators responsible for the canonical Ledger, Xahau has a second governance challenge, not present in the XRPL mainnet: the governance of its Genesis Hook. The XRPL mainnet minted all of its XRP on creation. Xahau cannot follow this approach. Its native token needs to be minted in response to the happening of predefined events (i.e. Burn2Mint, Account Adjustments, Validator Rewards.) It uses a Hook on its Genesis Account to achieve this. \n4. This means Xahau needs a governance mechanism for its Genesis Hook in case the Hook needs to be adjusted or replaced. This is known as the Governance Game: \n    * **Purpose:** The Governance Game exists to ensure that the UNL validators remain active and allows those active members to maintain the Hook on the Genesis account that controls the distribution of XAH. \n    * **Seats:** There are 20 Seats at a table. A Seat is a Xahau Account whose vote counts in the Governance Game. \n    * **L1 Table:** The Governance Game requires at least the top-level table. This is called the Level 1 table (L1 Table). This table by definition exists only on the Genesis account according to the Governance Game Hook installed there. A seat at the L1 table may be filled by an Account or may be empty. These seats are called L1s. \n    * **L2 Table:** An L1 seat may itself be filled by an Account which has another, different, Governance Hook installed on it. The seats at this table are called L2s, and the table is an L2 Table. The structure is a self-managing committee of 3-20 Accounts that collectively control the L1 seat and its voting rights. Thus up to 400 Accounts may be involved in the two layer Governance game, depending on the mix of L1 and L2 Seats. \n    * **Filling Seats:** L1 Seats are filled or vacated by 80% vote of all existing filled L1 Seats. For L2 Seats, the committee of Accounts that collectively holds that L1 Seat invites or disinvites new members (up to a maximum or 20 and down a minimum of 3) by majority vote, or according to whatever other logic or rules they deem fit. No other Seats have any control over the members of an L2 Table. \n    * **Voting:** Each L1 Seat has 1 vote in the Governance Game. For L2 Seats, the single vote of its L2 table is determined by whatever logic that L2 table decides. The default is more than 50% vote of the L2 Seat members at that L2 table. \n    * **Hook Changes:** All changes to the Hook are voted on via the Governance Game. A Hook change is only successful if supported by the defined % vote of all Seats. The regular vote is 80%, but for the increase of the rate of balance adjustment it is 100%. \n    * **Rewards:** To incentivise L1 Seats to run reliable validators, L1 Seats earn monthly Rewards provided they actively participate in consensus. \n    * **Foundation of dUNL**: The validators run by those participating in the Genesis Hook Governance Game should form the foundation of any dUNL, as any Seat that performs unreliably risks being voted out by the other Seats. \n5. The different types of Seats allow for a greater diversity of participating Accounts without undermining security. Level 1 Seats are suitable to Accounts controlled by significant entities the community can trust, while Layer 2 Seats allow a broader pool of participants, but since their collective participation counts as 1 vote, their numbers do not overwhelm the trust placed in Level 1 Seats. \n6. Thus, the Governance Game allows up to 400 Accounts to participate and rewards those Accounts for doing so provided they also participate in consensus by running a reliable validator. \n\n## 6. The Xahau Launch Alliance  \n\n1. Xahau has been developed by an alliance of 5 independent entities with a track record of building on and supporting the XRPL ecosystem. Those entities are as follows: \n    * XRPL Labs (Xaman), the software developer behind the XUMM wallet, Hooks, and Xahaud that has carried most of the expertise and cost of developing Xahau. \n    * GateHub Limited, a multinational technology company, crypto exchange, and crypto service provider, including Stablecoins issued on the XRPL. \n    * Titanium OU, an IT consulting and infrastructure firm specialising in providing secure hosting and a major provider of the infrastructure for the XRPL (as Alloy Networks). \n    * Evernode Labs Ltd, the developer of the Evernode smart contract project and responsible for deploying it to Xahau. \n    * Digital Governing OU, an incorporated entity associated with a globally active firm for accounting, audit, and legal services. \n\n## 7. Launch Fully Functional & Decentralised  \n\n1. Xahau will launch fully functional and decentralised without raising funds. No Centralised Control \n2. Xahau will launch with 8 of its 20 Governance Game Seats filled: \n    * 5 will be Layer 1 Seats, each filled by a member of the Xahau Launch Alliance. \n    * 3 will be Layer 2 Tables, one of which will be filled by a committee of Exchanges and the other a diverse committee of XRP community projects, developers, and long-term supporters. \n    * 1 will be FYEO, a company offering code audit and review services on blockchain development, including software such as Hooks. \n\n### No Funds Being Raised \n\n3. There is no ICO, and no funds are being raised from the launch. \n4. The Xahau Alliance members have each independently funded their own development efforts. There’s no communal funding, nor any pooling of money or resources for the further development of Xahau. Nor is there any roadmap, or “Xahau Foundation”, or other centralised treasury. Any further development is wholly at the discretion of independent actors within the ecosystem. \n\n### No Promises \n\n5. The Governance Game members are independent entities. There is no agreement, arrangement, or understanding between them about how to cast their vote, deploy their resources, or use their assets, including any XAH. It is only the logic of the Game – be a trustworthy Validator in the eyes of the other members or be voted out of the Game – that drives Validator behaviour. This is an inherent feature of the XRP Ledger Consensus Protocol (Previously: Ripple Protocol Consensus Algorithm) (PoA) mechanism Xahau uses. \n\n### No Further Features Needed \n\n6. While software, by its nature, needs to be maintained, there are no essential functionalities missing from Xahaud or in need of further development for the software to be useful as a smart contract sidechain of the XRPL.","src/content/docs/docs/resources/whitepaper.mdx","724f3704599a4173","docs/support/help-us",{"id":181,"data":183,"body":188,"filePath":189,"digest":190,"deferredRender":14},{"title":184,"editUrl":14,"head":185,"template":16,"sidebar":186,"pagefind":14,"draft":18},"Help Us",[],{"hidden":18,"attrs":187},{},"The Xahau documentation is open source and open for contributions [on GitHub](https://github.com/Xahau/xahau-web).\n\nA lot of gaps and uncovered details are expected in the documentation, so we invite **everyone** to collaborate on bringing it up to standard.\n\nDo you see anything that is missing, please [create an issue](https://github.com/Xahau/xahau-web/issues) on the repository or just go ahead and create a pull request to the main branch, with suggested changes or updated documentation.\n\nIf you would like to contribute, but don't know what to do, you can always refer to the [GitHub Project board](https://github.com/orgs/Xahau/projects/2/views/1) where issues are organized. If you are unfamiliar with GitHub, the [Community Discord](https://discord.com/invite/UzU58haAn4) is a great place to get help and get involved.","src/content/docs/docs/support/help-us.mdx","4d4376a00e677f31","docs/features/developer-tooling/client-libraries",{"id":191,"data":193,"body":198,"filePath":199,"digest":200,"deferredRender":14},{"title":194,"editUrl":14,"head":195,"template":16,"sidebar":196,"pagefind":14,"draft":18},"Client Libraries",[],{"hidden":18,"attrs":197},{},"These client libraries simplify some of the common work of accessing and processing XAH Ledger data and present it in a form that matches the native conventions of their respective programming languages.\n\nFor other programming languages, you can access the XAH Ledger through the HTTP APIs.\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"172\">Language\u003C/th>\u003Cth width=\"172\">Library Name\u003C/th>\u003Cth>Get Started\u003C/th>\u003Cth>Protocol\u003C/th>\u003Cth>Source Code\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cstrong>Python\u003C/strong>\u003C/td>\u003Ctd>\u003Ccode>xahau-py\u003C/code>\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/xahau-py\">Get Started\u003C/a>\u003C/td>\u003Ctd>XAH / XRP\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/xahau-py\">Repo\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>JavaScript\u003C/strong> / \u003Cstrong>TypeScript\u003C/strong>\u003C/td>\u003Ctd>\u003Ccode>xahau.js\u003C/code>\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/xahau.js\">Get Started\u003C/a>\u003C/td>\u003Ctd>XAH / XRP\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/xahau.js\">Repo\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Cstrong>JavaScript\u003C/strong> / \u003Cstrong>TypeScript\u003C/strong>\u003C/td>\u003Ctd>\u003Ca href=\"https://www.npmjs.com/package/xrpl-accountlib\">\u003Ccode>xrpl-accountlib\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://www.npmjs.com/package/xrpl-accountlib\">Get started\u003C/a>\u003Cbr />\u003Ca href=\"https://github.com/WietseWind/xrpl-accountlib/blob/master/samples/prefill-sign-and-submit.mjs\">Sample\u003C/a>\u003C/td>\u003Ctd>XAH / XRP\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/WietseWind/xrpl-accountlib\">Repo\u003C/a>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n**Tip:** To add a client library not listed here, please suggest changes to this page!","src/content/docs/docs/features/developer-tooling/client-libraries.mdx","9490b7b51f47f998","docs/features/developer-tooling/curated-tooling",{"id":201,"data":203,"body":208,"filePath":209,"digest":210,"deferredRender":14},{"title":204,"editUrl":14,"head":205,"template":16,"sidebar":206,"pagefind":14,"draft":18},"Curated Tooling",[],{"hidden":18,"attrs":207},{},"These tools simplify some of the common work of accessing and processing Hooks.\n\n| Tool                    | Reference Link                                                   |\n| ----------------------- | ---------------------------------------------------------------- |\n| **Hooks Builder**       | [Builder Link](https://builder.xahau.network/develop)           |\n| **Hooks Toolkit**       | [Toolkit Link](https://hooks-toolkit.com/)         |\n| **Xpop Toolkit**        | [Toolkit Link](https://github.com/Transia-RnD/xpop-toolkit)      |\n| **Hooks Blog**          | [Blog Link](https://dev.to/t/xrplhooks/top/infinity)             |\n| **XFL Tools**           | [Tool Link](https://richardah.github.io/xfl-tools/)              |\n| **Binary Visualizer**   | [Tool Link](https://richardah.github.io/xrpl-binary-visualizer/) |\n| **Keylet Tools**        | [Tool Link](https://richardah.github.io/xrpl-keylet-tools/)      |\n| **CTID Visualizer**     | [Tool Link](https://transia-rnd.github.io/xrpl-ctid-visualizer/) |\n| **C Hook Tx Builder**   | [Tool Link](https://transia-rnd.github.io/xrpl-tt-visualizer/)   |","src/content/docs/docs/features/developer-tooling/curated-tooling.mdx","713ee2ab3cf5154e","docs/features/http-websocket-apis/admin-api-methods",{"id":211,"data":213,"body":218,"filePath":219,"digest":220,"deferredRender":14},{"title":214,"editUrl":14,"head":215,"template":16,"sidebar":216,"pagefind":14,"draft":18},"Admin API Methods",[],{"hidden":18,"attrs":217},{},"These methods are intended exclusively for trusted personnel responsible for maintaining xahaud server operations.\n\n### Key Generation Methods\n\n\n\n| Method             | Description                                                                                                     |\n| ------------------ | --------------------------------------------------------------------------------------------------------------- |\n| validation_create | Generate a formatted key pair for xhaud nodes. (Validators should use tokens instead of keys from this method.) |\n| wallet_propose    | Generate keys for a new account.                                                                                |\n\n### Logging and Data Management Methods\n\n\n\n| Method          | Description                                                     |\n| --------------- | --------------------------------------------------------------- |\n| can_delete     | Enable online deletion of ledgers up to a specified ledger.     |\n| download_shard | Download a specific shard of ledger history.                    |\n| ledger_cleaner | Set up the ledger cleaner to detect and resolve corrupted data. |\n| ledger_request | Query a peer server for a specific ledger version.              |\n| log_level      | View or change log verbosity levels.                            |\n| logrotate       | Reopen the log file.                                            |\n| node_to_shard | Transfer data from the ledger store to the shard store.         |\n\n### Server Control Methods\n\n| Method         | Description                                       |\n| -------------- | ------------------------------------------------- |\n| ledger_accept | Close and advance the ledger in stand-alone mode. |\n| stop           | Shut down the xahaud server.                      |\n\n### Signing Methods\n\n| Method    | Description                           |\n| --------- | ------------------------------------- |\n| sign      | Cryptographically sign a transaction. |\n| sign_for | Contribute to a multi-signature.      |\n\n### Peer Management Methods\n\n| Method                   | Description                                        |\n| ------------------------ | -------------------------------------------------- |\n| connect                  | Force the server to connect to a specific peer.    |\n| peer_reservations_add  | Add or update a reserved slot for a specific peer. |\n| peer_reservations_del  | Remove a reserved slot for a specific peer.        |\n| peer_reservations_list | View all reserved peer slots.                      |\n| peers                    | Retrieve information about connected peers         |\n\n### Status/Debugging Methods\n\n\n\n| Method                 | Description                                                 |\n| ---------------------- | ----------------------------------------------------------- |\n| consensus_info        | View the current state of the consensus process.            |\n| feature                | Retrieve information about protocol amendments.             |\n| fetch_info            | Check the server’s synchronization status with the network. |\n| get_counts            | View statistics about server internals and memory usage.    |\n| manifest               | Retrieve public key details for a known validator.          |\n| print                  | Access information about internal subsystems.               |\n| validator_info        | Get the server's validator configuration details.           |\n| validator_list_sites | View sites that publish validator lists.                    |\n| validators             | Retrieve information about the current validators.          |","src/content/docs/docs/features/http-websocket-apis/admin-api-methods.mdx","3482345842df5733","docs/features/http-websocket-apis/public-api-methods",{"id":221,"data":223,"body":228,"filePath":229,"digest":230,"deferredRender":14},{"title":224,"editUrl":14,"head":225,"template":16,"sidebar":226,"pagefind":14,"draft":18},"Public API Methods",[],{"hidden":18,"attrs":227},{},"Interact directly with an xahaud server using public API methods. These methods are not necessarily intended for general public use but are accessible to any client connected to the server.&#x20;\n\n### Account Methods\n\n\n\n| Method              | Description                                                            |\n| ------------------- | ---------------------------------------------------------------------- |\n| account_channels   | List payment channels where the account is the channel source.         |\n| account_currencies | List currencies the account can send or receive.                       |\n| account_info       | Retrieve basic information about an account.                           |\n| account_lines      | Access trust line information for an account.                          |\n| account_objects    | Retrieve all ledger objects owned by an account.                       |\n| account_offers     | View an account’s currency exchange offers.                            |\n| account_tx         | Retrieve transaction history for an account.                           |\n| gateway_balances   | Calculate total issued amounts for an account.                         |\n| noripple_check     | Suggest changes to an account's Default Ripple and No Ripple settings. |\n\n### Ledger Methods\n\n\n\n| Method          | Description                                        |\n| --------------- | -------------------------------------------------- |\n| ledger          | Get information about a specific ledger version.   |\n| ledger_closed  | Retrieve the most recently closed ledger version.  |\n| ledger_current | Retrieve the current working ledger version.       |\n| ledger_data    | Access raw ledger content.                         |\n| ledger_entry   | Retrieve a specific element from a ledger version. |\n\n### Transaction Methods\n\n\n\n| Method              | Description                                                |\n| ------------------- | ---------------------------------------------------------- |\n| submit              | Submit a transaction to the network.                       |\n| submit_multisigned | Submit a multi-signed transaction.                         |\n| transaction_entry  | Retrieve details about a transaction in a specific ledger. |\n| tx                  | Retrieve transaction information across all ledgers.       |\n| sign                | (Admin) Cryptographically sign a transaction.              |\n| sign_for           | (Admin) Contribute to a multi-signature.                   |\n\n### Order Book Methods\n\n| Method              | Description                                                 |\n| ------------------- | ----------------------------------------------------------- |\n| book_offers        | View offers for exchanging two currencies.                  |\n| deposit_authorized | Check if one account can send payments directly to another. |\n\n### Payment Channel Methods\n\n\n\n| Method             | Description                               |\n| ------------------ | ----------------------------------------- |\n| channel_authorize | Sign a claim for a payment channel        |\n| channel_verify    | Verify a payment channel claim signature. |\n\n### Subscription Methods\n\n\n\n| Method      | Description                     |\n| ----------- | ------------------------------- |\n| subscribe   | Listen for updates on a subject |\n| unsubscribe | Stop receiving updates          |\n\n### Server Info Methods\n\n| Method        | Description                                   |\n| ------------- | --------------------------------------------- |\n| fee           | Retrieve information about transaction costs. |\n| server_info  | Get server status in human-readable format.   |\n| server_state | Get server status in machine-readable format. |\n| manifest      | Retrieve public key details for a validator.  |\n\n### Utility Methods\n\n\n\n| Method | Description                                                            |\n| ------ | ---------------------------------------------------------------------- |\n| json   | Proxy for running commands with JSON parameters. _(Commandline only.)_ |\n| ping   | Verify server connectivity.                                            |\n| random | Generate random numbers.                                               |","src/content/docs/docs/features/http-websocket-apis/public-api-methods.mdx","47ff4331d2061c78","docs/features/transaction-signing",{"id":231,"data":233,"body":239,"filePath":240,"digest":241,"deferredRender":14},{"title":234,"description":235,"editUrl":14,"head":236,"template":16,"sidebar":237,"pagefind":14,"draft":18},"Transaction Signing","As Hooks-enabled networks require specific transaction fields & offer more transaction types, not all clients will work out of the box. `xrpl-accountlib`",[],{"hidden":18,"attrs":238},{},"## Main differences\n\n1. Hooks-enabled networks allow getting network definitions dynamically. Allowing clients to adapt available transaction types, ledger objects, properties, and value types. When implemented correctly, signing and encoding libraries don't have to be updated when the network adds transaction/object types/properties. \u003Cmark style=\"color:blue;\">**The libraries below implement this and will handle this for you.**\u003C/mark>\n2. Hooks-enabled networks require a **NetworkID** with every transaction to prevent transaction replay on another chain. The **NetworkID** will also be returned by a `server_info` RPC command in the `network_id` field (e.g. **`21338`** for Hooks V3 testnet)\n3. Transactions on a Hooks-enabled network may need higher fees to deliver a transaction to another account, based on the Hooks that will be executed sending out of the sending account and receiving on the destination account. A reasonable fee to satisfy the Hooks execution can be dynamically fetched from a node by issuing the `fee` command while providing a transaction as `tx_blob`. \u003Cmark style=\"color:blue;\">**The libraries below implement this and will handle this for you.**\u003C/mark>\n\n## JavaScript/Typescript\n\nThe [**npm package `xrpl-accountlib`**](https://www.npmjs.com/package/xrpl-accountlib) can sign transactions for Hooks-enabled networks, as it offers full dynamic network feature support fetching network definitions at runtime.\n\nThe [**npm package `xrpl-client`**](https://www.npmjs.com/package/xrpl-client) integrates nicely with `xrpl-accountlib` (and comes as a dependency) to dynamically fetch the aforementioned network definitions and account values, helping submit the transaction.\n\n### Code Sample\n\n```javascript\nimport {\n  derive,\n  utils,\n  signAndSubmit,\n} from \"xrpl-accountlib\"\n\nconst wss = 'wss://xahau-test.net'\nconst account = derive.familySeed(\"s...\")\n\nconst networkInfo = await utils.txNetworkAndAccountValues(wss, account)\n\nconst tx = {\n  TransactionType: \"SetHook\",\n  Hooks: [ { Hook: {\n    CreateCode: \"0061736D01000000011C0460057F7F7F7F7F017E60037F7F7E017E60027F7F017F60017F017E02230303656E76057472616365000003656E7606616363657074000103656E76025F670002030201030503010002062B077F0141B088040B7F004180080B7F0041A6080B7F004180080B7F0041B088040B7F0041000B7F0041010B07080104686F6F6B00030AC4800001C0800001017F230041106B220124002001200036020C41920841134180084112410010001A410022002000420010011A41012200200010021A200141106A240042000B0B2C01004180080B254163636570742E633A2043616C6C65642E00224163636570742E633A2043616C6C65642E22\",\n    Flags: 1,\n    HookApiVersion: 0,\n    HookNamespace: \"F\".repeat(64),\n    HookOn: \"F\".repeat(58) + \"BFFFFE\",\n  }\n  }],\n  ...networkInfo.txValues,\n  // ^^ This adds autmatically fetched values for you:\n  // Sequence, Account, LastLedgerSequence,\n  // Fee (Hooks enabled: autodetect (from ledger))\n}\n\n/**\n * Note: the code above and `signAndSubmit` results in automatically\n * fetching and setting a fee for you. If you want to check the fee\n * for min/max/..., get your own fee (string in drops) using:\n *    utils.networkTxFee(wss, tx)\n * \n * e.g.\n *    const Fee = await utils.networkTxFee(wss, tx)\n *    assert(Number(Fee) \u003C 50_000, \"Auto fee above 50k drops, abort\")\n *    Object.assign(tx, { Fee, })\n */\n\nconst submitted = await signAndSubmit(tx, wss, account)\n\nconsole.log(submitted)\n```","src/content/docs/docs/features/transaction-signing/index.mdx","03916eeb73b41cd9","docs/features/developer-tooling/developer-tricks",{"id":242,"data":244,"body":249,"filePath":250,"digest":251,"deferredRender":14},{"title":245,"editUrl":14,"head":246,"template":16,"sidebar":247,"pagefind":14,"draft":18},"Developer Tricks",[],{"hidden":18,"attrs":248},{},"## Wildcard signing\n\nTo easily test & replay, use `NetworkID` with value `65535` (config: `[network_id]`) to disable signature verification.\n\nAdded: [https://github.com/Xahau/xahaud/pull/201](https://github.com/Xahau/xahaud/pull/201)\n\n## Server Definitions\n\nServer definitions can eas","src/content/docs/docs/features/developer-tooling/developer-tricks.mdx","bc4adb1d2c9758cd","docs/features/http-websocket-apis/considerations",{"id":252,"data":254,"body":259,"filePath":260,"digest":261,"deferredRender":14},{"title":255,"editUrl":14,"head":256,"template":16,"sidebar":257,"pagefind":14,"draft":18},"Considerations",[],{"hidden":18,"attrs":258},{},"## Markers\n\nSome methods return more data than can fit efficiently into a single response. When the results exceed the response limit, a `marker` field is included in the response. This field allows you to retrieve additional pages of data through subsequent requests. To continue fetching data, include the `marker` value from the previous response in your next request. If a response does not include a `marker`, it means you have reached the end of the data set.\n\nThe format of the `marker` field is intentionally unspecified. Each server can define the `marker` as needed, meaning it could be a string, a nested object, or another type. The `marker` format may vary between servers and even between methods on the same server. Each `marker` is temporary and may become invalid after approximately 10 minutes.\n\n## Rate Limit\n\nThe `xahaud` server enforces rate limits on API clients using public APIs to prevent excessive requests. Rate limiting is applied based on the client’s IP address, meaning multiple clients sharing a [network address translation (NAT)](https://en.wikipedia.org/wiki/Network_address_translation) will share the same rate limit associated with their public IP.\n\nWhen a client is nearing the rate limit, the server includes a `\"warning\": \"load\"` field at the top level of an API response. This warning does not appear on every response but may be sent several times before the server disconnects the client. Clients connected as an admin are exempt from rate limiting.\n\nIf a client exceeds the rate limit, the server disconnects the client and temporarily blocks further requests from that IP address. The WebSocket and JSON-RPC APIs handle disconnects differently, as described below.","src/content/docs/docs/features/http-websocket-apis/considerations.mdx","23cd7339d8179453","docs/features/http-websocket-apis/request-formatting-guide",{"id":262,"data":264,"body":269,"filePath":270,"digest":271,"deferredRender":14},{"title":265,"editUrl":14,"head":266,"template":16,"sidebar":267,"pagefind":14,"draft":18},"Request Formatting Guide",[],{"hidden":18,"attrs":268},{},"### Public Servers\n\n* wss://xahau.network or https://xahau.network (Mainnet)\n* wss://xahau-test.net or https://xahau-test.net (Testnet)\n\n### Sample Requests\n\nTo send a sample request to the API, use the following commands.\n\n### Websocket\n\n```\n{\n  \"id\": 3,\n  \"command\": \"account_info\",\n  \"account\": \"rhBDFMmr3jSjgsWMqBAYaATLy3PuXy395y\",\n  \"strict\": true,\n  \"ledger_index\": \"validated\",\n  \"api_version\": 1\n}\n```\n\n### WebSocket Request Structure\n\nOnce you establish a WebSocket connection to the `xahaud` server, you can send commands as JSON objects with these fields:\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Field\u003C/th>\u003Cth width=\"220\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>command\u003C/td>\u003Ctd>String\u003C/td>\u003Ctd>The name of the API method\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>id\u003C/td>\u003Ctd>(Multiple)\u003C/td>\u003Ctd>\u003Cem>(Optional)\u003C/em> Unique identifier for the request. \u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>api_version\u003C/td>\u003Ctd>Number\u003C/td>\u003Ctd>\u003Cem>(Optional)\u003C/em> Specifies the API version.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n### JSON-RPC\n\n```\nPOST https://xahau.network/\nContent-Type: application/json\n\n{\n    \"method\": \"account_info\",\n    \"params\": [\n        {\n            \"account\": \"rhBDFMmr3jSjgsWMqBAYaATLy3PuXy395y\",\n            \"strict\": true,\n            \"ledger_index\": \"validated\",\n            \"api_version\": 1\n        }\n    ]\n}\n```\n\n### JSON-RPC Request Structure\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Field\u003C/th>\u003Cth width=\"220\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>method\u003C/td>\u003Ctd>String\u003C/td>\u003Ctd>The name of the API method\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>params\u003C/td>\u003Ctd>Array\u003C/td>\u003Ctd>\u003Cem>(Optional)\u003C/em> A one-item array containing a JSON object with the parameters of the method.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n### Comandline\n\n```\nxahaud account_info rhBDFMmr3jSjgsWMqBAYaATLy3PuXy395y validated strict\n```\n\n### Commandline Request Structure\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Field\u003C/th>\u003Cth width=\"220\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>xahaud\u003C/td>\u003Ctd>Start calling the service xahaud\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>method\u003C/td>\u003Ctd>The name of the API method\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>params\u003C/td>\u003Ctd>(Optional)\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>","src/content/docs/docs/features/http-websocket-apis/request-formatting-guide.mdx","dd25e8118f837568","docs/features/transaction-signing/transaction-fees",{"id":272,"data":274,"body":280,"filePath":281,"digest":282,"deferredRender":14},{"title":275,"description":276,"editUrl":14,"head":277,"template":16,"sidebar":278,"pagefind":14,"draft":18},"Transaction Fees","Xahau smart contracts (Hooks) need transaction & destination specific fees. You can easily get the required fee from the `fee` RPC command.",[],{"hidden":18,"attrs":279},{},"import { Aside } from '@astrojs/starlight/components';\n\nWhile libraries may deal with fee determination for you (see [.](./ \"mention\")), when building your own integrations with the Xahauy ledger, you may have to implement dynamic fee determination based on the transaction, source & destination account.\n\nAs the sender of a transaction will have to pay for the fees required for the invoked Hooks for the specific transaction type, where Hooks can live both on the source & destination account, you can send a TX Blob (signed with a dummy account) to the `fee` command, after which Xahau will return the specific fees required for the specific transaction.\n\n### Fee RPC Helper\n\nTransaction fees on a ledger with the Hooks Amendment enabled become non-trivial to compute for end-users and/or wallet applications. This is because strong hooks must be paid for by the originator of a transaction, and there may be as many as 4 strong hooks on the sending account and 4 on the receiving account, as well as any other strong transactional stakeholders involved (as can be the case with some exotic transaction types). Further, if the transaction is a SetHook then the size of the parameters, the size of the code and whether it is a _create_ operation or an _install_ operation all determine the size of the fee.\n\nTherefore it is highly recommended that **all** transactions be run through the updated fee RPC call before they are submitted to the ledger.\n\n#### To invoke the RPC call:\n\n1. Open a websocket connection to the Hooks node you will be working with.\n2. Compose the serialized transaction you wish to know the fee for with the following:\n\n* `Fee: 0`\n* `SigningPubKey: \"\"` (That is: 0 byte VL of type 0x73. In hex:`0x7300`.)\n* Do **not** sign the transaction.\n\n3. Submit it as a hex blob to the RPC as follows:\n\n```json\n{\"command\":\"fee\", \"tx_blob\":\"\u003Chex blob>\"}\n```\n\nFor HTTP POST RPC submit it as follows:\n\n```json\n{\"method\":\"fee\", \"params\": [{\"tx_blob\":\"\u003Chex blob>\"}] }\n```\n\nThe response should look something like\n\n```json\n{\n  result: {\n    drops: {\n      base_fee: '130520',\n    },\n  //...\n  },\n  type: 'response'\n}\n```\n\nTake the base fee and set it as the `Fee` field in the transaction. Now sign and submit it as per the normal transaction submission process.\n\nIf there is an invalid value for `tx_blob` or `tx_blob` is missing, a regular JSON result will be returned with a `base_fee` of 10.","src/content/docs/docs/features/transaction-signing/transaction-fees.mdx","fc48be12161d82ae","docs/features/http-websocket-apis/response-formatting-guide",{"id":283,"data":285,"body":290,"filePath":291,"digest":292,"deferredRender":14},{"title":286,"editUrl":14,"head":287,"template":16,"sidebar":288,"pagefind":14,"draft":18},"Response Formatting Guide",[],{"hidden":18,"attrs":289},{},"Responses are structured differently based on whether the request is made through the WebSocket, JSON-RPC, or Commandline interfaces. The JSON-RPC and Commandline interfaces share the same format, as the Commandline interface internally uses JSON-RPC.\n\n### Fields\n\n| Field         | Type     | Description                                                                                                                                                            |\n| ------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| id            | (Varies) | (For WebSocket) The ID from the original request.                                                                                                                      |\n| status        | String   | (For WebSocket) Indicates `success` when the request was received and processed correctly.                                                                             |\n| result.status | String   | (For JSON-RPC and Commandline) Indicates `success` when the request was successfully processed.                                                                        |\n| type          | String   | (For WebSocket) The value `response` is used for direct replies to API requests. Asynchronous notifications use other values, such as `ledgerClosed` or `transaction`. |\n| result        | Object   | Contains the query result, with content that varies by command.                                                                                                        |\n| warning       | String   | _(Optional)_ If present, the value is `load`, indicating the client is nearing the rate limit threshold where the server may disconnect.                               |\n| warnings      | Array    | _(Optional)_ A list of **Warning Objects** with important server warnings. For more details, see API Warnings.                                                         |\n| forwarded     | Boolean  | _(Optional)_ `true` indicates the request was forwarded from a Reporting Mode server to a P2P server to fulfill the request. Default is `false`.                       |\n\nAPI Warnings\n\nWhen a response contains a `warnings` array, each entry represents a specific warning from the server. Each **Warning Object** includes the following fields:\n\n\n\n| Field   | Type   | Description                                                                                                                                                                            |\n| ------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| id      | Number | A unique numeric code identifying this warning message.                                                                                                                                |\n| message | String | A human-readable explanation of the warning. Avoid writing code that relies on the content of this field; use the `id` (and `details`, if available) to interpret the warning instead. |\n| details | Object | _(Optional)_ Additional context about the warning. The content varies by warning type.                                                                                                 |","src/content/docs/docs/features/http-websocket-apis/response-formatting-guide.mdx","ca615a7939afa48e","docs/features/network-features/account-managment",{"id":293,"data":295,"body":300,"filePath":301,"digest":302,"deferredRender":14},{"title":296,"editUrl":14,"head":297,"template":16,"sidebar":298,"pagefind":14,"draft":18},"Account Managment",[],{"hidden":18,"attrs":299},{},"import { LinkCard } from '@astrojs/starlight/components';\n\nThe Account Management features in the Xahau network are a crucial component for users to manage their accounts effectively.\n\nThis includes several transaction types that enable users to perform various operations on their accounts.\n\n### Transaction Types\n\n#### AccountSet\n\nThe `AccountSet` transaction type allows users to modify the properties of their accounts. This includes settings such as transfer rate, account flags, and more.\n\n\u003CLinkCard title=\"AccountSet\" href=\"/docs/protocol-reference/transactions/transaction-types/accountset\" />\n\n#### AccountDelete\n\nThe `AccountDelete` transaction type enables users to delete their accounts from the Xahau network. This operation is irreversible and should be used with caution.\n\n\u003CLinkCard title=\"AccountDelete\" href=\"/docs/protocol-reference/transactions/transaction-types/accountdelete\" />\n\n#### SetRegularKey\n\nThe `SetRegularKey` transaction type allows users to set a regular key pair for their account. This key pair can be used as an alternative to the master key pair for signing transactions.\n\n\u003CLinkCard title=\"SetRegularKey\" href=\"/docs/protocol-reference/transactions/transaction-types/setregularkey\" />\n\n#### SignerListSet\n\nThe `SignerListSet` transaction type enables users to set a list of signers for their account. This is particularly useful for multi-signature accounts where multiple parties are required to sign off on transactions.\n\n\u003CLinkCard title=\"SignerListSet\" href=\"/docs/protocol-reference/transactions/transaction-types/signerlistset\" />\n\n#### Import\n\nThe `Import` transaction type is used to import transactions from other networks. This feature is especially useful for issuers who need to import transactions for their asset holders. It's recommended to key your accounts first before attempting to import transactions.\n\nPlease note that the process of importing for the issuer involves specific transaction types and requires careful configuration. Always ensure that the hooks are correctly set up and that the transactions are valid for the intended operations.\n\n\u003CLinkCard title=\"Import\" href=\"/docs/protocol-reference/transactions/transaction-types/import\" />\n\nThese transaction types provide users with a comprehensive set of tools for managing their accounts on the Xahau network. As with all operations, users should ensure they understand the implications of each transaction type before use.","src/content/docs/docs/features/network-features/account-managment.mdx","fb9021fb6cd009b7","docs/features/network-features/balance-rewards",{"id":303,"data":305,"body":310,"filePath":311,"digest":312,"deferredRender":14},{"title":306,"editUrl":14,"head":307,"template":16,"sidebar":308,"pagefind":14,"draft":18},"Balance Rewards",[],{"hidden":18,"attrs":309},{},"import { LinkCard } from '@astrojs/starlight/components';\n\nThe Balance Rewards feature is a unique aspect of the Xahau network that allows users to accumulate and claim rewards based on their account balance. This feature is implemented through a combination of native code (BalanceRewards Amendment) and hook code (Genesis Account's Reward Hook).\n\n### Transaction Types\n\n#### ClaimReward\n\nA `ClaimReward` transaction allows an account to claim the rewards it has accumulated. The rewards can be claimed by the account owner or by a specified issuer. The account can also opt-out of rewards by setting the Flags field to 1.\n\n\u003CLinkCard title=\"ClaimReward\" href=\"/docs/protocol-reference/transactions/transaction-types/claimreward\" />\n\n#### GenesisMint\n\nThe `GenesisMint` transaction type is also associated with the Balance Rewards feature. This is an Emitted transaction that is executed through the Reward Hook every time a user claims balance rewards.\n\n\u003CLinkCard title=\"GenesisMint - (Emitted Txn)\" href=\"/docs/protocol-reference/transactions/transaction-types/genesismint-emitted-txn\" />","src/content/docs/docs/features/network-features/balance-rewards.mdx","d27882d56ef1a005","docs/features/network-features/check",{"id":313,"data":315,"body":320,"filePath":321,"digest":322,"deferredRender":14},{"title":316,"editUrl":14,"head":317,"template":16,"sidebar":318,"pagefind":14,"draft":18},"Check",[],{"hidden":18,"attrs":319},{},"import { LinkCard } from '@astrojs/starlight/components';\n\nThe Check feature in the Xahau network is a deferred payment system that allows for the creation, cancellation, and cashing of checks within the ledger. This feature is designed to facilitate secure and efficient transactions between parties.\n\n### Transaction Types\n\n#### CheckCreate\n\nThe `CheckCreate` transaction is used to create a Check object in the ledger. This represents a deferred payment that can be cashed by its intended destination.\n\n\u003CLinkCard title=\"CheckCreate\" href=\"/docs/protocol-reference/transactions/transaction-types/checkcreate\" />\n\n#### CheckCancel\n\nThe `CheckCancel` transaction is used to cancel a Check that has been created but not yet cashed. This allows the sender to stop the payment from being processed if necessary.\n\n\u003CLinkCard title=\"CheckCancel\" href=\"/docs/protocol-reference/transactions/transaction-types/checkcancel\" />\n\n#### CheckCash\n\nThe `CheckCash` transaction is used to cash a Check that has been created. This allows the recipient to receive the funds that have been deferred.\n\n\u003CLinkCard title=\"CheckCash\" href=\"/docs/protocol-reference/transactions/transaction-types/checkcash\" />","src/content/docs/docs/features/network-features/check.mdx","fc47daed00da82fe","docs/features/network-features/hooks",{"id":323,"data":325,"body":329,"filePath":330,"digest":331,"deferredRender":14},{"title":143,"editUrl":14,"head":326,"template":16,"sidebar":327,"pagefind":14,"draft":18},[],{"hidden":18,"attrs":328},{},"import { LinkCard } from '@astrojs/starlight/components';\n\nHooks are a powerful feature of the XRPL network, providing robust smart contract functionality. They are small, efficient WebAssembly modules designed specifically for the XRPL, and can be referred to as Smart Contracts for the XRP Ledger Protocol. Hooks can be written in any language that is compilable with WebAssembly, allowing for a wide range of business logic and smart contract concepts to be implemented.\n\n### Transaction Types\n\nThe Hooks feature includes two types of transactions:\n\n**SetHook**\n\nThis transaction type is used to set up a hook on an account.\n\n\u003CLinkCard title=\"SetHook\" href=\"/docs/protocol-reference/transactions/transaction-types/sethook\" />\n\n**Invoke**\n\nThis transaction type is used to call or invoke the functionality of a hook.\n\n\u003CLinkCard title=\"Invoke\" href=\"/docs/protocol-reference/transactions/transaction-types/invoke\" />","src/content/docs/docs/features/network-features/hooks.mdx","820a1ae3a1599714","docs/features/network-features/offer",{"id":332,"data":334,"body":339,"filePath":340,"digest":341,"deferredRender":14},{"title":335,"editUrl":14,"head":336,"template":16,"sidebar":337,"pagefind":14,"draft":18},"Offer",[],{"hidden":18,"attrs":338},{},"import { LinkCard } from '@astrojs/starlight/components';\n\nThe Offer feature in the Xahau network is a crucial component of the decentralized exchange system. It allows users to create and cancel offers, facilitating a dynamic and responsive trading environment.\n\n### Transaction Types\n\n#### OfferCreate\n\nThe `OfferCreate` transaction is used to place an offer in the decentralized exchange.\n\n\u003CLinkCard title=\"OfferCreate\" href=\"/docs/protocol-reference/transactions/transaction-types/offercreate\" />\n\n#### OfferCancel\n\nThe `OfferCancel` transaction is used to cancel an existing offer. The documentation for this transaction type is referenced in the Xahau Documentation but not provided in the given context.\n\n\u003CLinkCard title=\"OfferCancel\" href=\"/docs/protocol-reference/transactions/transaction-types/offercancel\" />","src/content/docs/docs/features/network-features/offer.mdx","9fd9e52e1b83ebec","docs/features/network-features/uritoken",{"id":342,"data":344,"body":349,"filePath":350,"digest":351,"deferredRender":14},{"title":345,"editUrl":14,"head":346,"template":16,"sidebar":347,"pagefind":14,"draft":18},"URIToken",[],{"hidden":18,"attrs":348},{},"import { LinkCard } from '@astrojs/starlight/components';\n\nURITokens are the Non-Fungible Token (NFT) implementation native to the Xahau network. They exist as first-class on-ledger objects, uniquely identified by the hash of their issuer and Uniform Resource Identifier (URI). URITokens can point to any digital content, with only one object per URI per account existing on the ledger.\n\nThe issuer has the ability to set a flag to enable the burning of the object in the future. Each owner's reserve is locked up as well upon ownership of the URIToken.\n\n### Transaction Types\n\n#### URITokenMint\n\nThe URITokenMint transaction mints a new URIToken and assigns ownership to the specified account. The minted URIToken represents a unique digital asset that can be used in various applications. The issuer can choose to allow the minted URIToken to be destroyed in the future.\n\n\u003CLinkCard title=\"URITokenMint\" href=\"/docs/protocol-reference/transactions/transaction-types/uritokenmint\" />\n\n#### URITokenBurn\n\nThe URITokenBurn transaction is used to burn a URIToken in Xahau. Burning a URIToken permanently removes it from circulation. The transaction does not have any special transaction cost requirements. The account that owns the URIToken to be burned is required for this transaction.\n\n\u003CLinkCard title=\"URITokenBurn\" href=\"/docs/protocol-reference/transactions/transaction-types/uritokenburn\" />\n\n#### URITokenBuy\n\nThe URITokenBuy transaction allows a user to buy a URIToken from the issuer. This transaction is used to transfer ownership of a URIToken from the issuer to the buyer. The buyer's account, the unique identifier of the URIToken to be bought, and the amount of currency to pay for the URIToken are required for this transaction.\n\n\u003CLinkCard title=\"URITokenBuy\" href=\"/docs/protocol-reference/transactions/transaction-types/uritokenbuy\" />\n\n\u003CLinkCard title=\"URITokenCreateSellOffer\" href=\"/docs/protocol-reference/transactions/transaction-types/uritokencreateselloffer\" />\n\n\u003CLinkCard title=\"URITokenCancelSellOffer\" href=\"/docs/protocol-reference/transactions/transaction-types/uritokencancelselloffer\" />","src/content/docs/docs/features/network-features/uritoken.mdx","8e53c8670c9c5cec","docs/features/network-features/payments",{"id":352,"data":354,"body":359,"filePath":360,"digest":361,"deferredRender":14},{"title":355,"editUrl":14,"head":356,"template":16,"sidebar":357,"pagefind":14,"draft":18},"Payments",[],{"hidden":18,"attrs":358},{},"import { LinkCard } from '@astrojs/starlight/components';\n\nThe Payments feature in the Xahau network is a crucial component that enables the transfer of assets and funds within the network. This feature is designed to facilitate seamless transactions, ensuring a smooth and efficient operation of the network.\n\n### Transaction Types\n\nThe Payments feature comprises several transaction types, each serving a unique purpose in the network. Here's a brief overview of each transaction type:\n\n**DepositPreauth**\n\nThis transaction type allows an account to preauthorize incoming transactions from a specified source. It's a way to whitelist accounts, ensuring that only authorized transactions are processed.\n\n\u003CLinkCard title=\"DepositPreauth\" href=\"/docs/protocol-reference/transactions/transaction-types/depositpreauth\" />\n\n**TrustSet**\n\nThis transaction type allows users to create a trust line with another account. It's a way to establish trust between two accounts, enabling them to transact with each other.\n\n\u003CLinkCard title=\"TrustSet\" href=\"/docs/protocol-reference/transactions/transaction-types/trustset\" />\n\n**Payment**\n\nThis is the basic transaction type that allows the transfer of assets between accounts. It's the fundamental transaction type for any payment operation in the network.\n\n\u003CLinkCard title=\"Payment\" href=\"/docs/protocol-reference/transactions/transaction-types/payment\" />\n\n**PaymentChannelCreate**\n\nThis transaction type allows the creation of a payment channel between two accounts. Payment channels are off-ledger scalability solutions that enable high-frequency, low-cost transactions between two parties.\n\n\u003CLinkCard title=\"PaymentChannelCreate\" href=\"/docs/protocol-reference/transactions/transaction-types/paymentchannelcreate\" />\n\n**PaymentChannelFund**\n\nThis transaction type allows an account to fund an existing payment channel. It's a way to add more assets to a payment channel, enabling more transactions to take place.\n\n\u003CLinkCard title=\"PaymentChannelFund\" href=\"/docs/protocol-reference/transactions/transaction-types/paymentchannelfund\" />\n\n**PaymentChannelClaim**\n\nThis transaction type allows an account to claim the funds from a payment channel. It's a way to close a payment channel and retrieve the remaining assets.\n\n\u003CLinkCard title=\"PaymentChannelClaim\" href=\"/docs/protocol-reference/transactions/transaction-types/paymentchannelclaim\" />","src/content/docs/docs/features/network-features/payments.mdx","3b0493ed95d63005","docs/features/network-features/escrow",{"id":362,"data":364,"body":369,"filePath":370,"digest":371,"deferredRender":14},{"title":365,"editUrl":14,"head":366,"template":16,"sidebar":367,"pagefind":14,"draft":18},"Escrow",[],{"hidden":18,"attrs":368},{},"import { LinkCard } from '@astrojs/starlight/components';\n\nThe Escrow feature is a crucial part of the Xahau network. It provides a secure and trustless method for transactions between parties. The Escrow feature ensures that the assets involved in a transaction are held securely until all the conditions of the transaction are met.\n\n### Transaction Types\n\nThe Escrow feature includes three types of transactions:\n\n#### EscrowCreate\n\nThe `EscrowCreate` transaction is used to create a new escrow agreement. This transaction specifies the terms of the escrow, including the parties involved, the assets to be held in escrow, and the conditions under which the assets will be released.\n\n\u003CLinkCard title=\"EscrowCreate\" href=\"/docs/protocol-reference/transactions/transaction-types/escrowcreate\" />\n\n#### EscrowFinish\n\nThe `EscrowFinish` transaction is used to complete an escrow agreement. This transaction is executed when all the conditions of the escrow are met. Upon execution, the assets held in escrow are released to the appropriate party.\n\n\u003CLinkCard title=\"EscrowFinish\" href=\"/docs/protocol-reference/transactions/transaction-types/escrowfinish\" />\n\n#### EscrowCancel\n\nThe `EscrowCancel` transaction is used to cancel an escrow agreement. This transaction can be executed if the conditions of the escrow are not met within a specified time frame. Upon cancellation, the assets held in escrow are returned to the party that initiated the escrow.\n\n\u003CLinkCard title=\"EscrowCancel\" href=\"/docs/protocol-reference/transactions/transaction-types/escrowcancel\" />","src/content/docs/docs/features/network-features/escrow.mdx","4a0960260ba11e99","docs/infrastructure/building-xahau",{"id":372,"data":374,"body":380,"filePath":381,"digest":382,"deferredRender":14},{"title":375,"description":376,"editUrl":14,"head":377,"template":16,"sidebar":378,"pagefind":14,"draft":18},"Building Xahau","A Guide to Setting Up the Development Environment.",[],{"hidden":18,"attrs":379},{},"This section provides detailed instructions for setting up the build environment on both Ubuntu 22.04 and macOS 13.5.2.\n\nThe building Xahau chapter will guide you through the process of establishing environmental variables, installing core and **Xahaud** dependencies, and compiling the software, including the acquisition and setup of essential components like LLVM, Boost, WasmEdge, and Protobuf.\n\nThe steps explain why certain versions and configurations are needed to ensure compatibility and optimal performance. Ending with cloning the Xahau repository and creating the **Xahaud** target, which sets developers on the path to adding to or deploying the Xahau network.","src/content/docs/docs/infrastructure/building-xahau/index.mdx","5c1390f21ab5e2d2","docs/infrastructure/building-xahau/mac-os-13-5-2",{"id":383,"data":385,"body":390,"filePath":391,"digest":392,"deferredRender":14},{"title":386,"editUrl":14,"head":387,"template":16,"sidebar":388,"pagefind":14,"draft":18},"Mac OS - 15.3.2 (24D81)",[],{"hidden":18,"attrs":389},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"caution\">\nXahaud now supports building using Conan. We recommend using Conan to build the repository. The build instructions for Conan can be found in the [BUILD.md](https://github.com/Xahau/xahaud/blob/dev/BUILD.md) file in the source code.\n\u003C/Aside>\n\n## CMake Legacy Building\n\n| Dependency  | Working Versions |\n| ----------- | ---------------- |\n| Apple Clang | 14.3.1, 16.0.0   |\n| LLVM        | 14, 16           |\n| LLD         | 14, 16           |\n| Boost       | 1.86.0           |\n| CMake       | 3.23.1           |\n| Protobuf    | 3.20.0           |\n| WasmEdge    | 0.11.2           |\n\n### Using Apple Clang 14.3.1\n\n1. Download an older version of Xcode\n   1. Go to the [https://developer.apple.com/download/more/](https://developer.apple.com/download/more/) page. You will need to sign in with your Apple Developer account.\n   2. Search for the version of Xcode that includes Apple Clang 14. This is typically specified in the release notes for each Xcode version.\n   3. Download the Xcode \\`.xip\\` file for the version you need.\n2. Install the older version of Xcode:\n   1. Once the download is complete, extract the \\`.xip\\` file, which will give you an Xcode application.\n   2. Rename this Xcode application if you want to keep multiple versions of Xcode on your system (e.g., \\`Xcode_14.3.1.app\\`).\n   3. Drag the Xcode application to your \\`/Applications\\` directory.\n3. Switch to the desired version of the toolchain\n   1.  If you want to use the newly installed version of Xcode and its toolchain by default, you can switch to it using the \\`xcode-select\\` command:\n\n       ```\n       sudo xcode-select -s /Applications/Xcode_14.3.1.app/Contents/Developer\n       ```\n   2. Replace \\`Xcode_14.3.1.app\\` with the actual name of the Xcode version you installed.\n   3.  Open Terminal and run the following command to check the version of Clang:\n\n       `clang --version`\n\n\u003CAside type=\"tip\">\nIf you want to use a specific version of Apple Clang for command line builds you can use the following;\n\u003C/Aside>\n\n```\nexport DEVELOPER_DIR=/Applications/Xcode_14.3.1.app/Contents/Developer\nclang --version\n```\n\n### Set Build Env Variables\n\nFirst make a dependency directory. I like to use `~/dependencies`\n\n```\nmkdir ~/dependencies\n```\n\nNext we need to set the environment variables.\n\n### Set Version Env Variables\n\n```\nexport LLVM_VERSION=14\nexport BOOST_VERSION=1.86.0\nexport WASMEDGE_VERSION=0.11.2\nexport PROTOBUF_VERSION=3.20.0\n```\n\n### Set Build Env Variables\n\n```\nexport DEP_DIR=~/dependencies\nexport BOOST_FOLDER_NAME=\"boost_$(echo \"$BOOST_VERSION\" | sed 's/\\./_/g')\"\nexport BOOST_ROOT=\"$DEP_DIR/$BOOST_FOLDER_NAME\"\nexport BOOST_LIBRARY_DIRS=\"$BOOST_ROOT/libs\"\nexport BOOST_INCLUDE_DIR=\"$BOOST_ROOT/boost\"\nexport BOOST_CXXFLAGS=\"${BOOST_CXXFLAGS:-} -DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"\nexport LLVM_PREFIX=`brew --prefix llvm@$LLVM_VERSION`\nexport LLVM_DIR=\"$LLVM_PREFIX/lib/cmake/llvm\"\nexport LLVM_LIBRARY_DIR=\"$LLVM_PREFIX/lib\"\nexport LLD_DIR=\"$LLVM_PREFIX/lib/cmake/lld\"\nexport CC=clang\nexport CXX=clang++\nexport LDFLAGS=\"${LDFLAGS:-} -L$BOOST_LIBRARY_DIRS -L$LLVM_PREFIX/lib\"\nexport CPPFLAGS=\"${CPPFLAGS:-} -I$BOOST_ROOT/include -I$LLVM_PREFIX/include\"\nexport CFLAGS=\"${CFLAGS:-} -DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"\nexport CXXFLAGS=\"${CXXFLAGS:-} -DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"\n```\n\n### Install Core Dependencies\n\n```\nbrew update\nbrew install automake \\\n             wget \\\n             curl \\\n             git \\\n             pkg-config \\\n             openssl \\\n             autoconf \\\n             libtool \\\n             unzip \\\n             cmake \\\n             \"llvm@$LLVM_VERSION\"\n```\n\n### Install Rippled Dependencies\n\nInstall Protobuf\n\n```\ncd $DEP_DIR && \\\nwget -nc https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOBUF_VERSION/protobuf-all-$PROTOBUF_VERSION.tar.gz && \\\ntar -xzf protobuf-all-$PROTOBUF_VERSION.tar.gz && \\\ncd protobuf-$PROTOBUF_VERSION/ && \\\n./autogen.sh && \\\n./configure --disable-shared link=static && \\\nmake -j$(sysctl -n hw.logicalcpu) && \\\nsudo make install\n```\n\n\u003CAside type=\"tip\">\nNote that it's currently necessary to remove any homebrew installations of protobuf otherwise cmake will mix up both installations. There would of course be better workarounds for this, but simply removing the homebrew installations is a quick fix.\n\u003C/Aside>\n\nInstall Boost\n\n```\ncd $DEP_DIR && \\\nwget https://archives.boost.io/release/$BOOST_VERSION/source/$BOOST_FOLDER_NAME.tar.gz && \\\ntar -xvzf $BOOST_FOLDER_NAME.tar.gz && \\\ncd $BOOST_FOLDER_NAME && \\\n./bootstrap.sh && \\\n./b2 -j$(sysctl -n hw.logicalcpu)\n```\n\nInstall WasmEdge\n\n```\ncd $DEP_DIR && \\\nwget -nc -q https://github.com/WasmEdge/WasmEdge/archive/refs/tags/$WASMEDGE_VERSION.zip && \\\nunzip -o $WASMEDGE_VERSION.zip && \\\ncd WasmEdge-$WASMEDGE_VERSION && \\\nsed -i '' \\\n  's|https://boostorg\\.jfrog\\.io/artifactory/main/release/|https://archives.boost.io/release/|g' CMakeLists.txt && \\\nmkdir build && \\\ncd build && \\\ncmake -DCMAKE_BUILD_TYPE=Release \\\n  -DWASMEDGE_BUILD_SHARED_LIB=OFF \\\n  -DWASMEDGE_BUILD_STATIC_LIB=ON \\\n  -DWASMEDGE_BUILD_AOT_RUNTIME=ON \\\n  -DWASMEDGE_FORCE_DISABLE_LTO=ON \\\n  -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\\n  -DWASMEDGE_LINK_LLVM_STATIC=ON \\\n  -DWASMEDGE_BUILD_PLUGINS=OFF \\\n  -DWASMEDGE_LINK_TOOLS_STATIC=ON \\\n  .. && \\\nmake -j$(sysctl -n hw.logicalcpu) && \\\nsudo make install\n```\n\n### Clone the repository\n\n```\nmkdir ~/projects && \\\ncd ~/projects && \\\ngit clone https://github.com/Xahau/xahaud.git && \\\ncd xahaud && \\\ngit checkout dev\n```\n\n### Build Xahaud\n\nFrom the root `xahaud` directory:\n\n```shellscript\nmkdir build && \\\ncd build && \\\ncmake -DCMAKE_BUILD_TYPE=Debug -DLLVM_DIR=$LLVM_DIR -DLLVM_LIBRARY_DIR=$LLVM_LIBRARY_DIR .. && \\\ncmake --build . --target rippled --parallel -j$(sysctl -n hw.logicalcpu)\n```\n\nStart the built node\n\n```\n./rippled\n```","src/content/docs/docs/infrastructure/building-xahau/mac-os-13-5-2.mdx","e0082979cc48f995","docs/protocol-reference/ledger-data",{"id":393,"data":395,"body":400,"filePath":401,"digest":402,"deferredRender":14},{"title":396,"editUrl":14,"head":397,"template":16,"sidebar":398,"pagefind":14,"draft":18},"Ledger Data",[],{"hidden":18,"attrs":399},{},"Each ledger version in the XRP Ledger is made up of three parts:\n\n* **Ledger Header**: Metadata about this ledger version itself.\n* **Transaction Set**: All the transactions that were executed to create this ledger version.\n* **State Data**: The complete record of objects representing accounts, settings, and balances as of this ledger version. (This is also called the \"account state\".)\n\n### State Data\n\nEach ledger version's state data is a set of **ledger objects**, sometimes called _ledger entries_, which collectively represent all settings, balances, and relationships at a given point in time. To store or retrieve an object in the state data, the protocol uses that object's unique [**Ledger Object ID**](ledger-object-ids.md).\n\nIn the peer protocol, ledger objects have a [canonical binary format](../binary-format.md). In `xahaud` APIs, ledger objects are represented as JSON objects.\n\nA ledger object's data fields depend on the type of object; the Xahau Ledger supports the following types:\n\n* [Ledger Header](ledger-header.md)\n* [Ledger Entry Common Fields](ledger-object-ids.md)\n* [Ledger Entry Types](ledger-objects-types/)","src/content/docs/docs/protocol-reference/ledger-data/index.mdx","c5de640da9e7d124","docs/protocol-reference/ledger-data/ledger-object-ids",{"id":403,"data":405,"body":410,"filePath":411,"digest":412,"deferredRender":14},{"title":406,"editUrl":14,"head":407,"template":16,"sidebar":408,"pagefind":14,"draft":18},"Ledger Object IDs",[],{"hidden":18,"attrs":409},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/Indexes.cpp)\n\nEach object in a ledger's state data has a unique ID. The ID is derived by hashing important contents of the object, along with a [namespace identifier](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/LedgerFormats.h#L99). The ledger object type determines which namespace identifier to use and which contents to include in the hash. This ensures every ID is unique. To calculate the hash, `xahaud` uses SHA-512 and then truncates the result to the first 256 bits. This algorithm, informally called **SHA-512Half**, provides an output that has comparable security to SHA-256, but runs faster on 64-bit processors.\n\nGenerally, a ledger object's ID is returned as the `index` field in JSON, at the same level as the object's contents. In transaction metadata, the ledger object's ID in JSON is `LedgerIndex`.\n\n**Tip:** The `index` or `LedgerIndex` field of an object in the ledger is the ledger object ID. This is not the same as a \\[ledger index]\\[].\n\ninclude_svg(\"img/ledger-object-ids.svg\", \"Diagram: xahaud uses SHA-512Half to generate IDs for ledger objects. The space key prevents IDs for different object types from colliding.\")\n\n### Flags \u003Ca href=\"#flags\" id=\"flags\">\u003C/a>\n\nFlags are on/off settings, which are represented as binary values that are combined into a single number using bitwise-OR operations. The bit values for the flags in ledger entries are different than the values used to enable or disable those flags in a transaction. Ledger state flags have names that begin with **`lsf`**.\n\nThe possible values for the flags field vary based on the ledger entry type. Some ledger entry types have no flags defined. In these cases, the `Flags` field always has the value `0`.\n\n### See Also\n\n* For more information how Xahau creates and uses hashes, see Hashes.\n* For ledger basics, see Ledgers.","src/content/docs/docs/protocol-reference/ledger-data/ledger-object-ids.mdx","3046466b1301c2b8","docs/protocol-reference/data-types/currency-formats",{"id":413,"data":415,"body":420,"filePath":421,"digest":422,"deferredRender":14},{"title":416,"editUrl":14,"head":417,"template":16,"sidebar":418,"pagefind":14,"draft":18},"Currency Formats",[],{"hidden":18,"attrs":419},{},"Xahau has two kinds of digital asset: XAH and tokens. Both types have high precision, although their formats are different.\n\n### Comparison\n\nThe following table summarizes some of the differences between XAH and tokens in Xahau:\n\n| XAH                                                                                  | Tokens                                                                                         |\n| ------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------- |\n| Has no issuer.                                                                       | Always issued by a Xahau account.                                                              |\n| Specified as a string.                                                               | Specified as an object.                                                                        |\n| Tracked in accounts.                                                                 | Tracked in trust lines.                                                                        |\n| Can never be created; can only be destroyed.                                         | Can be issued or redeemed freely.                                                              |\n| Minimum value: `0`. (Cannot be negative.)                                            | Minimum value: `-9999999999999999e80`. Minimum nonzero absolute value: `1000000000000000e-96`. |\n| Maximum value `100000000000` (1011) XAH. That's `100000000000000000` (1017) \"drops\". | Maximum value `9999999999999999e80`.                                                           |\n| Precise to the nearest \"drop\" (0.000001 XAH)                                         | 15 decimal digits of precision.                                                                |\n| Can't be frozen.                                                                     | The issuer can freeze balances.                                                                |\n| No transfer fees; XAH-to-XAH payments are always direct.                             | Can take indirect paths with each issuer charging a percentage transfer fee.                   |\n| Can be used in Payment Channels and Escrow.                                          | Can be used with Payment Channels or Escrow.                                                   |\n\nFor more information, see What is XAH? and Tokens.\n\n### Specifying Currency Amounts\n\nUse the appropriate format for the type of currency you want to specify:\n\n* XAH Amounts\n* Token Amounts\n\n#### XAH Amounts\n\nTo specify an amount of XAH, use a String Number indicating _drops_ of XAH, where each drop is equal to 0.000001 XAH. For example, to specify 13.1 XAH:\n\n```\n\"13100000\"\n```\n\n**Do not specify XAH as an object.**\n\nXAH amounts cannot be negative.\n\n#### Token Amounts\n\nTo specify an amount of a (fungible) token, use an Amount object. This is a JSON object with three fields:\n\n| `Field`    | Type                   | Description                                                                                                                                                                                                                                                                                                       |\n| ---------- | ---------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `currency` | String - Currency Code | Arbitrary currency code for the token. Cannot be XAH.                                                                                                                                                                                                                                                             |\n| `value`    | String Number          | Quoted decimal representation of the amount of the token. This can include scientific notation, such as `1.23e11` meaning 123,000,000,000. Both `e` and `E` may be used. This can be negative when displaying balances, but negative values are disallowed in other contexts such as specifying how much to send. |\n| `issuer`   | String                 | Generally, the account that issues this token. In special cases, this can refer to the account that holds the token instead (for example, in a Clawback transaction).                                                                                                                                             |\n\n**Caution:** These field names are case-sensitive.\n\nFor example, to represent $153.75 US dollars issued by account `r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59`, you would specify:\n\n```json\n{\n    \"currency\": \"USD\",\n    \"value\": \"153.75\",\n    \"issuer\": \"r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59\"\n}\n```\n\n#### Specifying Without Amounts\n\nIn some cases, you need to define an asset (which could be XAH or a token) without a specific amount, such as when defining an order book in the decentralized exchange.\n\nTo describe a token without an amount, specify it as a currency object, but omit the `value` field. For example:\n\n```json\n{\n  \"currency\": \"TST\",\n  \"issuer\": \"rP9jPyP5kyvFRb6ZiRghAGw5u8SGAmU4bd\"\n}\n```\n\nTo describe XAH without an amount, specify it as a JSON object with _only_ a `currency` field. Never include an `issuer` field for XAH. For example:\n\n```json\n{\n  \"currency\": \"XAH\"\n}\n```\n\n### String Numbers\n\n### XAH Precision\n\nXAH has the same precision as a 64-bit unsigned integer where each unit is equivalent to 0.000001 XAH. It uses integer math, so that any amount less than a full drop is rounded down.\n\n### Token Precision\n\nTokens can represent a wide variety of assets, including those typically measured in very small or very large denominations. This format uses significant digits and a power-of-ten exponent in a similar way to scientific notation. The format supports positive and negative significant digits and exponents within the specified range. Unlike typical floating-point representations of non-whole numbers, this format uses integer math for all calculations, so it always maintains 15 decimal digits of precision. Multiplication and division have adjustments to compensate for over-rounding in the least significant digits.\n\nWhen sending token amounts in Xahau's peer-to-peer network, servers serialize the amount to a 64-bit binary value.\n\n**Tip:** For tokens that should not be divisible at all, see Non-Fungible Tokens (NFTs).\n\n### Currency Codes\n\n#### Standard Currency Codes\n\nThe standard format for currency codes is a three-character string such as `USD`. This is intended for use with [ISO 4217 Currency Codes](https://www.xe.com/iso4217.php). The following rules apply:\n\n* Currency codes must be exactly 3 ASCII characters in length. The following characters are permitted: all uppercase and lowercase letters, digits, as well as the symbols `?`, `!`, `@`, `#`, `$`, `%`, `^`, `&`, `*`, `\u003C`, `>`, `(`, `)`, `{`, `}`, `[`, `]`, and `|`.\n* Currency codes are case-sensitive.\n* The currency code XAH (all-uppercase) is disallowed. Real XAH typically does not use a currency code in Xahau's protocol.\n\nAt the protocol level, this format is serialized into a 160-bit binary value starting with `0x00`.\n\n#### Nonstandard Currency Codes\n\nYou can also use a 160-bit (40-character) hexadecimal string such as `015841551A748AD2C1F76FF6ECB0CCCD00000000` as the currency code. To prevent this from being treated as a \"standard\" currency code, the first 8 bits MUST NOT be `0x00`.\n\n**Deprecated:** Some previous versions of [ripple-lib](https://github.com/XRPLF/xrpl.js) supported an \"interest-bearing\" or \"demurraging\" currency code type. These codes have the first 8 bits `0x01`. Demurraging / interest-bearing currencies are no longer supported, but you may find them in ledger data. For more information, see Demurrage.","src/content/docs/docs/protocol-reference/data-types/currency-formats.mdx","7064fcf25c45003a","docs/protocol-reference/ledger-data/ledger-header",{"id":423,"data":425,"body":430,"filePath":431,"digest":432,"deferredRender":14},{"title":426,"editUrl":14,"head":427,"template":16,"sidebar":428,"pagefind":14,"draft":18},"Ledger Header",[],{"hidden":18,"attrs":429},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/ledger/ReadView.h#L71)\n\nEvery ledger version has a unique header that describes the contents. You can look up a ledger's header information with the \\[ledger method]\\[]. The contents of the ledger header are as follows:\n\n| Field                   | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                      |\n| ----------------------- | --------- | ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `ledger_index`          | String    | UInt32              | The \\[ledger index]\\[Ledger Index] of the ledger. Some API methods display this as a quoted integer; some display it as a native JSON number.                                                                                                                    |\n| `ledger_hash`           | String    | Hash256             | The \\[SHA-512Half]\\[] of this ledger version. This serves as a unique identifier for this ledger and all its contents.                                                                                                                                           |\n| `account_hash`          | String    | Hash256             | The \\[SHA-512Half]\\[] of this ledger's state tree information.                                                                                                                                                                                                   |\n| `close_time`            | Number    | UInt32              | The approximate time this ledger version closed, as the number of seconds since the Ripple Epoch of 2000-01-01 00:00:00. This value is rounded based on the `close_time_resolution`.                                                                             |\n| `closed`                | Boolean   | Boolean             | If `true`, this ledger version is no longer accepting new transactions. (However, unless this ledger version is validated, it might be replaced by a different ledger version with a different set of transactions.)                                             |\n| `parent_hash`           | String    | Hash256             | The `ledger_hash` value of the previous ledger version that is the direct predecessor of this one. If there are different versions of the previous ledger index, this indicates from which one the ledger was derived.                                           |\n| `total_coins`           | String    | UInt64              | The total number of \\[drops of XAH]\\[] owned by accounts in the ledger. This omits XAH that has been destroyed by transaction fees. The actual amount of XAH in circulation is lower because some accounts are \"black holes\" whose keys are not known by anyone. |\n| `transaction_hash`      | String    | Hash256             | The \\[SHA-512Half]\\[] of the transactions included in this ledger.                                                                                                                                                                                               |\n| `close_time_resolution` | Number    | Uint8               | An integer in the range \\[2,120] indicating the maximum number of seconds by which the `close_time` could be rounded.                                                                                                                                            |\n| `closeFlags`            | (Omitted) | UInt8               | A bit-map of flags relating to the closing of this ledger.                                                                                                                                                                                                       |\n\n### Ledger Index\n\n### Close Flags\n\nThe ledger has only one flag defined for `closeFlags`: **`sLCF_NoConsensusTime`** (value `1`). If this flag is enabled, it means that validators had different close times for the ledger, but built otherwise the same ledger, so they declared consensus while \"agreeing to disagree\" on the close time. In this case, official `close_time` value of the ledger is 1 second after that of the parent ledger.\n\nThe `closeFlags` field is not included in any JSON representations of a ledger, but is included in the binary representation of a ledger, and is one of the fields that determine the ledger's hash.\n\n### See Also\n\nFor ledger basics, see Ledgers.","src/content/docs/docs/protocol-reference/ledger-data/ledger-header.mdx","56e3d518c676b2e7","docs/infrastructure/building-xahau/ubuntu-22-04",{"id":433,"data":435,"body":440,"filePath":441,"digest":442,"deferredRender":14},{"title":436,"editUrl":14,"head":437,"template":16,"sidebar":438,"pagefind":14,"draft":18},"Ubuntu - 22.04",[],{"hidden":18,"attrs":439},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"caution\">\nXahaud now supports building using Conan. We recommend using Conan to build the repository. The build instructions for Conan can be found in the [BUILD.md](https://github.com/Xahau/xahaud/blob/dev/BUILD.md) file in the source code.\n\u003C/Aside>\n\n## CMake Legacy Building\n\n| Dependency | Working Version |\n| ---------- | --------------- |\n| GCC / G++  | 14.0.3          |\n| LLVM       | 14.0.3          |\n| LLD        | 14.0.3          |\n| Boost      | 1.86.0          |\n| CMake      | 3.23.1          |\n| Protobuf   | 3.20.0          |\n| WasmEdge   | 0.11.2          |\n\n### Set Build Env Variables\n\nFirst make a dependency directory. I like to use `~/dependencies`\n\n```\nmkdir ~/dependencies\n```\n\nNext we need to set the environment variables.\n\n### Set Versions Env Variables\n\n\u003CAside type=\"caution\">\nIf you are using Ubuntu 20.04 change the \\`UBUNTU_VERSION=focal\\`\n\u003C/Aside>\n\n```\nexport UBUNTU_VERSION=jammy\nexport LLVM_VERSION=14\nexport CMAKE_VERSION=3.23.1\nexport BOOST_VERSION=1.86.0\nexport WASMEDGE_VERSION=0.11.2\nexport PROTOBUF_VERSION=3.20.0\n```\n\n### Set Build Env Variables\n\n```\nexport DEP_DIR=~/dependencies\nexport BOOST_FOLDER_NAME=\"boost_$(echo \"$BOOST_VERSION\" | sed 's/\\./_/g')\"\nexport BOOST_ROOT=$DEP_DIR/$BOOST_FOLDER_NAME\nexport Boost_LIBRARY_DIRS=$BOOST_ROOT/libs\nexport BOOST_INCLUDEDIR=$BOOST_ROOT/boost\nexport Boost_INCLUDE_DIRS=$BOOST_ROOT/boost\nexport LLVM_DIR=/usr/lib/llvm-$LLVM_VERSION/lib/cmake/llvm\nexport LLVM_LIBRARY_DIR=/usr/lib/llvm-$LLVM_VERSION/lib\nexport LLD_DIR=/usr/lib/llvm-$LLVM_VERSION/lib/cmake/lld\nexport CC=gcc\nexport CXX=g++\nexport CFLAGS=\"-DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"\nexport CXXFLAGS=\"-DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"\nexport BOOST_CXXFLAGS=\"-DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"\nexport LDFLAGS=\"-L$BOOST_ROOT/lib\"\nexport CPPFLAGS=\"-I$BOOST_ROOT/include\"\nexport LDFLAGS=\"-L/usr/lib/llvm-$LLVM_VERSION/lib\"\nexport CPPFLAGS=\"-I/usr/lib/llvm-$LLVM_VERSION/include\"\n```\n\n### Install Core Dependencies\n\n```\napt update && \\\napt install -y build-essential software-properties-common wget curl git pkg-config zlib1g-dev libssl-dev autoconf libtool unzip gcc g++ ninja-build && \\\nwget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc && \\\nadd-apt-repository \"deb http://apt.llvm.org/$UBUNTU_VERSION/ llvm-toolchain-$UBUNTU_VERSION-$LLVM_VERSION main\" && \\\nadd-apt-repository ppa:deadsnakes/ppa && \\\napt-cache policy python3.9 && \\\napt install -y python3.9 python3-pip llvm-$LLVM_VERSION-dev liblld-$LLVM_VERSION-dev libpolly-$LLVM_VERSION-dev\n```\n\n\u003CAside type=\"caution\">\nTo Resolve the \\``E: The repository 'http://apt.llvm.org/ llvm-toolchain-- Release` error:\n\u003C/Aside>\n\n```\nsudo nano /etc/apt/sources.list\n# Scroll down and remove\ndeb http://apt.llvm.org/ llvm-toolchain-- main\n# Add the apt-repo directly with add-apt-repository \"deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-14 main\"\n```\n\n### Install Xahaud Dependencies\n\nInstall CMake\n\n```\ncd $DEP_DIR && \\\nwget https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.sh && \\\nsudo sh cmake-$CMAKE_VERSION-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir\n```\n\nInstall Protobuf\n\n```\ncd $DEP_DIR && \\\nwget -nc https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOBUF_VERSION/protobuf-all-$PROTOBUF_VERSION.tar.gz && \\\ntar -xzf protobuf-all-$PROTOBUF_VERSION.tar.gz && \\\ncd protobuf-$PROTOBUF_VERSION/ && \\\n./autogen.sh && \\\n./configure --prefix=/usr --disable-shared link=static && \\\nmake -j$(nproc) && \\\nsudo make install\n```\n\nInstall Boost\n\n```\ncd $DEP_DIR && \\\nwget https://boostorg.jfrog.io/artifactory/main/release/$BOOST_VERSION/source/$BOOST_FOLDER_NAME.tar.gz && \\\ntar -xvzf $BOOST_FOLDER_NAME.tar.gz && \\\ncd $BOOST_FOLDER_NAME && \\\n./bootstrap.sh && \\\n./b2 -j$(nproc)\n```\n\nInstall WasmEdge\n\n```\ncd $DEP_DIR && \\\nwget -nc -q https://github.com/WasmEdge/WasmEdge/archive/refs/tags/$WASMEDGE_VERSION.zip && \\\nunzip -o $WASMEDGE_VERSION.zip && \\\ncd WasmEdge-$WASMEDGE_VERSION && \\\nmkdir build && \\\ncd build && \\\ncmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_SHARED_LIB=OFF -DWASMEDGE_BUILD_STATIC_LIB=ON -DWASMEDGE_BUILD_AOT_RUNTIME=ON -DWASMEDGE_FORCE_DISABLE_LTO=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DWASMEDGE_LINK_LLVM_STATIC=ON -DWASMEDGE_BUILD_PLUGINS=OFF -DWASMEDGE_LINK_TOOLS_STATIC=ON .. && \\\nmake -j$(nproc) && \\\nsudo make install\n```\n\n### Clone the repository\n\n```\nmkdir ~/projects && \\\ncd ~/projects && \\\ngit clone https://github.com/Xahau/xahaud.git && \\\ncd xahaud && \\\ngit checkout dev\n```\n\n### Build Xahaud\n\nFrom the root `xahaud` directory:\n\n```shellscript\nmkdir build && \\\ncd build && \\\ncmake -DCMAKE_BUILD_TYPE=Debug -DLLVM_DIR=$LLVM_DIR -DLLVM_LIBRARY_DIR=$LLVM_LIBRARY_DIR .. && \\\ncmake --build . --target rippled --parallel -j$(nproc)\n```\n\nStart the built node\n\n```\n./rippled\n```","src/content/docs/docs/infrastructure/building-xahau/ubuntu-22-04.mdx","ba16a92b38ddf511","docs/protocol-reference/data-types/base-58-encodings",{"id":443,"data":445,"body":450,"filePath":451,"digest":452,"deferredRender":14},{"title":446,"editUrl":14,"head":447,"template":16,"sidebar":448,"pagefind":14,"draft":18},"Base 58 Encodings",[],{"hidden":18,"attrs":449},{},"Xahau APIs often use a \"base58\" encoding with a checksum (sometimes called \"Base58Check\") to represent account addresses and other types of values related to cryptographic keys. This encoding is the same as [the one used for Bitcoin addresses](https://en.bitcoin.it/wiki/Base58Check_encoding), except that Xahau uses the following dictionary: `rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz`.\n\nXahau prefixes different types of values with a specific 8-bit number before encoding them to distinguish between different data types. With the arrangement of characters in Xahau's base58 dictionary, the result is that the base58 representations for different types of encoded values start with specific letters by type.\n\nThe following table lists all the encodings Xahau uses:\n\n| Data Type                                | Starts With | Type Prefix | Content size¹ | Maximum characters |\n| ---------------------------------------- | ----------- | ----------- | ------------- | ------------------ |\n| Account address                          | r           | `0x00`      | 20 bytes      | 35                 |\n| Account public key                       | a           | `0x23`      | 33 bytes      | 53                 |\n| Seed value (for secret keys)             | s           | `0x21`      | 16 bytes      | 29                 |\n| Validation public key or node public key | n           | `0x1C`      | 33 bytes      | 53                 |\n\n¹ Content size excludes the 1-byte type prefix.\n\n### See Also\n\n* Address Encoding - detailed information on address encoding\n* Cryptographic Keys - types of cryptographic keys in Xahau and how they're used\n* \\[wallet_propose Reference]\\[wallet_propose method] - API method for generating account keys\n* \\[validation_create Reference]\\[validation_create method] - API method for generating validator keys","src/content/docs/docs/protocol-reference/data-types/base-58-encodings.mdx","f2143fa1e9609976","docs/protocol-reference/data-types",{"id":453,"data":455,"body":460,"filePath":461,"digest":462,"deferredRender":14},{"title":456,"editUrl":14,"head":457,"template":16,"sidebar":458,"pagefind":14,"draft":18},"Data Types",[],{"hidden":18,"attrs":459},{},"Different types of objects are uniquely identified in different ways:\n\nAccounts are identified by their Address, for example `\"r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59\"`. Addresses always start with \"r\". Many `rippled` methods also accept a hexadecimal representation.\n\nTransactions are identified by a Hash of the transaction's binary format. You can also identify a transaction by its sending account and Sequence Number.\n\nEach closed Ledger has a Ledger Index and a Hash value. When \\[Specifying Ledgers]\\[] you can use either one.\n\n### Addresses\n\n### Hashes\n\n#### Hash Prefixes\n\n[\\[Source\\]](https://github.com/Xahau/xahaud/blob/master/src/ripple/protocol/HashPrefix.h)\n\nIn many cases, Xahau prefixes an object's binary data with a 4-byte code before calculating its hash, so that objects of different types have different hashes even if their binary formats are the same. The existing 4-byte codes are structured as three alphabetic characters, encoded as ASCII, followed by a zero byte.\n\nSome types of hash appear in API requests and responses. Others are only calculated as the first step of signing a certain type of data, or calculating a higher-level hash. The following table shows all 4-byte hash prefixes Xahau uses:\n\n| Object Type                           | API Fields                       | Hash Prefix (Hex) | Hash Prefix (Text) |\n| ------------------------------------- | -------------------------------- | ----------------- | ------------------ |\n| Consensus proposal                    | N/A                              | `0x50525000`      | `PRP\\0`            |\n| Ledger Version                        | `ledger_hash`                    | `0x4C575200`      | `LWR\\0`            |\n| Ledger state data                     | `account_state` in ledger header | `0x4D4C4E00`      | `MLN\\0`            |\n| Ledger data inner node                | N/A                              | `0x4D494E00`      | `MIN\\0`            |\n| Ledger data inner node (SHAMapv2)     | N/A                              | `0x494E5200`      | `INR\\0`            |\n| Payment Channel Claim                 | N/A                              | `0x434C4D00`      | `CLM\\0`            |\n| Signed Transaction                    | `hash` of transactions           | `0x54584E00`      | `TXN\\0`            |\n| Transaction with metadata             | N/A                              | `0x534E4400`      | `SND\\0`            |\n| Unsigned Transaction (Single-signing) | N/A                              | `0x53545800`      | `STX\\0`            |\n| Unsigned Transaction (Multi-signing)  | N/A                              | `0x534D5400`      | `SMT\\0`            |\n| Validation vote                       | N/A                              | `0x56414C00`      | `VAL\\0`            |\n| Validator manifest                    | N/A                              | `0x4D414E00`      | `MAN\\0`            |\n\nLedger objects IDs are calculated in a similar way, but they use a 2-byte prefix called a \"space key\" instead of a prefix in the form described here.\n\n### Account Sequence\n\n### Ledger Index\n\n#### Specifying Ledgers\n\nMany API methods require you to specify an instance of the ledger, with the data retrieved being considered up-to-date as of that particular version of the shared ledger. The commands that accept a ledger version all work the same way. There are three ways you can specify which ledger you want to use:\n\n1.  Specify a ledger by its Ledger Index in the `ledger_index` parameter. Each closed ledger has a ledger index that is 1 higher than the previous ledger. (The very first ledger had ledger index 1.)\n\n    ```\n     \"ledger_index\": 61546724\n    ```\n2.  Specify a ledger by its Hash value in the `ledger_hash` parameter.\n\n    ```\n     \"ledger_hash\": \"8BB204CE37CFA7A021A16B5F6143400831C4D1779E6FE538D9AC561ABBF4A929\"\n    ```\n3. Specify a ledger by one of the following shortcuts, in the `ledger_index` parameter:\n   *   `validated` for the most recent ledger that has been validated by consensus\n\n       ```\n         \"ledger_index\": \"validated\"\n       ```\n   * `closed` for the most recent ledger that has been closed for modifications and proposed for validation\n   * `current` for the server's current working version of the ledger.\n\nThere is also a deprecated `ledger` parameter which accepts any of the above three formats. _Do not_ use this parameter; it may be removed without further notice.\n\nIf you do not specify a ledger, the server decides which ledger to use to serve the request. By default, the server chooses the `current` (in-progress) ledger. In Reporting Mode, the server uses the most recent validated ledger instead. Do not provide more than one field specifying ledgers.\n\n**Note:** Do not rely on the default behavior for specifying a ledger; it is subject to change. Always specify a ledger version in the request if you can.\n\nReporting Mode does not record ledger data until it has been validated. If you make a request to a Reporting Mode server for the `current` or `closed` ledger, the server forwards the request to a P2P Mode server. If you request a ledger index or hash that is not validated, a Reporting Mode server responds with a `lgrNotFound` error.\n\n### Specifying Currency Amounts\n\nThere are two kinds of currencies in Xahau: XAH and tokens. These two types of currencies are specified in different formats, with different precision and rounding behavior.\n\nSome fields, such as the destination `Amount` of a \\[Payment transaction]\\[], can be either type. Some fields only accept XAH specifically, such as the `Fee` field (transaction cost).\n\nXAH is specified as a string containing an integer number of \"drops\" of XAH, where 1 million drops equals 1 XAH. Tokens are instead specified as an object with fields for the decimal amount, currency code, and issuer. For example:\n\n*   **XAH** - To specify an `Amount` field with a value of 13.1 XAH:\n\n    ```\n      \"Amount\": \"13100000\"\n    ```\n*   **Token** - To specify an `Amount` field with a value of 13.1 FOO issued by or to `rf1B...`:\n\n    ```\n      \"Amount\": {\n          \"value\": \"13.1\",\n          \"currency\": \"FOO\",\n          \"issuer\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\"\n      }\n    ```\n\nFor more information, see Currency Formats.\n\n### Specifying Time\n\nThe `xahaud` server and its APIs represent time as an unsigned integer. This number measures the number of seconds since the \"Ripple Epoch\" of January 1, 2000 (00:00 UTC). This is like the way the [Unix epoch](http://en.wikipedia.org/wiki/Unix_time) works, except the Ripple Epoch is 946684800 seconds after the Unix Epoch.\n\nDon't convert Ripple Epoch times to UNIX Epoch times in 32-bit variables: this could lead to integer overflows.","src/content/docs/docs/protocol-reference/data-types/index.mdx","1937676ef229b273","docs/protocol-reference/transactions",{"id":463,"data":465,"body":470,"filePath":471,"digest":472,"deferredRender":14},{"title":466,"editUrl":14,"head":467,"template":16,"sidebar":468,"pagefind":14,"draft":18},"Transactions",[],{"hidden":18,"attrs":469},{},"## Transaction Reference\n\nA _Transaction_ is the only way to cause changes in Xahau. Transactions' outcomes are only final if signed, submitted, and accepted into a validated ledger version following the consensus process. Some ledger rules also generate _pseudo-transactions_, which aren't signed or submitted, but still must be accepted by consensus. Transactions that fail are also included in ledgers because they modify balances of XAH to pay for the anti-spam \\[transaction cost]\\[].","src/content/docs/docs/protocol-reference/transactions/index.mdx","08bab5b74ecd9e8d","docs/protocol-reference/transactions/transaction-common-fields",{"id":473,"data":475,"body":480,"filePath":481,"digest":482,"deferredRender":14},{"title":476,"editUrl":14,"head":477,"template":16,"sidebar":478,"pagefind":14,"draft":18},"Transaction Common Fields",[],{"hidden":18,"attrs":479},{},"Every transaction has the same set of common fields, plus additional fields based on the transaction type. Field names are case-sensitive. The common fields for all transactions are:\n\n| Field                | JSON Type        | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                                                                                                |\n| -------------------- | ---------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `Account`            | String           | AccountID           | _(Required)_ The unique address of the account that initiated the transaction.                                                                                                                                                                                                                                                             |\n| `TransactionType`    | String           | UInt16              | _(Required)_ The type of transaction. Valid transaction types include: `Payment`, `OfferCreate`, `TrustSet`, and many others.                                                                                                                                                                                                              |\n| `Fee`                | String           | Amount              | _(Required; auto-fillable)_ Integer amount of XAH, in drops, to be destroyed as a cost for distributing this transaction to the network. Some transaction types have different minimum requirements. See \\[Transaction Cost]\\[] for details.                                                                                               |\n| `Sequence`           | Number           | UInt32              | _(Required; auto-fillable)_ The sequence number of the account sending the transaction. A transaction is only valid if the `Sequence` number is exactly 1 greater than the previous transaction from the same account. The special case `0` means the transaction is using a Ticket instead _(Added by the \\[TicketBatch amendment]\\[].)_. |\n| `AccountTxnID`       | String           | Hash256             | _(Optional)_ Hash value identifying another transaction. If provided, this transaction is only valid if the sending account's previously-sent transaction matches the provided hash.                                                                                                                                                       |\n| `Flags`              | Number           | UInt32              | _(Optional)_ Set of bit-flags for this transaction.                                                                                                                                                                                                                                                                                        |\n| `LastLedgerSequence` | Number           | UInt32              | _(Optional; strongly recommended)_ Highest ledger index this transaction can appear in. Specifying this field places a strict upper limit on how long the transaction can wait to be validated or rejected. See Reliable Transaction Submission for more details.                                                                          |\n| `Memos`              | Array of Objects | Array               | _(Optional)_ Additional arbitrary information used to identify this transaction.                                                                                                                                                                                                                                                           |\n| `NetworkID`          | Number           | UInt32              | _(Network-specific)_ The network ID of the chain this transaction is intended for. **MUST BE OMITTED** for Mainnet and some test networks. **REQUIRED** on chains whose network ID is 1025 or higher.                                                                                                                                      |\n| `Signers`            | Array            | Array               | _(Optional)_ Array of objects that represent a multi-signature which authorizes this transaction.                                                                                                                                                                                                                                          |\n| `SourceTag`          | Number           | UInt32              | _(Optional)_ Arbitrary integer used to identify the reason for this payment, or a sender on whose behalf this transaction is made. Conventionally, a refund should specify the initial payment's `SourceTag` as the refund payment's `DestinationTag`.                                                                                     |\n| `SigningPubKey`      | String           | Blob                | _(Automatically added when signing)_ Hex representation of the public key that corresponds to the private key used to sign this transaction. If an empty string, indicates a multi-signature is present in the `Signers` field instead.                                                                                                    |\n| `TicketSequence`     | Number           | UInt32              | _(Optional)_ The sequence number of the ticket to use in place of a `Sequence` number. If this is provided, `Sequence` must be `0`. Cannot be used with `AccountTxnID`.                                                                                                                                                                    |\n| `TxnSignature`       | String           | Blob                | _(Automatically added when signing)_ The signature that verifies this transaction as originating from the account it says it is from.                                                                                                                                                                                                      |\n| `EmitDetails`        | Object           | Object              | Contains details about the emission. This includes the generation of the emission, the burden of the emission, the callback address, the hash of the hook that emitted the transaction, the nonce of the emission, and the ID of the parent transaction.                                                                                   |\n| `HookParameters`     | Array            | Array               | The hook parameters of the tx.                                                                                                                                                                                                                                                                                                             |\n\n\\[Removed in: rippled 0.28.0]\\[]: The `PreviousTxnID` field of transactions was replaced by the `AccountTxnID` field. This String / Hash256 field is present in some historical transactions. This is unrelated to the field also named `PreviousTxnID` in some ledger objects.\n\n### AccountTxnID\n\nThe `AccountTxnID` field lets you chain your transactions together, so that a current transaction is not valid unless the previous transaction sent from the same account has a specific \\[transaction hash]\\[identifying hash].\n\nUnlike the `PreviousTxnID` field, which tracks the last transaction to _modify_ an account (regardless of sender), the `AccountTxnID` tracks the last transaction _sent by_ an account. To use `AccountTxnID`, you must first enable the `asfAccountTxnID` flag, so that the ledger keeps track of the ID for the account's previous transaction. (`PreviousTxnID`, by comparison, is always tracked.)\n\nOne situation in which this is useful is if you have a primary system for submitting transactions and a passive backup system. If the passive backup system becomes disconnected from the primary, but the primary is not fully dead, and they both begin operating at the same time, you could potentially have serious problems like some transactions sending twice and others not at all. Chaining your transactions together with `AccountTxnID` ensures that, even if both systems are active, only one of them can submit valid transactions at a time.\n\nThe `AccountTxnID` field cannot be used on transactions that use Tickets. Transactions that use `AccountTxnID` cannot be placed in the transaction queue.\n\n### Auto-fillable Fields\n\nSome fields can be automatically filled in before a transaction is signed, either by a `xahaud` server or by a client library. Auto-filling values requires an active connection to Xahau to get the latest state, so it cannot be done offline. The details can vary by library, but auto-filling always provides suitable values for at least the following fields:\n\n*   `Fee` - Automatically fill in the \\[Transaction Cost]\\[] based on the network.\n\n    **Note:** When using `xahaud`'s \\[sign command]\\[], you can limit the maximum possible auto-filled value, using the `fee_mult_max` and `fee_mult_div` parameters.)\n* `Sequence` - Automatically use the next sequence number for the account sending the transaction.\n\nFor a production system, we recommend _not_ leaving these fields to be filled by the server. For example, if transaction costs become high due to a temporary spike in network load, you may want to wait for the cost to decrease before sending some transactions, instead of paying the temporarily-high cost.\n\nThe `Paths` field of the \\[Payment transaction]\\[] type can also be automatically filled in.\n\n### Flags Field\n\nThe `Flags` field can contain various options that affect how a transaction should behave. The options are represented as binary values that can be combined with bitwise-or operations to set multiple flags at once.\n\nTo check whether a transaction has a given flag enabled, use the bitwise-and operator on the flag's value and the `Flags` field. A result of zero indicates the flag is disabled, and a result equal to the flag value indicates the flag is enabled. (If you got any other result, you did something wrong.)\n\nMost flags only have meaning for a specific transaction type. The same bitwise value may be reused for flags on different transaction types, so it is important to pay attention to the `TransactionType` field when setting and reading flags.\n\nBits that are not defined as flags MUST be 0. (The \\[fix1543 amendment]\\[] enforces this rule on some transaction types. Most transaction types enforce this rule by default.)\n\n#### Global Flags\n\nThe only flag that applies globally to all transactions is as follows:\n\n| Flag Name             | Hex Value    | Decimal Value | Description                                                                                                                                 |\n| --------------------- | ------------ | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tfFullyCanonicalSig` | `0x80000000` | 2147483648    | **DEPRECATED** No effect. (If the \\[RequireFullyCanonicalSig amendment]\\[] is not enabled, this flag enforces a fully-canonical signature.) |\n\nWhen using the \\[sign method]\\[] (or \\[submit method]\\[] in \"sign-and-submit\" mode), `xahaud` adds a `Flags` field with `tfFullyCanonicalSig` enabled unless the `Flags` field is already present. The `tfFullyCanonicalSig` flag is not automatically enabled if `Flags` is explicitly specified. The flag is not automatically enabled when using the \\[sign_for method]\\[] to add a signature to a multi-signed transaction.\n\n**Note:** The `tfFullyCanonicalSig` flag was used from 2014 until 2020 to protect against transaction malleability while maintaining compatibility with legacy signing software. The \\[RequireFullyCanonicalSig amendment]\\[] ended compatibility with such legacy software and made the protections the default for all transactions. If you are using a parallel network that does not have RequireFullyCanonicalSig enabled, you should always enable the `tfFullyCanonicalSig` flag to protect against transaction malleability.\n\n#### Flag Ranges\n\nA transaction's `Flags` field can contain flags that apply at different levels or contexts. Flags for each context are limited to the following ranges:\n\n| Range Name       | Bit Mask     | Description                                                                                    |\n| ---------------- | ------------ | ---------------------------------------------------------------------------------------------- |\n| Universal Flags  | `0xff000000` | Flags that apply equally to all transaction types.                                             |\n| Type-based Flags | `0x00ff0000` | Flags with different meanings depending on the transaction type that uses them.                |\n| Reserved Flags   | `0x0000ffff` | Flags that are not currently defined. A transaction is only valid if these flags are disabled. |\n\n**Note:** The \\[AccountSet transaction]\\[] type has its own non-bitwise flags, which serve a similar purpose to type-based flags. Ledger objects also have a `Flags` field with different bitwise flag definitions.\n\n### Memos Field\n\nThe `Memos` field includes arbitrary messaging data with the transaction. It is presented as an array of objects. Each object has only one field, `Memo`, which in turn contains another object with _one or more_ of the following fields:\n\n| Field        | Type   | \\[Internal Type]\\[] | Description                                                                                                                                                                                                       |\n| ------------ | ------ | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `MemoData`   | String | Blob                | Arbitrary hex value, conventionally containing the content of the memo.                                                                                                                                           |\n| `MemoFormat` | String | Blob                | Hex value representing characters allowed in URLs. Conventionally containing information on how the memo is encoded, for example as a [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml). |\n| `MemoType`   | String | Blob                | Hex value representing characters allowed in URLs. Conventionally, a unique relation (according to [RFC 5988](http://tools.ietf.org/html/rfc5988#section-4)) that defines the format of this memo.                |\n\nThe `MemoType` and `MemoFormat` fields should only consist of the following characters: `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~:/?#[]@!$&'()*+,;=%`\n\nThe `Memos` field is limited to no more than 1 KB in size (when serialized in binary format).\n\nExample of a transaction with a Memos field:\n\n```json\n{\n    \"TransactionType\": \"Payment\",\n    \"Account\": \"rMmTCjGFRWPz8S2zAUUoNVSQHxtRQD4eCx\",\n    \"Destination\": \"r3kmLJN5D28dHuH8vZNUZpMC43pEHpaocV\",\n    \"Memos\": [\n        {\n            \"Memo\": {\n                \"MemoType\": \"687474703a2f2f6578616d706c652e636f6d2f6d656d6f2f67656e65726963\",\n                \"MemoData\": \"72656e74\"\n            }\n        }\n    ],\n    \"Amount\": \"1\"\n}\n```\n\n### NetworkID Field\n\n\\[New in: rippled 1.11.0]\\[]\n\nThe `NetworkID` field is a protection against \"cross-chain\" transaction replay attacks, preventing the same transaction from being copied over and executing on a parallel network that it wasn't intended for. For compatibility with existing chains, the `NetworkID` field must be omitted on any network with a Network ID of 1024 or less, but must be included on any network with a Network ID of 1025 or greater. The following table shows the status and values for various known networks:\n\n| Network                         | ID    | `NetworkID` Field                                    |\n| ------------------------------- | ----- | ---------------------------------------------------- |\n| Mainnet                         | 0     | Disallowed                                           |\n| Testnet                         | 1     | Disallowed                                           |\n| Devnet                          | 2     | Disallowed                                           |\n| AMM Devnet                      | 25    | Disallowed                                           |\n| Sidechains Devnet Locking Chain | 2551  | Disallowed, but will become required after an update |\n| Sidechains Devnet Issuing Chain | 2552  | Disallowed, but will become required after an update |\n| Xahau Testnet                   | 21338 | Required                                             |\n| Xahau Mainnet                   | 21337 | Required                                             |\n\nTransaction replay attacks are theoretically possible, but require specific conditions on the second network. All of the following must be true:\n\n* The transaction's sender is a funded account on the second network.\n* The sender's `Sequence` number on the second network matches the transaction's `Sequence`, or the transaction uses a Ticket that's available on the second network.\n* Either the transaction does not have a `LastLedgerSequence` field, or it specifies a value that is higher than the current ledger index on the second ledger.\n  * Mainnet generally has a higher ledger index than test networks or sidechains, so it is easier to replay Mainnet transactions on a sidechain or test network than the other way around, when transactions use `LastLedgerSequence` as intended.\n* Either the networks both have IDs of 1024 or less, both networks use the same ID, or the second network does not require the `NetworkID` field.\n\n### Signers Field\n\nThe `Signers` field contains a multi-signature, which has signatures from up to 8 key pairs, that together should authorize the transaction. The `Signers` list is an array of objects, each with one field, `Signer`. The `Signer` field has the following nested fields:\n\n| Field           | Type   | \\[Internal Type]\\[] | Description                                                                   |\n| --------------- | ------ | ------------------- | ----------------------------------------------------------------------------- |\n| `Account`       | String | AccountID           | The address associated with this signature, as it appears in the signer list. |\n| `TxnSignature`  | String | Blob                | A signature for this transaction, verifiable using the `SigningPubKey`.       |\n| `SigningPubKey` | String | Blob                | The public key used to create this signature.                                 |\n\nThe `SigningPubKey` must be a key that is associated with the `Account` address. If the referenced `Account` is a funded account in the ledger, then the `SigningPubKey` can be that account's current Regular Key if one is set. It could also be that account's Master Key, unless the `lsfDisableMaster` flag is enabled. If the referenced `Account` address is not a funded account in the ledger, then the `SigningPubKey` must be the master key associated with that address.\n\nBecause signature verification is a compute-intensive task, multi-signed transactions cost additional XAH to relay to the network. Each signature included in the multi-signature increases the \\[transaction cost]\\[] required for the transaction. For example, if the current minimum transaction cost to relay a transaction to the network is `10000` drops, then a multi-signed transaction with 3 entries in the `Signers` array would need a `Fee` value of at least `40000` drops to relay.\n\n### EmitDetails Fields\n\nAn `EmitDetails` object has the following fields:\n\n| Field             | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                                     |\n| ----------------- | --------- | ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `EmitGeneration`  | Number    | UInt32              | Yes       | This field keeps track of a chain of emitted transactions that in turn cause other transactions to be emitted.                                                                                                                                                                  |\n| `EmitBurden`      | String    | UInt64              | Yes       | This field is a heuristic for detecting forkbombs. Fees are based on burden and will increase exponentially when a chain reaction is started to prevent the network becoming overun by self-reinforcing emitted transactions.                                                   |\n| `EmitParentTxnID` | String    | Hash256             | Yes       | The Hook Execution that emitted the transaction is connected to the Originating Transaction. Therefore this field is always required for the efficient tracing of behaviour.                                                                                                    |\n| `EmitNonce`       | String    | Hash256             | Yes       | Emitted Transactions would be identical with the same fields and therefore have identical transaction hashes if a nonce were not used. However every node on the network needs to agree on the nonce, so a special Hook API to produce a deterministic nonce is made available. |\n| `EmitCallback`    | String    | AccountID           | No        | This field is used by xahld when it needs to intitate a callback, such that it knows which Hook and account to initate the callback on. Callbacks happen when an emitted transaction is accepted into a ledger.                                                                 |\n| `EmitHookHash`    | String    | Hash256             | Yes       | The SHA512H of the Hook at the time it was executed.                                                                                                                                                                                                                            |\n\n### Hook Parameters\n\nThe `HookParameters` field is an array of objects that specify the parameters of the hook. Each parameter object has the following fields:\n\n| Field   | JSON Type | Internal Type | Description                 |\n| ------- | --------- | ------------- | --------------------------- |\n| `Name`  | String    | Blob          | The name of the parameter.  |\n| `Value` | String    | Blob          | The value of the parameter. |","src/content/docs/docs/protocol-reference/transactions/transaction-common-fields.mdx","55a631167c370053","docs/protocol-reference/transactions/transaction-metadata",{"id":483,"data":485,"body":490,"filePath":491,"digest":492,"deferredRender":14},{"title":486,"editUrl":14,"head":487,"template":16,"sidebar":488,"pagefind":14,"draft":18},"Transaction Metadata",[],{"hidden":18,"attrs":489},{},"Transaction metadata is a section of data that gets added to a transaction after it is processed. Any transaction that gets included in a ledger has metadata, regardless of whether it is successful. The transaction metadata describes the outcome of the transaction in detail.\n\n:::caution\nThe changes described in transaction metadata are only final if the transaction is in a validated ledger version.\n:::\n\n\u003Cdetails>\n\n\u003Csummary>Example Metadata\u003C/summary>\n\nThe following JSON object shows the metadata for [a complex cross-currency payment](https://xrpcharts.ripple.com/#/transactions/8C55AFC2A2AA42B5CE624AEECDB3ACFDD1E5379D4E5BF74A8460C5E97EF8706B):&#x20;\n\n```json\n{\n  \"AffectedNodes\": [\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Account\": \"r9ZoLsJHzMMJLpvsViWQ4Jgx17N8cz1997\",\n          \"Balance\": \"77349986\",\n          \"Flags\": 0,\n          \"OwnerCount\": 2,\n          \"Sequence\": 9\n        },\n        \"LedgerEntryType\": \"AccountRoot\",\n        \"LedgerIndex\": \"1E7E658C2D3DF91EFAE5A12573284AD6F526B8F64DD12F013C6F889EF45BEA97\",\n        \"PreviousFields\": {\n          \"OwnerCount\": 3\n        },\n        \"PreviousTxnID\": \"55C11248ACEFC2EFD59755BF88867783AC18EA078517108F942069C2FBE4CF5C\",\n        \"PreviousTxnLgrSeq\": 35707468\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"2298.927882138068\"\n          },\n          \"Flags\": 1114112,\n          \"HighLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rLEsXccBGNR3UPuPu2hUXPjziKC3qKSBun\",\n            \"value\": \"0\"\n          },\n          \"HighNode\": \"000000000000006B\",\n          \"LowLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rpvvAvaZ7TXHkNLM8UJwCTU6yBU2jDTJ1P\",\n            \"value\": \"1000000000\"\n          },\n          \"LowNode\": \"0000000000000007\"\n        },\n        \"LedgerEntryType\": \"RippleState\",\n        \"LedgerIndex\": \"220DDA7164F3F41F3C5223FA3125D4CD368EBB4FB954B5FBFFB6D1EA6DACDD5E\",\n        \"PreviousFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"2297.927882138068\"\n          }\n        },\n        \"PreviousTxnID\": \"1DB2F9C67C3F42F7B8AB02BA2264254A78A201EC8A9974A1CACEFD51545B1263\",\n        \"PreviousTxnLgrSeq\": 43081739\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"33403.80553244443\"\n          },\n          \"Flags\": 1114112,\n          \"HighLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq\",\n            \"value\": \"0\"\n          },\n          \"HighNode\": \"0000000000001A40\",\n          \"LowLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rd5Sx93pCMgfxwBuofjen2csoFYmY8VrT\",\n            \"value\": \"1000000000\"\n          },\n          \"LowNode\": \"0000000000000000\"\n        },\n        \"LedgerEntryType\": \"RippleState\",\n        \"LedgerIndex\": \"38569918AF54B520463CFDDD00EB5ADD8768039BD94E61A5E25C387EA4FDC9A3\",\n        \"PreviousFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"33402.80752845242\"\n          }\n        },\n        \"PreviousTxnID\": \"38A0E82ADC2DA6C6D59929B73E9812CD1E1384E452FD23D0717EA0037E2FC9E3\",\n        \"PreviousTxnLgrSeq\": 43251694\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Account\": \"rBndiPPKs9k5rjBb7HsEiqXKrz8AfUnqWq\",\n          \"BookDirectory\": \"4627DFFCFF8B5A265EDBD8AE8C14A52325DBFEDAF4F5C32E5B09B13AC59DBA5E\",\n          \"BookNode\": \"0000000000000000\",\n          \"Flags\": 0,\n          \"OwnerNode\": \"0000000000000000\",\n          \"Sequence\": 407556,\n          \"TakerGets\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B\",\n            \"value\": \"75.1379833998197\"\n          },\n          \"TakerPays\": \"204986996\"\n        },\n        \"LedgerEntryType\": \"Offer\",\n        \"LedgerIndex\": \"557BDD35E40EAFFE0AC98108A0F4AC4BB812A168CFD5B4E35475F42A60ABD9C8\",\n        \"PreviousFields\": {\n          \"TakerGets\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B\",\n            \"value\": \"76.1399833998197\"\n          },\n          \"TakerPays\": \"207720593\"\n        },\n        \"PreviousTxnID\": \"961C575073788979815F103D065CEE449D2EA6EFE8FC8C33C26EC08586925D90\",\n        \"PreviousTxnLgrSeq\": 43251680\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Account\": \"r9KG7Du7aFmABzMvDnwuvPaEoMu4Eurwok\",\n          \"Balance\": \"8080207629\",\n          \"Flags\": 0,\n          \"OwnerCount\": 6,\n          \"Sequence\": 1578765\n        },\n        \"LedgerEntryType\": \"AccountRoot\",\n        \"LedgerIndex\": \"5A667CB5FBAB4143EDEFBD6EDDD4B6D19C905209C8EE16486D5D7CD6CB083E78\",\n        \"PreviousFields\": {\n          \"Balance\": \"8080152531\",\n          \"Sequence\": 1578764\n        },\n        \"PreviousTxnID\": \"E3CDFD288620871455634DC1E56439136AACA1DDBCE987BE12F97486AB477375\",\n        \"PreviousTxnLgrSeq\": 43251694\n      }\n    },\n    {\n      \"DeletedNode\": {\n        \"FinalFields\": {\n          \"Account\": \"r9ZoLsJHzMMJLpvsViWQ4Jgx17N8cz1997\",\n          \"BookDirectory\": \"A6D5D1C1CC92D56FDDFD4434FB10BD31F63EB991DA3C756653071AFD498D0000\",\n          \"BookNode\": \"0000000000000000\",\n          \"Flags\": 0,\n          \"OwnerNode\": \"0000000000000000\",\n          \"PreviousTxnID\": \"DB028A461E98B0398CAD65F2871B381A6D0B9A21662CA5B033438D83C518C0F2\",\n          \"PreviousTxnLgrSeq\": 35686129,\n          \"Sequence\": 7,\n          \"TakerGets\": {\n            \"currency\": \"EUR\",\n            \"issuer\": \"rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq\",\n            \"value\": \"2.5\"\n          },\n          \"TakerPays\": {\n            \"currency\": \"ETH\",\n            \"issuer\": \"rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h\",\n            \"value\": \"0.05\"\n          }\n        },\n        \"LedgerEntryType\": \"Offer\",\n        \"LedgerIndex\": \"6AA7E5121FEB456F0A899E3D6F25D62ABB408BB67B91C9270E13714401ED72B5\"\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Account\": \"rd5Sx93pCMgfxwBuofjen2csoFYmY8VrT\",\n          \"Balance\": \"8251028196\",\n          \"Flags\": 0,\n          \"OwnerCount\": 4,\n          \"Sequence\": 274\n        },\n        \"LedgerEntryType\": \"AccountRoot\",\n        \"LedgerIndex\": \"6F830A1B38F827CD4BEC946A40F1E2DF726FC22AFC3918FD621567AF17F49F3A\",\n        \"PreviousFields\": {\n          \"Balance\": \"8253816902\"\n        },\n        \"PreviousTxnID\": \"38A0E82ADC2DA6C6D59929B73E9812CD1E1384E452FD23D0717EA0037E2FC9E3\",\n        \"PreviousTxnLgrSeq\": 43251694\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Account\": \"rd5Sx93pCMgfxwBuofjen2csoFYmY8VrT\",\n          \"BookDirectory\": \"79C54A4EBD69AB2EADCE313042F36092BE432423CC6A4F784E0CB6D74F25A336\",\n          \"BookNode\": \"0000000000000000\",\n          \"Flags\": 0,\n          \"OwnerNode\": \"0000000000000000\",\n          \"Sequence\": 273,\n          \"TakerGets\": \"8246341599\",\n          \"TakerPays\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq\",\n            \"value\": \"2951.147613535471\"\n          }\n        },\n        \"LedgerEntryType\": \"Offer\",\n        \"LedgerIndex\": \"7FD1EAAE17B7D68AE640FFC56CECC3999B4F938EFFF6EA6887B6CC8BD9DBDC63\",\n        \"PreviousFields\": {\n          \"TakerGets\": \"8249130305\",\n          \"TakerPays\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq\",\n            \"value\": \"2952.145617527486\"\n          }\n        },\n        \"PreviousTxnID\": \"38A0E82ADC2DA6C6D59929B73E9812CD1E1384E452FD23D0717EA0037E2FC9E3\",\n        \"PreviousTxnLgrSeq\": 43251694\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"-11.68225001668339\"\n          },\n          \"Flags\": 131072,\n          \"HighLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59\",\n            \"value\": \"5000\"\n          },\n          \"HighNode\": \"0000000000000000\",\n          \"LowLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B\",\n            \"value\": \"0\"\n          },\n          \"LowNode\": \"000000000000004A\"\n        },\n        \"LedgerEntryType\": \"RippleState\",\n        \"LedgerIndex\": \"826CF5BFD28F3934B518D0BDF3231259CBD3FD0946E3C3CA0C97D2C75D2D1A09\",\n        \"PreviousFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"-10.68225001668339\"\n          }\n        },\n        \"PreviousTxnID\": \"28B271F7C27C1A267F32FFCD8B1795C5D3B1DC761AD705E3A480139AA8B61B09\",\n        \"PreviousTxnLgrSeq\": 43237130\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Account\": \"rBndiPPKs9k5rjBb7HsEiqXKrz8AfUnqWq\",\n          \"Balance\": \"8276201534\",\n          \"Flags\": 0,\n          \"OwnerCount\": 5,\n          \"Sequence\": 407558\n        },\n        \"LedgerEntryType\": \"AccountRoot\",\n        \"LedgerIndex\": \"880C6FB7B9C0083211F950E4449AD45895C0EC1114B5112CE1320AC7275E3237\",\n        \"PreviousFields\": {\n          \"Balance\": \"8273467937\"\n        },\n        \"PreviousTxnID\": \"CB4B54942F11510A47D2731C3260429093F24016B366CBF15D8EC4B705372F02\",\n        \"PreviousTxnLgrSeq\": 43251683\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"-6557.745685633666\"\n          },\n          \"Flags\": 2228224,\n          \"HighLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rBndiPPKs9k5rjBb7HsEiqXKrz8AfUnqWq\",\n            \"value\": \"1000000000\"\n          },\n          \"HighNode\": \"0000000000000000\",\n          \"LowLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B\",\n            \"value\": \"0\"\n          },\n          \"LowNode\": \"0000000000000512\"\n        },\n        \"LedgerEntryType\": \"RippleState\",\n        \"LedgerIndex\": \"8A9FEE5192E334195314B5C162BC78F7452ADB14E06839D48943BAE05EE1967F\",\n        \"PreviousFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"-6558.747685633666\"\n          }\n        },\n        \"PreviousTxnID\": \"961C575073788979815F103D065CEE449D2EA6EFE8FC8C33C26EC08586925D90\",\n        \"PreviousTxnLgrSeq\": 43251680\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Balance\": {\n            \"currency\": \"GCB\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"9990651675.348776\"\n          },\n          \"Flags\": 3211264,\n          \"HighLimit\": {\n            \"currency\": \"GCB\",\n            \"issuer\": \"rHaans8PtgwbacHvXAL3u6TG28gTAtCwr8\",\n            \"value\": \"0\"\n          },\n          \"HighNode\": \"0000000000000000\",\n          \"LowLimit\": {\n            \"currency\": \"GCB\",\n            \"issuer\": \"r9KG7Du7aFmABzMvDnwuvPaEoMu4Eurwok\",\n            \"value\": \"10000000000\"\n          },\n          \"LowNode\": \"0000000000000000\"\n        },\n        \"LedgerEntryType\": \"RippleState\",\n        \"LedgerIndex\": \"A2B41EE7818A5756B6A2276BDBB3CE0ED3A3B350787FD6B76E5EA1354A8F20D2\",\n        \"PreviousFields\": {\n          \"Balance\": {\n            \"currency\": \"GCB\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"9990651678.137482\"\n          }\n        },\n        \"PreviousTxnID\": \"961C575073788979815F103D065CEE449D2EA6EFE8FC8C33C26EC08586925D90\",\n        \"PreviousTxnLgrSeq\": 43251680\n      }\n    },\n    {\n      \"DeletedNode\": {\n        \"FinalFields\": {\n          \"ExchangeRate\": \"53071AFD498D0000\",\n          \"Flags\": 0,\n          \"RootIndex\": \"A6D5D1C1CC92D56FDDFD4434FB10BD31F63EB991DA3C756653071AFD498D0000\",\n          \"TakerGetsCurrency\": \"0000000000000000000000004555520000000000\",\n          \"TakerGetsIssuer\": \"2ADB0B3959D60A6E6991F729E1918B7163925230\",\n          \"TakerPaysCurrency\": \"0000000000000000000000004554480000000000\",\n          \"TakerPaysIssuer\": \"06CC4A6D023E68AA3499C6DE3E9F2DC52B8BA254\"\n        },\n        \"LedgerEntryType\": \"DirectoryNode\",\n        \"LedgerIndex\": \"A6D5D1C1CC92D56FDDFD4434FB10BD31F63EB991DA3C756653071AFD498D0000\"\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Flags\": 0,\n          \"Owner\": \"r9ZoLsJHzMMJLpvsViWQ4Jgx17N8cz1997\",\n          \"RootIndex\": \"A83C1B192A27582EDB320EBD7A3FE58D7042CE04B67A2B3D87FDD63D871E12D7\"\n        },\n        \"LedgerEntryType\": \"DirectoryNode\",\n        \"LedgerIndex\": \"A83C1B192A27582EDB320EBD7A3FE58D7042CE04B67A2B3D87FDD63D871E12D7\"\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"0\"\n          },\n          \"Flags\": 65536,\n          \"HighLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rLEsXccBGNR3UPuPu2hUXPjziKC3qKSBun\",\n            \"value\": \"0\"\n          },\n          \"HighNode\": \"0000000000000002\",\n          \"LowLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59\",\n            \"value\": \"1\"\n          },\n          \"LowNode\": \"0000000000000000\"\n        },\n        \"LedgerEntryType\": \"RippleState\",\n        \"LedgerIndex\": \"C493ABA2619D0FC6355BA862BC8312DF8266FBE76AFBA9636E857F7EAC874A99\",\n        \"PreviousFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"1\"\n          }\n        },\n        \"PreviousTxnID\": \"28B271F7C27C1A267F32FFCD8B1795C5D3B1DC761AD705E3A480139AA8B61B09\",\n        \"PreviousTxnLgrSeq\": 43237130\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Account\": \"r9KG7Du7aFmABzMvDnwuvPaEoMu4Eurwok\",\n          \"BookDirectory\": \"E6E8A9842EA2ED1FD5D0599343692CE1EBF977AEA751B7DC5B038D7EA4C68000\",\n          \"BookNode\": \"0000000000000000\",\n          \"Flags\": 65536,\n          \"OwnerNode\": \"0000000000000000\",\n          \"Sequence\": 39018,\n          \"TakerGets\": {\n            \"currency\": \"GCB\",\n            \"issuer\": \"rHaans8PtgwbacHvXAL3u6TG28gTAtCwr8\",\n            \"value\": \"9990651675.348776\"\n          },\n          \"TakerPays\": \"9990651675348776\"\n        },\n        \"LedgerEntryType\": \"Offer\",\n        \"LedgerIndex\": \"C939B9B2C5803DD6D89B792E72470F79CBE9F9E999691789E0B68C3808BDDD8E\",\n        \"PreviousFields\": {\n          \"TakerGets\": {\n            \"currency\": \"GCB\",\n            \"issuer\": \"rHaans8PtgwbacHvXAL3u6TG28gTAtCwr8\",\n            \"value\": \"9990651678.137482\"\n          },\n          \"TakerPays\": \"9990651678137482\"\n        },\n        \"PreviousTxnID\": \"961C575073788979815F103D065CEE449D2EA6EFE8FC8C33C26EC08586925D90\",\n        \"PreviousTxnLgrSeq\": 43251680\n      }\n    },\n    {\n      \"ModifiedNode\": {\n        \"FinalFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"2963.413395452545\"\n          },\n          \"Flags\": 65536,\n          \"HighLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq\",\n            \"value\": \"0\"\n          },\n          \"HighNode\": \"0000000000001A97\",\n          \"LowLimit\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rpvvAvaZ7TXHkNLM8UJwCTU6yBU2jDTJ1P\",\n            \"value\": \"0\"\n          },\n          \"LowNode\": \"0000000000000007\"\n        },\n        \"LedgerEntryType\": \"RippleState\",\n        \"LedgerIndex\": \"E4D1FBD5CB72A1D3EE38C21F3BCB13E454FCB469CD01C1366E0008A031E6A7FC\",\n        \"PreviousFields\": {\n          \"Balance\": {\n            \"currency\": \"USD\",\n            \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n            \"value\": \"2964.413395452545\"\n          }\n        },\n        \"PreviousTxnID\": \"1DB2F9C67C3F42F7B8AB02BA2264254A78A201EC8A9974A1CACEFD51545B1263\",\n        \"PreviousTxnLgrSeq\": 43081739\n      }\n    }\n  ],\n  \"DeliveredAmount\": {\n    \"currency\": \"GCB\",\n    \"issuer\": \"rHaans8PtgwbacHvXAL3u6TG28gTAtCwr8\",\n    \"value\": \"2.788706\"\n  },\n  \"TransactionIndex\": 38,\n  \"TransactionResult\": \"tesSUCCESS\",\n  \"delivered_amount\": {\n    \"currency\": \"GCB\",\n    \"issuer\": \"rHaans8PtgwbacHvXAL3u6TG28gTAtCwr8\",\n    \"value\": \"2.788706\"\n  }\n}\n```\n\n\n\n\u003C/details>\n\n### AffectedNodes\n\nThe `AffectedNodes` array contains a complete list of the objects in the ledger that this transaction modified in some way. Each entry in this array is an object with one top-level field indicating what type it is:\n\n* `CreatedNode` indicates that the transaction created a new object in the ledger.\n* `DeletedNode` indicates that the transaction removed an object from the ledger.\n* `ModifiedNode` indicates that the transaction modified an existing object in the ledger.\n\nThe value of each of these fields is a JSON object describing the changes made to the ledger object.\n\n#### CreatedNode Fields\n\nA `CreatedNode` object contains the following fields:\n\n| Field             | Value               | Description                                                                                                                                                |\n| ----------------- | ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `LedgerEntryType` | String              | The type of ledger object that was created.                                                                                                                |\n| `LedgerIndex`     | String - \\[Hash]\\[] | The ID of this ledger object in the ledger's state tree. **Note:** This is **not the same** as a ledger index, even though the field name is very similar. |\n| `NewFields`       | Object              | The content fields of the newly-created ledger object. Which fields are present depends on what type of ledger object was created.                         |\n\n#### DeletedNode Fields\n\nA `DeletedNode` object contains the following fields:\n\n| Field             | Value               | Description                                                                                                                                                |\n| ----------------- | ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `LedgerEntryType` | String              | The type of ledger object that was deleted.                                                                                                                |\n| `LedgerIndex`     | String - \\[Hash]\\[] | The ID of this ledger object in the ledger's state tree. **Note:** This is **not the same** as a ledger index, even though the field name is very similar. |\n| `FinalFields`     | Object              | The content fields of the ledger object immediately before it was deleted. Which fields are present depends on what type of ledger object was created.     |\n\n#### ModifiedNode Fields\n\nA `ModifiedNode` object contains the following fields:\n\n| Field               | Value                       | Description                                                                                                                                                                                                                                                                              |\n| ------------------- | --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `LedgerEntryType`   | String                      | The type of ledger object that was deleted.                                                                                                                                                                                                                                              |\n| `LedgerIndex`       | String - \\[Hash]\\[]         | The ID of this ledger object in the ledger's state tree. **Note:** This is **not the same** as a ledger index, even though the field name is very similar.                                                                                                                               |\n| `FinalFields`       | Object                      | The content fields of the ledger object after applying any changes from this transaction. Which fields are present depends on what type of ledger object was created. This omits the `PreviousTxnID` and `PreviousTxnLgrSeq` fields, even though most types of ledger objects have them. |\n| `PreviousFields`    | Object                      | The previous values for all fields of the object that were changed as a result of this transaction. If the transaction _only added_ fields to the object, this field is an empty object.                                                                                                 |\n| `PreviousTxnID`     | String - \\[Hash]\\[]         | _(May be omitted)_ The \\[identifying hash]\\[] of the previous transaction to modify this ledger object. Omitted for ledger object types that do not have a `PreviousTxnID` field.                                                                                                        |\n| `PreviousTxnLgrSeq` | Number - \\[Ledger Index]\\[] | _(May be omitted)_ The \\[Ledger Index]\\[] of the ledger version containing the previous transaction to modify this ledger object. Omitted for ledger object types that do not have a `PreviousTxnLgrSeq` field.                                                                          |\n\n**Note:** If the modified ledger object has `PreviousTxnID` and `PreviousTxnLgrSeq` fields, the transaction always updates them with the transaction's own identifying hash and the index of the ledger version that included the transaction, but these fields' new value is not listed in the `FinalFields` of the `ModifiedNode` object, and their previous values are listed at the top level of the `ModifiedNode` object rather than in the nested `PreviousFields` object.\n\n### delivered_amount\n\nThe `Amount` of a \\[Payment transaction]\\[] indicates the amount to deliver to the `Destination`, so if the transaction was successful, then the destination received that much -- **except if the transaction was a partial payment**. (In that case, any positive amount up to `Amount` might have arrived.) Rather than choosing whether or not to trust the `Amount` field, you should use the `delivered_amount` field of the metadata to see how much actually reached its destination.\n\nThe `rippled` server provides a `delivered_amount` field in JSON transaction metadata for all successful Payment transactions. This field is formatted like a normal currency amount. However, the delivered amount is not available for transactions that meet both of the following criteria:\n\n* Is a partial payment\n\nIf the tx is a partial payment, then `delivered_amount` contains the string value `unavailable` instead of an actual amount. If this happens, you can only figure out the actual delivered amount by reading the `AffectedNodes` in the transaction's metadata.\n\n**Note:** The `delivered_amount` field is generated on-demand for the request, and is not included in the binary format for transaction metadata, nor is it used when calculating the hash of the transaction metadata.\n\nSee also: Partial Payments","src/content/docs/docs/protocol-reference/transactions/transaction-metadata.mdx","1d7446b2f0c43c7c","docs/hooks/concepts/collect-call",{"id":493,"data":495,"body":500,"filePath":501,"digest":502,"deferredRender":14},{"title":496,"editUrl":14,"head":497,"template":16,"sidebar":498,"pagefind":14,"draft":18},"Collect Call",[],{"hidden":18,"attrs":499},{},"import { Card, Aside } from '@astrojs/starlight/components';\n\n\u003CCard title=\"Hook Design Philosophy\">\n_Every party affected by a transaction should have the opportunity to have their hooks executed._\n\u003C/Card>\n\nWhen hooks are not Strongly Executed it is unfair to bill the originating transaction for their execution. For example an _OfferCreate_ which crosses 20 offers on the DEX should not be forced to pay for the execution of each of those account's Hooks.\n\nTherefore during typical Weak execution the fee for the execution is collected from the owner of the Hook. To enable this:\n\n* The Hook owner must have set `asfTshCollect` on their Xahau account using the AccountSet transaction.\n* The Hook owner must have set `hsfCollect` on the specific Hook they wish to be called as a Weak TSH.\n\n### Fee Responsibility Table\n\n| Type of Weak Execution                                                                                                                                                   | Fee                                                                                                                                                                                    |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| \u003Cp>\u003Cstrong>Again As Weak\u003C/strong>\u003Cbr />- Happens when a Strongly Executed Hook calls \u003Ca href=\"../technical/hooks-functions/hook-context/hook_again.md\">hook_again\u003C/a>\u003C/p>  | Free (already paid by the Strong Execution).                                                                                                                                           |\n| \u003Cp>\u003Cstrong>Callback\u003C/strong>\u003Cbr />- Happens when an emitted transaction either makes it into a ledger or is flagged as being impossible to ever make it into a ledger.\u003C/p> | Free (already paid during Emission).                                                                                                                                                   |\n| \u003Cp>\u003Cstrong>Weak Transactional Stakeholder\u003C/strong>\u003Cbr />- Happens if a transaction in some way mildly affects your account.\u003C/p>                                            | Paid for by your account (not by the originating transaction) if and only if both your account is marked with `asfTshCollect` flag and your Hook is marked with the `hsfCollect` flag. |\n\n\u003CAside type=\"caution\">\nThis is an advanced feature most Hook Developers will probably not use.\n\u003C/Aside>","src/content/docs/docs/hooks/concepts/collect-call.mdx","f5e6efc14d2ac848","docs/hooks/concepts/compiling-hooks",{"id":503,"data":505,"body":510,"filePath":511,"digest":512,"deferredRender":14},{"title":506,"editUrl":14,"head":507,"template":16,"sidebar":508,"pagefind":14,"draft":18},"Compiling Hooks",[],{"hidden":18,"attrs":509},{},"import { Aside } from '@astrojs/starlight/components';\n\n### Constraints\n\nAll Hooks are compiled to a single [webassembly module](https://webassembly.github.io/spec/core/syntax/modules.html) before they can be set onto an Xahau account.\n\nA Hook always implements and exports exactly one or both of the following functions:\n\n`int64_t hook(uint32_t ctx) { ... }` _required_\n\n* Executed whenever a transaction comes into or leaves from the account the Hook is set on (`ctx = 0`) or\n* Executed when executed as a [Weak Transactional Stakeholder](weak-and-strong.md) (`ctx > 0`).\n\n`int64_t cbak(uint32_t ctx) { ... }` _optional_\n\n* Executed when an emitted transaction is successfully accepted into a ledger (`ctx = 0`) or\n* Executed when an emitted transaction cannot be accepted into any ledger (`ctx = 1`).\n\nHooks are not allowed to specify other functions. Instead they must make clever use of macros to do all their computation within these two functions. This is part of a computational restriction on hooks to keep their runtime predictable.\n\nAdditionally Hooks are afforded no _heap_ memory. All required memory must be reserved and used on the stack.\n\n### Example\n\nHere is an example Hook written in C. The Hook prints 0...3 to the trace log before accepting the originating transaction.\n\n```c\n#include \u003Cstdint.h>\n#define GUARD(maxiter) _g(__LINE__, (maxiter)+1)\nextern int32_t _g (uint32_t id, uint32_t maxiter);\nextern int64_t accept (uint32_t read_ptr, uint32_t read_len, int64_t error_code);\nextern int64_t trace_num (uint32_t read_ptr, uint32_t read_len, int64_t number);\n\nint64_t hook(uint32_t ctx)\n{\n    for (int i = 0; GUARD(3), i \u003C 3; ++i)\n    {\n        trace_num(\"test\", 4, i);\n    }\n    accept (0,0,0); \n    return 0;\n}\n```\n\n\u003CAside type=\"tip\">\nFor educational purposes the above example deliberately does not include `hookapi.h` (which developers would typically use.)\n\u003C/Aside>\n\n### Compilation\n\nA [variety of compilers](https://www.google.com/search?q=webassembly+compiler+C) will generate valid webassembly from a C source file. Once compiled, a Hook exists as a binary `.wasm` file. This contains a webassembly module. Using `wasmcc` to compile and the `wasm2wat` tool to convert to human readable webassembly this binary form can be rendered to the human readable form. Below appears the compilation result of the above example.\n\n```\n(module\n  (type (;0;) (func (param i32 i32) (result i32)))\n  (type (;1;) (func (param i32 i32 i64) (result i64)))\n  (type (;2;) (func))\n  (type (;3;) (func (param i32) (result i64)))\n  (import \"env\" \"_g\" (func $_g (type 0)))\n  (import \"env\" \"trace_num\" (func $trace_num (type 1)))\n  (import \"env\" \"accept\" (func $accept (type 1)))\n  (func $__wasm_call_ctors (type 2))\n  (func $cbak (type 3) (param i32) (result i64)\n    (local i32 i32 i32 i64)\n    global.get 0\n    local.set 1\n    i32.const 16\n    local.set 2\n    local.get 1\n    local.get 2\n    i32.sub\n    local.set 3\n    i64.const 0\n    local.set 4\n    local.get 3\n    local.get 0\n    i64.store offset=8\n    local.get 4\n    return)\n  (func $hook (type 3) (param i32) (result i64)\n    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i64 i32 i32 i32 i64 i32 i32 i32)\n    global.get 0\n    local.set 1\n    i32.const 16\n    local.set 2\n    local.get 1\n    local.get 2\n    i32.sub\n    local.set 3\n    local.get 3\n    global.set 0\n    i32.const 0\n    local.set 4\n    local.get 3\n    local.get 0\n    i64.store offset=8\n    local.get 3\n    local.get 4\n    i32.store offset=4\n    block  ;; label = @1\n      loop  ;; label = @2\n        i32.const 3\n        local.set 5\n        i32.const 14\n        local.set 6\n        i32.const 4\n        local.set 7\n        local.get 6\n        local.get 7\n        call $_g\n        drop\n        local.get 3\n        i32.load offset=4\n        local.set 8\n        local.get 8\n        local.set 9\n        local.get 5\n        local.set 10\n        local.get 9\n        local.get 10\n        i32.lt_s\n        local.set 11\n        i32.const 1\n        local.set 12\n        local.get 11\n        local.get 12\n        i32.and\n        local.set 13\n        local.get 13\n        i32.eqz\n        br_if 1 (;@1;)\n        i32.const 1024\n        local.set 14\n        i32.const 4\n        local.set 15\n        local.get 3\n        i32.load offset=4\n        local.set 16\n        local.get 16\n        local.set 17\n        local.get 17\n        i64.extend_i32_s\n        local.set 18\n        local.get 14\n        local.get 15\n        local.get 18\n        call $trace_num\n        drop\n        local.get 3\n        i32.load offset=4\n        local.set 19\n        i32.const 1\n        local.set 20\n        local.get 19\n        local.get 20\n        i32.add\n        local.set 21\n        local.get 3\n        local.get 21\n        i32.store offset=4\n        br 0 (;@2;)\n      end\n    end\n    i64.const 0\n    local.set 22\n    i32.const 0\n    local.set 23\n    local.get 23\n    local.get 23\n    local.get 22\n    call $accept\n    drop\n    i32.const 16\n    local.set 24\n    local.get 3\n    local.get 24\n    i32.add\n    local.set 25\n    local.get 25\n    global.set 0\n    local.get 22\n    return)\n  (table (;0;) 1 1 funcref)\n  (memory (;0;) 2)\n  (global (;0;) (mut i32) (i32.const 66576))\n  (global (;1;) i32 (i32.const 1029))\n  (global (;2;) i32 (i32.const 1024))\n  (global (;3;) i32 (i32.const 66576))\n  (global (;4;) i32 (i32.const 1024))\n  (export \"memory\" (memory 0))\n  (export \"__wasm_call_ctors\" (func $__wasm_call_ctors))\n  (export \"__data_end\" (global 1))\n  (export \"__global_base\" (global 2))\n  (export \"__heap_base\" (global 3))\n  (export \"__dso_handle\" (global 4))\n  (export \"cbak\" (func $cbak))\n  (export \"hook\" (func $hook))\n  (data (;0;) (i32.const 1024) \"test\\00\"))\n```\n\nThe average Hook developer will never need to examine webassembly directly. However it is a useful conceptual exercise to review the contents of the sample Hook.\n\nAbove we can see:\n\n* Three functions are imported from the Hooks API (`_g`, `accept`, `trace_num`)\n* Two functions are defined by the hook (`cbak`, `hook`)\n* Two functions are exported by the hook (again: `cbak`, `hook`)\n* Some static (constant) data is recorded in the hook (see `data` at the bottom).\n\nIt is very important to note that a Hook _must only_ import functions available to it from the Hooks API and _must_ only export the `cbak` and `hook` functions. In additional all hooks must import `_g` from the Hooks API, which is the `guard` function.\n\n\u003CAside type=\"tip\">\nWebassembly is a platform-independent general computation `bytecode` language. It has a one-to-one mapping with a human readable equivalent. These are used interchangeably.\n\u003C/Aside>\n\n### Unwanted Exports\n\nMost webassembly compilers (including the one above) produce additional exports for their own linking purposes. In many cases the generation of these is difficult or impossible to disable.\n\nUnwanted exports will lead to an otherwise valid Hook being rejected. Therefore after compilation developers should use the [Hook Cleaner Utility](https://github.com/XRPLF/hook-cleaner-c) to strip out these out. Failure to do so will lead to your Hook being rejected.\n\n\n\u003CAside type=\"caution\">\nDon't forget to use the [Hook Cleaner Utility](https://github.com/XRPLF/hook-cleaner-c) or your Hooks will be rejected.\n\u003C/Aside>","src/content/docs/docs/hooks/concepts/compiling-hooks.mdx","13c8a41285ce7f86","docs/hooks/concepts/execution-metadata",{"id":513,"data":515,"body":521,"filePath":522,"digest":523,"deferredRender":14},{"title":516,"description":517,"editUrl":14,"head":518,"template":16,"sidebar":519,"pagefind":14,"draft":18},"Execution Metadata","What to expect when your Hook runs.",[],{"hidden":18,"attrs":520},{},"When Hooks execute they leave behind information about the status of that execution. This appears in the Originating Transaction metadata as an `sfHookExecutions` block. This block contains the following fields:\n\n\n\n| Field                  | Description                                                                                                                                                  |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| sfHookResult           | \u003Cp>Hooks can end in three ways: \u003Ccode>accept\u003C/code>, \u003Ccode>rollback\u003C/code> and \u003Ccode>error\u003C/code>.\u003Cbr />This is \u003Cem>not\u003C/em> the same as sfHookReturnCode!\u003C/p> |\n| sfHookHash             | The SHA512H of the Hook at the time it was executed.                                                                                                         |\n| sfHookAccount          | The account the Hook ran on.                                                                                                                                 |\n| sfHookReturnCode       | The integer returned as the third parameter of `accept` or `rollback`.                                                                                       |\n| sfHookReturnString     | The string returned in the first two parameters of `accept` or `rollback`, if any.                                                                           |\n| sfHookInstructionCount | The total number of webassembly instructions that were executed when the Hook ran.                                                                           |\n| sfHookEmitCount        | The total number of [Emitted Transactions](emitted-transactions.md) produced by the Hook.                                                                    |\n| sfHookExecutionIndex   | The order in which the Hook was executed (as distinct from other Hook Executions on the same Originating Transaction.)                                       |\n| sfHookStateChangeCount | The number of [Hook State](state-management.md) changes the Hook made during execution.                                                                      |","src/content/docs/docs/hooks/concepts/execution-metadata.mdx","84bd9b09d3327324","docs/hooks/concepts/chaining",{"id":524,"data":526,"body":532,"filePath":533,"digest":534,"deferredRender":14},{"title":527,"description":528,"editUrl":14,"head":529,"template":16,"sidebar":530,"pagefind":14,"draft":18},"Chaining","Chain multiple hooks together to do more useful tasks",[],{"hidden":18,"attrs":531},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"tip\" title=\"Hook Design Philosophy\">\n_Each Hook should do one thing, and do it really well._\n\u003C/Aside>\n\n### History\n\nIn the early days of Hooks it was only possible to install one Hook per account. This meant users were forced to produce omnibus Hooks if they wanted to do more than one thing: for example offset carbon and firewall at the same time.\n\nThis was counter to the Hook Design Philosophy, so Hook Chaining was introduced.\n\n### Chaining\n\nA Hook Chain is a sequence of up to **10** Hooks installed on an Xahau account.\n\n* A Hook Chain executes successfully when every Hook in the chain has been individually executed and subsequently calls [accept](../technical/hooks-functions/control/accept.md).\n* Each chain's execution starts at chain position 0 and ends at chain position 9. If a position is blank (because it was never filled or because the hook that was installed there has been removed) then that position is skipped and treated as successful.\n* In order for a transaction to succeed, both ends of the transaction (sending side and receiving side) must have executed successfully. This means if there is a Hook Chain installed on both sides, then both Hook Chains must execute successfully for the transaction to succeed.\n\nHooks are installed into the chain using the [SetHook Transaction](sethook-transaction.md). When they are installed, the installer may specify install-time [Parameters](parameters.md) which may change the behaviour of the installed Hook.\n\n\u003Cfigure>\n![Example: Execution flow for a transaction passing through two Hook Chains](../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_0OucxySTRinbe13SITJT_5561b32-sethook-Page-3.png)\n\u003Cfigcaption>*Example: Execution flow for a transaction passing through two Hook Chains*\u003C/figcaption>\n\u003C/figure>\n\n### Chain Manipulation\n\nIn addition to the _install-time_ operations specified in the [SetHook Transaction](sethook-transaction.md), Hooks have some runtime control over chain execution:\n\n* A Hook may determine its own `HookHash` by calling [hook_hash](../technical/hooks-functions/hook-context/hook_hash.md).\n* A Hook may determine its location in the Hook Chain using [hook_pos](../technical/hooks-functions/hook-context/hook_pos.md).\n* A Hook may skip (or re-enable) another Hook further down the chain using [hook_skip](../technical/hooks-functions/hook-context/hook_skip.md).\n* A Hook may modify the [Parameters](parameters.md) of a Hook further down the chain using [hook_param_set](../technical/hooks-functions/hook-context/hook_param_set.md).\n\n### Weak Executions\n\nHook Chains are [Strongly Executed](weak-and-strong.md). However any Hook in any chain may flag that it requires a second, Weak Execution by calling [hook_again](../technical/hooks-functions/hook-context/hook_again.md). If all Hook Chains execute successfully then the originating transaction is applied. Once the originating transaction has been applied any Weak Executions may happen, in the following order:\n\n1. `cbak` execution if this was an Emitted Transaction.\n2. Weak Transactional Stake Holders who have opted in to allow a [Collect Call](collect-call.md). Execution order is first-come first-serve according to the event that caused the TSH to be flagged (such as pathing).\n3. Any _Again as Weak_ (AAW) Hooks. Execution order for AAW is first numerically according to Account ID then numerically according to Hook position.","src/content/docs/docs/hooks/concepts/chaining.mdx","dd17bf4b154faa2d","docs/hooks/concepts/emitted-transactions",{"id":535,"data":537,"body":543,"filePath":544,"digest":545,"deferredRender":14},{"title":538,"description":539,"editUrl":14,"head":540,"template":16,"sidebar":541,"pagefind":14,"draft":18},"Emitted Transactions","Your Hook can do a lot more than just block or allow transactions!",[],{"hidden":18,"attrs":542},{},"import { Aside } from '@astrojs/starlight/components';\n\n### Background\n\n**All** changes made to Xahau _must_ be the result of applying a valid transaction to the ledger. Thus if some change _X_ is made then some transaction _Y_ is responsible.\n\nWhen designing the Hooks API we needed a way for Hooks to make changes to the ledger _beyond_ simply accepting or rejecting a transaction. However attaching these changes to the Originating Transaction was confusing and resulted in a large increase in the general complexity of the system.\n\nSuppose for example that a Hook needs to send you some funds... the send operation would be effectively enacted onto the ledger by the Originating Transaction which might have been something completely unrelated such as an Account Set transaction. Additionally this send operation would need to be able to potentially trigger another Hook on the receiving end of a payment.\n\nThe solution: **Emitted Transactions**. We allow the Originating Transaction to do exactly what the contents of the Transaction say it will do. If our Hook needs to make an additional change to the ledger such as sending a payment, it creates and then _emits_ a brand new transaction.\n\n### What are Emitted Transactions?\n\nEmitted Transactions are _new_ transactions created by the execution of a Hook and entered into consensus for processing in the next ledger. The transaction may be of any Transaction Type but must follow strict emission rules.\n\nTo emit a transaction the Hook first prepares the serialized transaction then calls [emit](../technical/hooks-functions/emitted-transaction/emit-1.md).\n\nBecause emitted transactions can trigger Hooks in the next ledger which in turn may emit more transactions, all emitted transactions carry a `burden` and a `generation` field in their `EmitDetails` block. The `EmitDetails` block replaces the signature field in a traditional transaction.\n\nThe `burden` and `generation` fields collectively prevent [Fork bomb](https://en.wikipedia.org/wiki/Fork_bomb) attacks on the ledger by exponentially increasing the cost of exponentially expanding emtited transactions.\n\nIt is important to note that the Hooks API follows the strict rule of _no rewriting_. You _must_ present an emitted transaction in full, valid and canonically formed to xahaud for emission or it will be rejected. It is not xahaud's job to build your transaction for you. The Hook must do this itself.\n\n### Callbacks\n\nAs introduced in [Introduction and Terminology](terminology.md) emitted transactions trigger callbacks when they are accepted into a ledger. Due to the decentralised nature of consensus acceptance into a ledger of an emitted transaction is **not a guarantee**, although it is usually all-but guaranteed.\n\nIf an emitted transaction expires before it can be accepted into a ledger (for any number of reasons: the ledgers may be full, the fee may be too high for the emitted transaction or the emitted transaction may be somehow invalid) then a _pseudo transaction_ is created in the ledger to clean up the emitted transaction. This pseudo transaction also calls the callback of your hook, with `parameter = 1` to indicate the emitted transaction indeed failed.\n\n### Emission Rules\n\nThe [emit](../technical/hooks-functions/emitted-transaction/emit-1.md) Hook API will enforce the following rules on a proposed (to be emitted) transaction.\n\n| # | Emission Rule                                          | Explanation                                                                                                                                                                                                                                              |\n| - | ------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1 | `sfSequence` = 0                                       | Emitted Transactions _do not_ increase the sequence number of the Hook Account. This must always be set to zero.                                                                                                                                         |\n| 2 | `sfPubSigningKey` = 0                                  | Emitted Transactions are not signed but this is a required field for xrpld processing. It must be set to all zeros.                                                                                                                                      |\n| 3 | `sfEmitDetails` present and valid                      | Emitted Transactions require an `sfEmitDetails` block and this must be correctly filled. See EmitDetails section below.                                                                                                                                  |\n| 4 | `sfSignature` absent                                   | This field must be absent in the emitted transaction because if it were not then the transaction would be ambiguous.                                                                                                                                     |\n| 5 | `LastLedgerSequence` valid and in the future           | All emitted transactions must have a last ledger sequence set so that the Hook knows if the emitted transaction failed (since it did not get a callback in time). This is currently set to a maximum of 5 ledgers after the current ledger.              |\n| 6 | `FirstLedgerSequence` valid and set to the next ledger | All emitted transactions must have a first ledger sequence set to the next ledger (after the current ledger) so that Hooks do not recursively cascade within a single ledger. This is currently enforced to be the next ledger after the current ledger. |\n| 7 | Fee appropirately computed and set                     | The fee is dependent on the size of the emtited transaction and the burden on the network (i.e. whether this emitted transaction was the result of another emitted transaction.)                                                                         |\n| 8 | Generation cap not exceeded                            | An emitted transaction can produce other emitted transactions, and these can form a chain. The length of the chain is the `sfEmitGeneration`. This is currently capped at 10.                                                                            |\n\n### EmitDetails block\n\nAll emitted transactions must contain an `sfEmitDetails` object correctly populated with the fields in the table below.\n\n| Field             | Required Value| Description                                                                                                                                                                                                                                                                     |\n| ----------------- || ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| sfEmitGeneration  | \u003Cp>If the Originating Transaction was itself an emitted transaction then one more than the \u003Ccode>sfEmitGeneration\u003C/code> of that transaction.\u003Cbr />\u003Cbr />If the Originating Transaction was not an emitted transaction then \u003Ccode>1\u003C/code>.\u003Cbr />\u003Cbr />This should be populated using \u003Ca href=\"../technical/hooks-functions/emitted-transaction/etxn_generation.md\">etxn_generation\u003C/a>.\u003C/p>                                                                                                                                                                  | This field keeps track of a chain of emitted transactions that in turn cause other transactions to be emitted.                                                                                                                                                                  |\n| sfEmitBurden      | \u003Cp>If the Originating Transaction was itself an emitted transaction then the \u003Ccode>burden\u003C/code> of the Originating Transaction multiplied by the maximum number of transactions the Hook has declared it will emit using \u003Ca href=\"../technical/hooks-functions/emitted-transaction/etxn_reserve.md\">etxn_reserve\u003C/a>.\u003Cbr />\u003Cbr />If the Originating Transaction was not an emitted transaction then \u003Ccode>1\u003C/code>.\u003Cbr />\u003Cbr />This should be populated using \u003Ca href=\"../technical/hooks-functions/emitted-transaction/etxn_burden.md\">etxn_burden\u003C/a>.\u003C/p> | This field is a heuristic for detecting forkbombs. Fees are based on burden and will increase exponentially when a chain reaction is started to prevent the network becoming overun by self-reinforcing emitted transactions.                                                   |\n| sfEmitParentTxnID | The transaction ID of the Originating Transaction                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | The Hook Execution that emitted the transaction is connected to the Originating Transaction. Therefore this field is always required for the efficient tracing of behaviour.                                                                                                    |\n| sfEmitNonce       | A special deterministic nonce produced by a call to [nonce](../technical/hooks-functions/emitted-transaction/etxn_nonce.md)                                                                                                                                                                                                                                                                                                                                                                                                                           | Emitted Transactions would be identical with the same fields and therefore have identical transaction hashes if a nonce were not used. However every node on the network needs to agree on the nonce, so a special Hook API to produce a deterministic nonce is made available. |\n| sfEmitCallback    | The 20 byte Hook Account| This field is used by xahaud when it needs to intitate a callback, such that it knows which Hook and account to initate the callback on. Callbacks happen when an emitted transaction is accepted into a ledger.                                                                |\n\n\u003CAside type=\"tip\" title=\"Check the examples\">\nThe [Example Hooks](https://github.com/XRPL-Labs/xrpld-hooks/tree/hooks-ssvm/hook-api-examples), in particular Peggy, Carbon and Doubler, demonstrate how to emit both simple and more complicated transactions.\n\u003C/Aside>","src/content/docs/docs/hooks/concepts/emitted-transactions.mdx","b8bb8450a8089c25","docs/hooks/concepts/grants",{"id":546,"data":548,"body":554,"filePath":555,"digest":556,"deferredRender":14},{"title":549,"description":550,"editUrl":14,"head":551,"template":16,"sidebar":552,"pagefind":14,"draft":18},"Grants","Hook Grants",[],{"hidden":18,"attrs":553},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"caution\">\n  Most Hook Developers will rarely need to use HookGrants, and should exercise extreme caution when granting state mutation permission to foreign Hooks and accounts.\n\n  While a HookGrant cannot be used to directly steal funds, intentional external modification of a Hook's State may lead a Hook to behave in an unintended way, which in some cases could lead to a theft.\n  \n  If you think you need to use a Grant, please re-check your design first to ensure you actually need to use one before continuing.\n\u003C/Aside>\n\n### Grants\n\nGrants provide a way for a Hook Installer to assign [State Management](state-management.md) permissions to a _foreign_ Hook on other Xahau accounts.\n\nA [SetHook Transaction](sethook-transaction.md) may specify a `HookGrants` array within any `Hook` object in its `Hooks` array. The `HookGrants` array contains one or more `HookGrant` objects (up to 8).\n\nUnlike [Parameters](parameters.md), the `HookGrants` array is always set exactly as specified in the [SetHook Transaction](sethook-transaction.md). Therefore if you wish to update a particular `HookGrant` whilst retaining multiple other `HookGrant` entires that were previously set, you must first obtain the old `HookGrants` array, modify it, and then resubmit the entire array in an [_Update_ Operation](sethook-transaction.md).\n\nTo delete all Grants submit an empty `HookGrants` array.\n\n\u003CAside type=\"caution\">\n  Unlike [Parameters](parameters.md), the `HookGrants` array is always set exactly as specified in the [SetHook Transaction]\n(sethook-transaction.md).\n\u003C/Aside>\n\nA Grant permits a foreign XRPL account or Hook to modify the Hook State within the namespace of the specific Hook for which the Grant is defined.\n\nThe HookGrant must specify at least:\n\n* `HookHash`\\\n  And may also specify an account:\n* `Authorize`\n\nOnly the Hook specified by HookHash may modify the Hook State within the namespace of the Hook for which the HookGrant is specified. If `Authorize` is specified then this permission is tightened further to only the Hook specified by the HookHash when it is installed on the account specified by `Authorize`.\n\n\u003CAside type=\"tip\">\n  Grants only apply to external Hooks and never limit the operation of Hooks with respect to the Hook State on the account they are installed on.\n\u003C/Aside>\n\n### Example\n\n```json\nAccount: \"rALicebv3hMYNBWtu1VEEWkToArgYsYERs\",\nTransactionType: \"SetHook\",\nHooks:\n[   \n    {   \n        Hook: {\n            ...,\n            HookNamespace: \"3963ADEB1B0E8934C0963680531202FD511FF1E16D5864402C2DA63861C420A8\",\n            HookGrants:\n            [   \n                {   \n                    HookGrant:    // first grant\n                    {   \n                        HookHash:  \"78CAF69EEE950A6C55A450AC2A980DE434D624CD1B13148E007E28B7B6461CC8\"\n                    },\n                    HookGrant:    // second grant\n                    {   \n                        Authorize: \"rCLairev2ma2gNZdcHJeTk7fCQ1ki84vr9\",\n                        HookHash:  \"A5B8D62154DA1C329BE13582086B52612476720CEBD097EB85CEE1455E1C70A6\"\n                    }\n                },  \n            ]   \n        }   \n    }   \n],  \n... \n```\n\nThe _first grant_ above allows:\n\n* any instance of the Hook whose code that hashes to `78CAF69EEE950A6C55A450AC2A980DE434D624CD1B13148E007E28B7B6461CC8`\n* executing on **any account**\n* to modify the Hook State of account `rALicebv3hMYNBWtu1VEEWkToArgYsYERs`\n* inside the Namespace `3963ADEB1B0E8934C0963680531202FD511FF1E16D5864402C2DA63861C420A8`\n\nThe _second grant_ above allows:\n\n* any instance of the Hook whose code that hashes to `A5B8D62154DA1C329BE13582086B52612476720CEBD097EB85CEE1455E1C70A6`\n* but only when executed on account `rCLairev2ma2gNZdcHJeTk7fCQ1ki84vr9`\n* to modify the Hook State of account `rALicebv3hMYNBWtu1VEEWkToArgYsYERs`\n* inside the Namespace `3963ADEB1B0E8934C0963680531202FD511FF1E16D5864402C2DA63861C420A8`\n\n### Using the Grant\n\nTo make use of a grant, a Hook modifies State objects on a foreign account by calling [state_foreign_set](../technical/hooks-functions/state/state_foreign_set.md).","src/content/docs/docs/hooks/concepts/grants.mdx","9768b120fdd07353","docs/hooks/concepts/floating-point-numbers-xfl",{"id":557,"data":559,"body":565,"filePath":566,"digest":567,"deferredRender":14},{"title":560,"description":561,"editUrl":14,"head":562,"template":16,"sidebar":563,"pagefind":14,"draft":18},"Floating Point Numbers (XFL)","High precision calculations are native to Hooks.",[],{"hidden":18,"attrs":564},{},"import { Aside } from '@astrojs/starlight/components';\n\n### Background\n\n[Floating point numbers](https://en.wikipedia.org/wiki/Floating-point_arithmetic) are widely used in computer science to do calculation of finite precision but arbitrary scale numbers.\n\nMost modern CPUs are capable of performing fast floating point operations using the [IEEE binary floating point standard](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) however `xahaud` does **not** use this format. Instead Xahau uses a [bespoke decimal floating point standard](/docs/protocol-reference/binary-format).\n\nThis custom format has three basic properties:\n\n1. The format is inherently decimal, expressed as a decimal `mantissa` multipled by `10` to the power of an `exponent`.\n2. All values expressed have 16 significant (decimal) figures.\n3. The range of exponents is `-96` to `+80`\n\nWhen serialized the mantissa is 54 bits, and the exponent is 8 bits, with a final sign bit bringing the total size of the serialized floating point to 63 bits.\n\n### What is XFL?\n\n[XLS-17d](https://github.com/XRPLF/XRPL-Standards/discussions/39) is an XRPL standards proposal that defines an efficient way to pack and store xrpld floating point numbers (as described above).\n\nXFLs store the bits of the floating point number within an _enclosing number_. This is always an `int64_t`. Negative enclosing numbers represent invalid XFLs (for example as a result of division by zero.)\n\n\u003CAside type=\"tip\">\n  Use the XFL-tool \u003Ca href=\"https://richardah.github.io/xfl-tools/\" target=\"_blank\" rel=\"noopener\">here\u003C/a> to compose and decompose XFLs in your browser!\n\u003C/Aside>\n\nSome example XFLs follow\n\n| loating Point Value | Enclosing Number    | Representation                |\n| ------------------- | ------------------- | ----------------------------- |\n| -1                  | 1478180677777522688 | -1000000000000000 \\* 10^(-15) |\n| 0                   | 0                   | 0 (_canonical zero_)          |\n| 1                   | 6089866696204910592 | +1000000000000000 \\* 10^(-15) |\n| _PI_                | 6092008288858500385 | +3141592653589793 \\* 10^(-15) |\n| -_PI_               | 1480322270431112481 | -3141592653589793 \\* 10^(-15) |\n\nThis format is very convenient for Hooks, as Hooks can only exchange _integer_ values with xrpld. By enclosing the floating point inside an integer in a well defined way it becomes possible to do complex floating point computations from a Hook. This is useful for computing exchange rates.\n\n### Canonical Zero\n\nFloating point regimes typically have a number of different ways to express zero, which can be a problem for testing for zero. For example `0 x 10 ^ 1` is zero and `0 x 10 ^ 2` is also zero. For this reason there is a canonical zero enforced by the standard and the Hook API. The canonical zero is also enclosing number zero (`0`).\n\n### Hook Float API\n\nOnce you have an XFL you can use the Float API to do various computations. The Float API appears in the table below. Each API takes one or more XFL enclosing numbers and returns an XFL enclosing number. Negative return values _always_ represent a computational error (such as division by zero). There are no valid negative enclosing numbers.\n\n| Hook API                                                                | What it does                                                          |\n| ----------------------------------------------------------------------- | --------------------------------------------------------------------- |\n| [float_set](../technical/hooks-functions/float/float_set.md)           | Create a float from an exponent and mantissa                          |\n| [float_multiply](../technical/hooks-functions/float/float_multiply.md) | Multiply two XFL numbers together                                     |\n| [float_mulratio](../technical/hooks-functions/float/float_mulratio.md) | Multiply an XFL floating point by a non-XFL numerator and denominator |\n| [float_negate](../technical/hooks-functions/float/float_negate.md)     | Negate an XFL floating point number                                   |\n| [float_compare](../technical/hooks-functions/float/float_compare.md)   | Perform a comparison on two XFL floating point numbers                |\n| [float_sum](../technical/hooks-functions/float/float_sum.md)           | Add two XFL numbers together                                          |\n| [float_sto](../technical/hooks-functions/float/float_sto.md)           | Output an XFL as a serialized object                                  |\n| [float_sto_set](../technical/hooks-functions/float/float_sto_set.md)  | Read a serialized amount into an XFL                                  |\n| [float_invert](../technical/hooks-functions/float/float_invert.md)     | Divide one by an XFL floating point number                            |\n| [float_divide](../technical/hooks-functions/float/float_divide.md)     | Divide an XFL by another XFL floating point number                    |\n| [float_one](../technical/hooks-functions/float/float_one.md)           | Return the number 1 represented in an XFL enclosing number            |\n| [float_exponent](../technical/hooks-functions/float/float_exponent.md) | Get the exponent of an XFL enclosing number                           |\n| [float_mantissa](../technical/hooks-functions/float/float_mantissa.md) | Get the mantissa of an XFL enclosing number                           |\n| [float_sign](../technical/hooks-functions/float/float_sign.md)         | Get the sign of an XFL enclosing number                               |\n| float_exponent_set                                                    | Set the exponent of an XFL enclosing number                           |\n| float_mantissa_set                                                    | Set the mantissa of an XFL enclosing number                           |\n| float_sign_set                                                        | Set the sign of an XFL enclosing number                               |\n| [float_int](../technical/hooks-functions/float/float_int.md)           | Convert an XFL floating point into an integer (floor)                 |\n| [float_root](../technical/hooks-functions/float/float_root.md)         | Compute the nth root of an XFL                                        |\n| [float_log](../technical/hooks-functions/float/float_log.md)           | Compute the decimal log of an XFL                                     |\n\n\u003CAside type=\"caution\">\n  You should never do any direct math or comparison on the _enclosing number_. This will almost always result in incorrect computations.\n\n  The _sole exception_ is checking for canonical zero.\n\u003C/Aside>\n\n### Example\n\nIn the below example an exchange rate conversion is performed, followed by a high precision fraction multiplication.\n\n```c\nint64_t max_vault_pusd =\n    float_multiply(vault_xrp, exchange_rate);\n\nmax_vault_pusd = \n    float_mulratio(max_vault_pusd, 0,\n        NEW_COLLATERALIZATION_NUMERATOR, NEW_COLLATERALIZATION_DENOMINATOR);\n```\n\n\u003CAside type=\"tip\">\n  If a float API returns a negative value and you do not check for negatives, then passing that negative value into another float API will also produce a negative value. In this way, errors are propagated much like `NaN` (not a number) is propagated in other languages.\n  \n  If you ever end up with a negative enclosing number, an error occurred somewhere in your floating point calculations.\n\u003C/Aside>","src/content/docs/docs/hooks/concepts/floating-point-numbers-xfl.mdx","ebd83a6b3105ee65","docs/hooks/concepts/hook-fees",{"id":568,"data":570,"body":575,"filePath":576,"digest":577,"deferredRender":14},{"title":571,"description":517,"editUrl":14,"head":572,"template":16,"sidebar":573,"pagefind":14,"draft":18},"Hook Fees",[],{"hidden":18,"attrs":574},{},"### Hook Creation Fees\n\nSetHook transactions are charged per byte of created webassembly. The rate is 500 drops per byte. Thus a 1kib Hook will cost 0.5 XAH to create.\n\n### Hook Execution Fees\n\nWhen Hooks are [Strongly Executed](weak-and-strong.md) the originating transaction must pay for the Strong Executions in the originating transaction's fee.\n\nHook Execution fees are charged at a rate of 1 drop per web assembly instruction in the worst-case execution of the function `hook` (or `cbak` in the case of a callback). Thus a small Hook with a lot of looping may end up attracting high runtime fees.\n\n### Fee RPC Helper\n\nTransaction fees on a ledger with the Hooks Amendment enabled become non-trivial to compute for end-users and/or wallet applications. This is because strong hooks must be paid for by the originator of a transaction, and there may be as many as 4 strong hooks on the sending account and 4 on the receiving account, as well as any other strong transactional stakeholders involved (as can be the case with some exotic transaction types). Further, if the transaction is a SetHook then the size of the parameters, the size of the code and whether it is a _create_ operation or an _install_ operation all determine the size of the fee.\n\nTherefore it is highly recommended that **all** transactions be run through the updated fee RPC call before they are submitted to the ledger.\n\nTo invoke the RPC call:\n\n1. Open a websocket connection to the Hooks node you will be working with.\n2. Compose the serialized transaction you wish to know the fee for with the following:\n\n* `Fee: \"0\"`\n* `SigningPubKey: \"\"` (That is: 0 byte VL of type 0x73. In hex:`0x7300`.)\n* Do **not** sign the transaction.\n\n3. Submit it as a hex blob to the RPC as follows:\n\n```json\n{\"command\":\"fee\", \"tx_blob\":\"\u003Chex blob>\"}\n```\n\nFor HTTP POST RPC submit it as follows:\n\n```json\n{\"method\":\"fee\", \"params\": [{\"tx_blob\":\"\u003Chex blob>\"}] }\n```\n\nThe response should look something like\n\n```json\n{\n  result: {\n    drops: {\n      base_fee: '130520',\n    },\n  //...\n  },\n  type: 'response'\n}\n```\n\nTake the base fee and set it as the `Fee` field in the transaction. Now sign and submit it as per the normal transaction submission process.\n\nIf there is an invalid value for `tx_blob` or `tx_blob` is missing, a regular JSON result will be returned with a `base_fee` of 10.\n\n### Emission Fees\n\nHooks have access to the same computation the _Fee RPC Helper_ does. To use this simply call [etxn_fee_base](../technical/hooks-functions/emitted-transaction/etxn_fee_base.md) with a buffer containing the serialised transaction as the arguments. As with the RPC call, you must ensure that the `Fee` field is present in the serialised transaction. The value is irrelevant.\n\nWhen `etxn_fee_base` returns the recommended fee you may use [sto_emplace](../technical/hooks-functions/serialization/sto_emplace.md) to emplace it into the serialised transaction before emission. The relevant field is `sfFee`.","src/content/docs/docs/hooks/concepts/hook-fees.mdx","ad3bc38a78d4810a","docs/hooks/concepts/debugging-hooks",{"id":578,"data":580,"body":586,"filePath":587,"digest":588,"deferredRender":14},{"title":581,"description":582,"editUrl":14,"head":583,"template":16,"sidebar":584,"pagefind":14,"draft":18},"Debugging Hooks","How to print \"hello world\" from your Hook!",[],{"hidden":18,"attrs":585},{},"import { Aside } from '@astrojs/starlight/components';\n\n### How can I debug a Hook?\n\nThe Hook API provides a set of functions in the namespace `trace` which write output to the `xrpld` log file when xrpld is configured with the _trace_ log-level. These functions, generally speaking, allow you to see the value of variables, buffers and otherwise trace the execution and state of a Hook at runtime.\n\n\u003CAside type=\"tip\">\nAt time of writing there is no interactive Hook Debugger. You must use the trace functions.\n\u003C/Aside>\n\n### Trace APIs\n\nThe following `trace` functions are available in the Hooks API\n\n| Hook API                                                                | What it does                                                                              |\n| ----------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |\n| [trace](../technical/hooks-functions/trace-debug/trace.md)              | Print a utf-8 message, followed by a user-specified buffer (this last optionally as hex.) |\n| [trace_num](../technical/hooks-functions/trace-debug/trace_num.md)     | Print a utf-8 message, followed by an integer.                                            |\n| [trace_float](../technical/hooks-functions/trace-debug/trace_float.md) | Print a utf-8 message, followed by an XFL Floating point number.                          |\n\n### Example\n\nThe following code will print a single trace line then accept the Originating Transaction.\n\n```c\n#include \"../hookapi.h\"\nint64_t hook(int64_t reserved)\n{\n  trace_num(SBUF(\"A number\"), 10);\n  accept(0,0,0);\n  return 0;\n}\n```\n\nAn example of the log-line produced by `xahaud` when a payment is sent out of or into the Hook Account:\n\n```\n2021-Apr-13 13:59:11.083700726 UTC View:TRC\n    HookTrace[rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh-rE3SfnjwfzZFL3JK9cLVfJuy8Ar1XnCqPw]:\n        A number 10\n```\n\nThe above appears in the log as all-one-line, but split here for visibility.\n\n\u003CAside type=\"tip\" title=\"Use testnet\">\nThe [Xahau Testnet](https://xahau-test.net/) is the perfect place to test your Hooks.\n\u003C/Aside>\n\n### Log format\n\nA breakdown of the log format appears in the table below\n\n| Part                                        | Description                                                                                                                                                            | # |\n| ------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | - |\n| 2021-Apr-13 13:59:11.083700726 UTC View:TRC | `xahaud`'s prefix to the log line                                                                                                                                      | 1 |\n| HookTrace                                   | This is a trace initiated by the Hook itself not some other information about the Hook. Other information is available on tags `HookError`, `HookEmit` and `HookInfo`. | 2 |\n| \\[rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh        | The first account in the square brackets is the Hook Account.                                                                                                          | 3 |\n| -rE3SfnjwfzZFL3JK9cLVfJuy8Ar1XnCqPw]:       | The second account in the square brackets is the Originating Account.                                                                                                  | 4 |\n| A number                                    | This is the message the Hook was told to deliver before the trace payload                                                                                              | 5 |\n| 10                                          | This is the trace payload                                                                                                                                              | 6 |\n\n\u003CAside type=\"tip\">\n`Xahaud` produces a lot of output. It is therefore generally advisible to grep logs for the account/s you are interested in.\n\nFor example use: `tail -f log | grep HookTrace | grep \u003Caccount>`\n\u003C/Aside>","src/content/docs/docs/hooks/concepts/debugging-hooks.mdx","0f20c3f8cccfdacb","docs/hooks/concepts/hookon-field",{"id":589,"data":591,"body":597,"filePath":598,"digest":599,"deferredRender":14},{"title":592,"description":593,"editUrl":14,"head":594,"template":16,"sidebar":595,"pagefind":14,"draft":18},"HookOn Field","Specify which transaction types a Hook should be triggered on",[],{"hidden":18,"attrs":596},{},"import { LinkCard } from '@astrojs/starlight/components';\n\n### Understanding the HookOn field\n\nEach bit in this unsigned 256-bit integer indicates whether the Hook should execute on a particular transaction type. All bits are _active low_ **except** bit 22 which is _active high_. Since 22 is ttHOOK_SET this means the default value of all 0's will not fire on a SetHook transaction but will fire on every other transaction type. This is a deliberate design choice to help people avoid bricking their Xahau account with a misbehaving hook.\n\nBits are numbered from right to left:\n\n* bit 0 - right most, i.e. the least significant bit.\n* bit 63 - the left-most, i.e. the most significant bit.\n\nExamples (assuming a 256-bit unsigned integer type):\n\n1. If we want to completely disable the hook:\n\n```c\n~(1ULL \u003C\u003C 22) /* every bit is 1 except bit 22 which is 0 */\n```\n\n2. If we want to disable the hook on everything except ttPAYMENT:\n\n```c\n~(1ULL \u003C\u003C 22) & ~(1ULL)\n```\n\n3. If we want to enable the hook on everything except ttHOOK_SET\n\n```c\n0\n```\n\n4. If we want to enable hook firing on ttHOOK_SET (dangerous) and every other transaction type:\n\n```c\n(1ULL \u003C\u003C 22)\n```\n\n### HookOn Calculator\n\n\u003CLinkCard title=\"HookOn Calculator\" href=\"https://richardah.github.io/xrpl-hookon-calculator/\" />","src/content/docs/docs/hooks/concepts/hookon-field.mdx","4d820329c5f35544","docs/hooks/concepts/namespaces",{"id":600,"data":602,"body":608,"filePath":609,"digest":610,"deferredRender":14},{"title":603,"description":604,"editUrl":14,"head":605,"template":16,"sidebar":606,"pagefind":14,"draft":18},"Namespaces","Prevent state clobbering by using the correct namespace",[],{"hidden":18,"attrs":607},{},"### Namespaces\n\nTo avoid two or more Hooks installed on the same account unintentionally clobbering each-other's [Hook State](state-management.md), a 32 byte namespace must be provided when creating or installing each Hook.\n\nThe namespace may be any arbitrary 32 byte value the developer chooses. Provided the namespace is unique in the Hook chain no state clobbering will occur.\n\nWe strongly recommended using `SHA256` over the developer's working name for the Hook. SHA256 is one of the two hashing algorithms used in the derivation of Xahau addresses (from an account master key), and, as such, it should be readily available to the developer.\n\nThe `HookNamespace` field is supplied as a 32 byte _hex_ blob inside each `Hook` object in a `Hooks` array when [executing a SetHook transaction](sethook-transaction.md).\n\nThe configured Namespace a Hook operates under alters the [Keylets](slots-and-keylets.md) its [State](state-management.md) is stored under. Therefore two Hooks under two different Namespaces installed on the same Xahau account may use the same state key to refer to different state objects. Conversely, two different Hooks using the same Namespace on the same Xahau account can access and modify eachother's state objects using the same state keys.\n\n### Example\n\nIn javascript, importing the `ripple-address-codec` yields access to SHA256.\\\n(It is also possible to use `crypto.subtle` in browser, or `crypto.createHash` in node to access this hash algorithm.)\n\n```js\nHookNamespace: addr.codec.sha256('carbon').toString('hex')\n```\n\n### Default Namespace\n\nThe first user to [set a novel Hook](sethook-transaction.md) defines a `HookNamespace` which becomes the _Default Namespace_ for that Hook. This means any subsequent users who [reference the same _HookDefinition_](reference-counted-hook-definitions.md) will receive this originally set Namespace by default.\n\nThe subsequent user may specify their own Namespace, overriding the Default Namespace for their installation only.\n\n### Hook APIs Affected\n\nChoice of HookNamespace affects the behaviour of the following Hook APIs:\n\n* [state](../technical/hooks-functions/state/)\n* [state_set](../technical/hooks-functions/state/state_set.md)\n\n### Namespace API Helper\n\nSee [account_info](../technical/hooks-functions/websocket-apis/account_info.md) and [account_namespace](../technical/hooks-functions/websocket-apis/account_namespace.md) for information about how to query the ledger regarding namespaces.","src/content/docs/docs/hooks/concepts/namespaces.mdx","547ae3ebb2693385","docs/hooks/concepts/loops-and-guarding",{"id":611,"data":613,"body":619,"filePath":620,"digest":621,"deferredRender":14},{"title":614,"description":615,"editUrl":14,"head":616,"template":16,"sidebar":617,"pagefind":14,"draft":18},"Loops and Guarding","Guards are needed to perform loops in a Hook.",[],{"hidden":18,"attrs":618},{},"import { Aside } from '@astrojs/starlight/components';\n\n### What are guards?\n\nHooks are deliberately not [Turing Complete](https://en.wikipedia.org/wiki/Turing_completeness). This means arbitrary looping is forbidden. Instead you must _guard_ your loops against a hard \"maximum iteration\" boundary.\n\nA guard is a marker placed in your code at the top of each loop. The marker informs the Xahau what the upper bound of your loop will be _in every possible scenario_. Thus if your loop usually executes twice but sometimes executes _500_ times, then your guard will say 500.\n\nGuards are used by the Xahau to determine the _worst case execution time_ (in instructions) of your Hook before execution. This is the basis for the fee the Xahau charges for the execution of a Hook and makes execution times predictable and controllable.\n\n\u003CAside type=\"tip\">\n  Existing developers migrating from other smart contract platforms may find guards to be annoying at first, but once you get used to them they are no harder to use than a normal for-loop.\n\u003C/Aside>\n\n### The guard function\n\nThe guard function tells the ledger the **maximum number of iterations** a loop will make. Specifically the function takes two arguments:\n\n```c\nint32_t _g (uint32_t id, uint32_t maxiter);\n```\n\nThe first argument `id` is the identifier for this guard. This is a unique constant chosen by the developer, typically the line number in the source file is used.\n\nThe second argument `maxiter` is a promise the developer makes to the ledger that this guard will not be _hit_ more than `maxiter` times during the execution of the Hook. If the guard call is executed more than this many times the Hook will automatically rollback with a `GUARD_VIOLATION` ([Hook API return codes](ref:negative-return-codes)). Because the guard will be hit _before_ the loop condition is checked, it is important to add one to the total number of expected iterations. (Note: The GUARD() macro already adds one).\n\n\u003CAside type=\"caution\">\n  Guards must be set using numerical literals. You cannot use a variable or runtime value in a Guard.\n\u003C/Aside>\n\n### Guard enforcement\n\nConsider the following for-loop in C:\n\n```c\n#define GUARD(maxiter) _g(__LINE__, (maxiter)+1)\nfor (int i = 0; GUARD(3), i \u003C 3; ++i)\n{\n  ...\n}\n```\n\nIn C, the comma operator executes each expression in a list of expressions (e.g. `A, B, C`) and returns the last expression (e.g. `C`). Thus the condition above is still `i \u003C 3`, but the guard is called before the condition is checked. This is the only way to satisify the _guard rule_ when using a for-loop in C.\n\n\u003CAside type=\"tip\" title=\"The Guard Rule\">\n  A call to \u003Ccode>_g\u003C/code> (the guard function) must be the first branch instruction after a loop instruction.\n\u003C/Aside>\n\nBelow appears the webassembly output when the above is compiled. Note the guard function being called at the start of the loop. The only instructions allowed before this call are non-branch instructions (typically manipulating constants.)\n\n```\n    block  ;; label = @1\n      loop  ;; label = @2\n        i32.const 3\n        i32.const 14\n=====>  call $_g          \u003C=====\n        drop\n        ...\n```\n\n### Nested Loops\n\nWhen using nested loops the `maxiter` argument must reflect the total number of times the guard will be _hit_. This means you must multiply the nestings together.\n\nConsider the example below:\n\n```c\n#define GUARD(maxiter) _g(__LINE__, (maxiter)+1)\nfor (int i = 0; GUARD(3), i \u003C 3; ++i)\n{\n  for (int j = 0; GUARD(15), j \u003C 5; ++j)\n  {\n    ...\n  }\n}\n```\n\nNotice the inner-loop's guard is set to **15**. You must multiply the loops together to compute the maximum number of times an inner guard will be hit during Hook execution.\n\n### No recursion\n\nCalls to non-Hook API functions are disallowed in the Hooks ammendment. All user code must fit within the two allowed Hook functions `cbak` and `hook`.\n\n\u003CAside type=\"caution\">\n  Failure to use guards correctly will cause an attempted \u003Ccode>SetHook\u003C/code> transaction to be rejected.\n\u003C/Aside>","src/content/docs/docs/hooks/concepts/loops-and-guarding.mdx","0021f5e07d765632","docs/hooks/concepts/slots-and-keylets",{"id":622,"data":624,"body":630,"filePath":631,"digest":632,"deferredRender":14},{"title":625,"description":626,"editUrl":14,"head":627,"template":16,"sidebar":628,"pagefind":14,"draft":18},"Slots and Keylets","Inspect and manipulate on-ledger objects.",[],{"hidden":18,"attrs":629},{},"import { Aside } from '@astrojs/starlight/components';\n\n### Background\n\nXahau contains numerous heterogenous object types which a Hook has read-access to. For example: _transactions_, _accounts_, _ledgers_, and the subcomponents of each of these, to name just a few.\n\nIt is very easy to carelessly program a computer to do a lot of needless copy operations when disciplined access to the same underlying data (i.e. through a view) would suffice. The deliberate avoidance of copy operations in programming is referred to as [Zero copy](https://en.wikipedia.org/wiki/Zero-copy) in programming.\n\nWith Hooks the same principle applies. We want to avoid copying where possible. In particular we want to avoid as much as possible needlessly copying large objects such as whole ledgers, we also want to avoid serializaing and unserializing these where possible.\n\n### What are slots?\n\nSlots are part of the Hook API and provide a zero-copy _heterogenous_ access system for on-ledger objects and transactions.\n\n* Each Hook has access to 255 slots during runtime.\n* Each slot may be empty or may contain a _slotted_ object.\n* The slot API allows traversal into inner objects, and allows these inner objects themselves to be slotted.\n* The slot API allows slotted objects to be dumped to a buffer or otherwise read by the Hook.\n\nThe avilable slot APIs are:\n\n| Hook API                                                             | What it does                                                                           |\n| -------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |\n| [slot](../technical/hooks-functions/slot/slot.md)                    | Serialize and output a slotted object                                                  |\n| [slot_clear](../technical/hooks-functions/slot/slot_clear.md)       | Free up a currently occupied slot                                                      |\n| [slot_count](../technical/hooks-functions/slot/slot_count.md)       | Count the elements of an array object in a slot                                        |\n| slot_id                                                             | Compute the canonical hash of the slotted object and return it                         |\n| [slot_set](../technical/hooks-functions/slot/slot_set.md)           | Locate an object based on its keylet and place it into a slot                          |\n| [slot_subarray](../technical/hooks-functions/slot/slot_subarray.md) | Index into a slotted array and assign a sub-object to another slot                     |\n| [slot_subfield](../technical/hooks-functions/slot/slot_subfield.md) | Index into a slotted object and assign a sub-object to another slot                    |\n| [slot_type](../technical/hooks-functions/slot/slot_type.md)         | Retrieve the field code of an object in a slot and, optionally, some other information |\n| [slot_float](../technical/hooks-functions/slot/slot_float.md)       | Parse the STI_AMOUNT in the specified slot and return it as an XFL enclosed number    |\n| [slot_size](../technical/hooks-functions/slot/slot_size.md)         | Compute the serialized size of an object in a slot                                     |\n\n### What are keylets?\n\nKeylets are used to locate (point to) on-ledger objects. In brief they are a _hash_ of identifying information from the object, which is the canonical _handle_ for that object.\n\nHooks use a serialized 34 byte keylet format which can be derrived using the important [util_keylet](ref:util_keylet) function. Without this looking up and slotting objects would be generally impossible.\n\n\u003CAside type=\"tip\">\n  The Hook APIs which accept a 34 byte keylet will also generally accept a 32 byte canonical transaction hash.\n\u003C/Aside>\n\n### Example\n\nIn the following example a 34 byte keylet for a `signers` object is used to slot that object.\n\n```c\nuint8_t keylet[34];\nif (util_keylet(SBUF(keylet), KEYLET_SIGNERS, SBUF(hook_accid), 0, 0, 0, 0) != 34)\n    rollback(SBUF(\"Notary: Internal error, could not generate keylet\"), 10);\n\n// then requesting XRPLD slot that keylet into a new slot for us\nint64_t slot_no = slot_set(SBUF(keylet), 0);\nif (slot_no \u003C 0)\n   rollback(SBUF(\"Notary: Could not set keylet in slot\"), 10);\n```","src/content/docs/docs/hooks/concepts/slots-and-keylets.mdx","d6eca12cafa36e73","docs/hooks/concepts/serialized-objects",{"id":633,"data":635,"body":641,"filePath":642,"digest":643,"deferredRender":14},{"title":636,"description":637,"editUrl":14,"head":638,"template":16,"sidebar":639,"pagefind":14,"draft":18},"Serialized Objects","Manipulate raw serialized xahaud objects!",[],{"hidden":18,"attrs":640},{},"### What are Serialized Objects?\n\nXahau has canonical [serialized](/docs/protocol-reference/binary-format) forms of all objects subject to consensus. When writing a Hook it is inevitable you will come across serialized objects. These manifest as buffers containing what might appear to the developer as opaque binary blobs. In fact you can read these with the [XRPL-Binary-Visualiser](https://richardah.github.io/xrpl-binary-visualizer/).\n\nFor example an `sfAmount` field serializes to a collection of bytes like `61D50F26109A32B7EC`\n\n### Serialized Object API\n\nTo assist Hook developers in working with serialized objects the `sto` namespace was created within the Hooks API. These functions manipulate pointers within a Hook-provided buffer. See table below.\n\n| Hook API                                                                    | at it does                                                                            |\n| --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |\n| [sto_subfield](../technical/hooks-functions/serialization/sto_subfield.md) | Index into a xrpld serialized object and return the location and length of a subfield |\n| [sto_subarray](../technical/hooks-functions/serialization/sto_subarray.md) | Index into a xrpld serialized array and return the location and length of an index    |\n| [sto_emplace](../technical/hooks-functions/serialization/sto_emplace.md)   | Emplace a field into an existing STObject at its canonical placement                  |\n| [sto_erase](../technical/hooks-functions/serialization/sto_erase.md)       | Remove a field from an STObject                                                       |\n| [sto_validate](../technical/hooks-functions/serialization/sto_validate.md) | Validate an STObject                                                                  |\n\nWhere applicable these APIs return an _offset_ and a _length_ encoded into a single int64_t. See individual documentation for details.\n\n### Example\n\nAt typical scenario in which you would use the STO API is in processing memos on an Originating Transaction. Since you will likely need access to the whole memo anyway, an efficient way to process a set of memos is simply to dump the whole `sfMemos` field into a buffer then index around within it. While it is also possible to use the slot API to do this by slotting the Originating Transaction it would result in additional code and additional copying.\n\n```c\n#define SUB_OFFSET(x) ((int32_t)(x >> 32))\n#define SUB_LENGTH(x) ((int32_t)(x & 0xFFFFFFFFULL))\n#define SBUF(str) (uint32_t)(str), sizeof(str)\n\nuint8_t memos[2048];\nint64_t memos_len = otxn_field(SBUF(memos), sfMemos);\nfor (int i = 0; GUARD(3), i \u003C 3; ++i)\n{\n    int64_t memo_lookup = sto_subarray(memos, memos_len, i);\n    if (memo_lookup \u003C 0)\n        rollback(SBUF(\"Memo lookup error\"), 1);\n    uint8_t*  memo_ptr = SUB_OFFSET(memo_lookup) + memos;\n    uint32_t  memo_len = SUB_LENGTH(memo_lookup);\n    // the above now point at the memo ... do something here\n}\n```\n\n### Overlap with slots\n\nYou may notice some overlap between slot APIs and STO APIs. The key difference here is who _owns_ the underlying data:\n\n* If you are using _slots_ then xrpld owns the object you are interacting with.\n* If you are using the _STO API_ then the **Hook** owns the buffer you are interacting with.\n\nBoth sets of functions index into a Serialized Object without unnecessary copying.","src/content/docs/docs/hooks/concepts/serialized-objects.mdx","51e4e591be50bdaa","docs/hooks/concepts/terminology",{"id":644,"data":646,"body":652,"filePath":653,"digest":654,"deferredRender":14},{"title":647,"description":648,"editUrl":14,"head":649,"template":16,"sidebar":650,"pagefind":14,"draft":18},"Terminology","Welcome to Hooks 👋",[],{"hidden":18,"attrs":651},{},"### What are Hooks?\n\nHooks are small, efficient web assembly modules designed specifically for Xahau. Hooks can be written in any language (compilable to WebAssembly) and most business logic and most smart contract concepts can be implemented in a hook. Typically Hooks are written in C.\n\nHooks are set onto an Xahau account using a `SetHook` transaction. Once installed on an account, a hook can:\n\n1. Block or allow incoming and outgoing transactions on the account,\n2. Modify and maintain internal state and logic specific to the hook on that account, and\n3. Emit new transactions on behalf of the account.\n\n### Glossary\n\nThis Hooks documentation and the Hooks API use a set of unfamiliar terms. Use the lookup table below if you find yourself lost.\n\n| Term                     | Explanation                                                                                                                                                                                                                                                                                                                                                                                               |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Hook                     | \u003Cp>\u003Cem>This term refers to a range of things depending on context\u003C/em>\u003Cbr />1. A webassembly binary uploadable to Xahau with the \u003Ca href=\"sethook-transaction.md\">SetHook Transaction\u003C/a> type.\u003Cbr />2. A webassembly binary already uploaded to and set or configured onto an Xahau account.\u003Cbr />3. The \u003Ca href=\"https://xrpl-hooks.readme.io/docs/anatomy-of-a-hook-1\">source code\u003C/a> of such a binary.\u003C/p> |\n| Originating Transaction  | The transaction that triggered the Hook to fire. This could be either a transaction sent out of or into an account with a Hook set on it.                                                                                                                                                                                                                                                                 |\n| Originating Account      | The account that sent an Originating Transaction.                                                                                                                                                                                                                                                                                                                                                         |\n| Hook Account             | The account where the currently executing Hook lives. This is the account that owns the Hook, the account that performed the [SetHook Transaction](sethook-transaction.md) which created the Hook and the account to whom belongs the Hook State for the currently executing Hook.                                                                                                                        |\n| Installer                | The account which is currently installing a Hook using the SetHook transaction.                                                                                                                                                                                                                                                                                                                           |\n| Emitted Transaction      | A new transaction created by a Hook during the Hook's execution that is not the Originating Transaction. These are typically used for sending funds back to the Originating Account. See: [Emitted Transactions](emitted-transactions.md).                                                                                                                                                                |\n| State                    | A per-account key-value map of 32 byte keys to arbitrary data. All Hooks present on an account have access to the same Hook State and can modify it. Note that the Hook State lives on the Hook Account **not** on the Originating Account. See: [State Management](state-management.md).                                                                                                                 |\n| SetHook                  | A new Transaction Type introduced in the Hooks ammendment which sets a Hook onto an Xahau account. See: [SetHook Transaction](sethook-transaction.md).                                                                                                                                                                                                                                                    |\n| Guards                   | A special control mechanism you need to use if you write a loop into in a Hook. See: [Loops and Guarding](loops-and-guarding.md).                                                                                                                                                                                                                                                                         |\n| Grants                   | Special permission a Hook Installer can give another account or a specific Hook (regardless of where it is installed) to modify Hook State on the Installer's account.                                                                                                                                                                                                                                    |\n| Namespace                | A unique 32 byte code delineating one set of state keys from another. The same state key may be used by two different Hooks without interfering with each-other if the namespaces set on the Hooks are different.                                                                                                                                                                                         |\n| Parameters               | Install-time parameters that can be optionally set on a Hook.                                                                                                                                                                                                                                                                                                                                             |\n| Reference Counting       | An unowned object on the ledger may be reference counted, meaning it is deleted when the final account which referenced (used) it removes their reference to it.                                                                                                                                                                                                                                          |\n| XFL or Floating Point    | A way to do high precision math in Hooks such as for exchange rate computation. See: [Floating Point Numbers (XFL)](floating-point-numbers-xfl.md).                                                                                                                                                                                                                                                       |\n| Serialized Objects (STO) | The way xahaud transmits and stores ledger objects. See: [Serialized Objects](serialized-objects.md).                                                                                                                                                                                                                                                                                                     |\n| Slots and Keylets        | Slots can contain ledger objects and keylets identify those objects. See: [Slots and Keylets](slots-and-keylets.md).                                                                                                                                                                                                                                                                                      |\n| Trace                    | A way to print a log line to the xrpld output from a Hook. See: [Debugging Hooks](debugging-hooks.md).                                                                                                                                                                                                                                                                                                    |","src/content/docs/docs/hooks/concepts/terminology.mdx","82e26fcaf8a65bdb","docs/hooks/concepts/reference-counted-hook-definitions",{"id":655,"data":657,"body":663,"filePath":664,"digest":665,"deferredRender":14},{"title":658,"description":659,"editUrl":14,"head":660,"template":16,"sidebar":661,"pagefind":14,"draft":18},"Reference Counted Hook Definitions","Avoid re-uploading the same bytecode to the ledger",[],{"hidden":18,"attrs":662},{},"When a novel Hook's web assembly byte-code is uploaded to Xahau, a significant storage burden is imposed on the network. This storage burden is reflected in the [Hook Fees](hook-fees.md) charged by the network.\n\nTo avoid this burden (and high fees for end users) reference counting is used:\n\n* The first time a novel Hook is installed, the [SetHook Transaction](sethook-transaction.md) must provide a significant fee.\n* The Hook's web assembly byte-code becomes an unowned and reference counted object on the ledger (called a `HookDefinition`).\n* Subsequent installations by the same or other users for an identical Hook (i.e. with identical byte-code) increment the reference count. These installations point at the same object on the ledger. These transactions are billed in a similar way to setting a Trust Line, as the storage burden for the Hook was already paid for in the original Set Hook transaction.\n* While the reference count on the Hook Definition is greater than zero (meaning one or more accounts still have the Hook installed) the object remains on the ledger.\n\n![](\u003C../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_TlDL7tsVNYi1yU64EZQh_3ef0cee-sethook-Page-2.png>)","src/content/docs/docs/hooks/concepts/reference-counted-hook-definitions.mdx","00d9556ffb0c2c8e","docs/hooks/concepts/weak-and-strong",{"id":666,"data":668,"body":674,"filePath":675,"digest":676,"deferredRender":14},{"title":669,"description":670,"editUrl":14,"head":671,"template":16,"sidebar":672,"pagefind":14,"draft":18},"Weak and Strong","Which Hooks are allowed to run and when?",[],{"hidden":18,"attrs":673},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"tip\" title=\"Hook Design Philosophy\">\n  Every party affected by a transaction should have the opportunity to have their Hooks executed.\n\u003C/Aside>\n\nTransactional Stake Holders (TSH) are parties that somehow have a stake in or are otherwise affected by a transaction. Their particular stake may be a _weak_ or _strong_. The degree of connection with the transaction dictates whether the party has the right to have their Hooks executed and who has to pay for that execution.\n\nFor example:\n\n* In a conventional direct XAH **Payment** transaction the two TSH are the _originating account_ and the _destination account_.\n* In a **SetSignerList** transaction the TSH are the _originating account_ and each account whose address appears in the signer list, where such accounts are active on the ledger.\n* In an **OfferCreate** transaction, other account's offers which are crossed by the originating transaction are all weak TSH and may opt for weak execution.\n\nDue to the heterogenous nature of transactions on Xahau, TSH come in all shapes and sizes and can be exotic and non-intuitive. This becomes more true as time passes and more transaction types are added to the Ledger.\n\n### Weak and Strong\n\nEach TSH has either a weak or a strong connection to the transaction.\n\nA **Strong** connection means:\n\n1. The originating transaction must pay the fee for the execution of the TSH Hook Chain\n2. The TSH has the right to rollback the whole transaction by calling `rollback()` from their Hook during execution.\n\nA **Weak** connection means:\n\n1. The originating transaction **does not** pay for the execution of the TSH Hook Chain.\n2. The TSH pays for the execution of their own Hook Chain through a feature called [Collect Call Hooks](collect-call.md).\n3. The TSH must have set an account flag `asfTshCollect` prior to the execution of the originating transaction.\n4. The TSH **does not** have the right to rollback the whole transaction by calling `rollback()` from their Hook during execution (but can still modify their own Hook state and Emit transactions.)\n\n### Before or After\n\nStrong TSHes have their hooks executed _before_ the originating transaction is applied to the ledger. This means they have the ability to [rollback](../technical/hooks-functions/control/rollback.md) the transaction (because it hasn't yet been applied.) This gives strongly executed hooks the ability to completely block a transaction from occurring.\n\nWeak TSHes have their hooks executed _after_ the originating transaction has been applied to the ledger. This means they have access to the [transaction metadata](../technical/hooks-functions/originating-transaction/meta_slot.md) but cannot prevent the transaction from occurring.\n\n\u003CAside type=\"tip\">\n  Strongly executed hooks can call \u003Ca href=\"ref:hook_again\">hook_again\u003C/a> to be executed a second time as a weak execution after the originating transaction has been applied.\n\u003C/Aside>\n\n### Execution Context\n\nThe `uint32_t` parameter in `hook(uint32_t)` and `cbak(uint32_t)` carries important context information from the Hooks Amendment to your Hook.\n\nDuring the execution of `hook`:\n\n* 0 means the Hook is being executed _strongly_\n* 1 means the Hook is being executed _weakly_\n* 2 means the Hook is being executed _weakly_ after being executed _strongly_ due to a [hook_again](../technical/hooks-functions/hook-context/hook_again.md) call.\n\nDuring the execution of `cbak`:\n\n* 0 means the Hook is being called back after a transaction it emitted was successfully accepted into a ledger.\n* 1 means the Hook is being called back after a transaction it emitted was marked as never able to be applied to any ledger (EmitFailure).\n\n### Reference Table\n\nIf a Transaction Type does not appear in the table then it has no TSHes **other than its originating account.**\n\n\n\n| Transaction Type\t       | TSH Type\t     | Who is the TSH                                                                               |\n| ----------------------- | ------------- | -------------------------------------------------------------------------------------------- |\n| AccountDelete           | Strong        | Destination account funds are paid out to after deletion                                     |\n| AccountSet              | None          | N/A                                                                                          |\n| CheckCancel             | Weak          | Destination account                                                                          |\n| CheckCash               | None          | N/A                                                                                          |\n| CheckCreate             | Strong        | Destination account                                                                          |\n| ClaimReward             | Strong        | Issuer Account                                                                               |\n| DepositPreauth          | Strong        | Authorized account                                                                           |\n| EscrowCancel            | Weak          | Destination account                                                                          |\n| EscrowCreate            | Strong        | Destination account                                                                          |\n| EscrowFinish            | Strong        | Destination account                                                                          |\n| GenesisMint             | Weak          | Each Destination in the GenesisMints Array                                                   |\n| Import                  | Strong        | Issuer Account                                                                               |\n| Invoke                  | Strong        | Destination account                                                                          |\n| OfferCancel             | None          | N/A                                                                                          |\n| OfferCreate             | Weak          | Accounts whose offers were crossed by this action.                                           |\n| Payment                 | Strong + Weak | Strong: Destination account. Weak: Any non-issuer the payment is rippled through.            |\n| PaymentChannelClaim     | Weak          | Destination account                                                                          |\n| PaymentChannelCreate    | Strong        | Destination account                                                                          |\n| PaymentChannelFund      | Weak          | Destination account                                                                          |\n| SetHook                 | None          | N/A                                                                                          |\n| SetRegularKey           | Strong        | The account whose address is being set as the key.                                           |\n| SignerListSet           | Strong        | Accounts whose addresses are set as signing keys (if they exist and have Hooks set on them). |\n| TicketCreate            | None          | N/A                                                                                          |\n| TrustSet                | Weak          | Issuer account                                                                               |\n| URITokenCancelSellOffer | None          | N/A                                                                                          |\n| URITokenCreateSellOffer | Strong        | Destination account, Issuer if tfBurnable Flag is set                                        |\n| URITokenBurn            | Strong        | Issuer if tfBurnable Flag is set                                                             |\n| URITokenBuy             | Strong        | Owner account, Issuer if tfBurnable Flag is set                                              |\n| URITokenMint            | None          | N/A                                                                                          |\n\n**AccountSet**\n\n| OTXN    | TSH     | AccountSet |\n| ------- | ------- | ---------- |\n| Account | Account | Strong     |\n\n**AccountDelete**\n\n| OTXN    | TSH         | AccountDelete |\n| ------- | ----------- | ------------- |\n| Account | Account     | None          |\n| Account | Beneficiary | Strong        |\n\n**Check**\n\n| OTXN        | TSH         | CheckCancel | CheckCreate | CheckCash |\n| ----------- | ----------- | ----------- | ----------- | --------- |\n| Account     | Account     | Strong      | Strong      | None      |\n| Account     | Destination | Weak        | Strong      | None      |\n| Destination | Destination | Strong      | None        | Strong    |\n| Destination | Account     | Weak        | None        | Weak      |\n\n**ClaimReward**\n\n| OTXN    | TSH     | ClaimReward |\n| ------- | ------- | ----------- |\n| Account | Account | Strong      |\n| Account | Issuer  | Strong      |\n\n**DepositPreauth**\n\n| OTXN    | TSH        | DepositPreauth |\n| ------- | ---------- | -------------- |\n| Account | Account    | Strong         |\n| Account | Authorized | Strong         |\n\n**Escrow**\n\n| OTXN        | TSH         | EscrowCancel | EscrowCreate | EscrowFinish |\n| ----------- | ----------- | ------------ | ------------ | ------------ |\n| Account     | Account     | Strong       | Strong       | Strong       |\n| Account     | Destination | Weak         | Strong       | Weak         |\n| Destination | Destination | Strong       | None         | Strong       |\n| Destination | Account     | Weak         | None         | Weak         |\n\n**GenesisMint**\n\n| OTXN    | TSH         | GenesisMint |\n| ------- | ----------- | ----------- |\n| Account | Account     | Strong      |\n| Account | Destination | Strong      |\n| Account | Beneficiary | Weak        |\n\n**Import**\n\n| OTXN    | TSH     | Import |\n| ------- | ------- | ------ |\n| Account | Account | Strong |\n| Account | Issuer  | Strong |\n\n**Invoke**\n\n| OTXN    | TSH         | Invoke |\n| ------- | ----------- | ------ |\n| Account | Account     | Strong |\n| Account | Destination | Weak   |\n\n**Offer**\n\n| OTXN    | TSH     | OfferCancel | OfferCreate |\n| ------- | ------- | ----------- | ----------- |\n| Account | Account | Strong      | Strong      |\n| Account | Crossed | None        | Weak        |\n\n**Payment**\n\n| OTXN    | TSH         | Payment |\n| ------- | ----------- | ------- |\n| Account | Account     | Strong  |\n| Account | Destination | Strong  |\n| Account | Crossed     | Weak    |\n\n**PaymentChannel**\n\n| OTXN        | TSH         | PaymentChannelClaim | PaymentChannelCreate | PaymentChannelFund |\n| ----------- | ----------- | ------------------- | -------------------- | ------------------ |\n| Account     | Account     | Strong              | Strong               | Strong             |\n| Account     | Destination | Weak                | Strong               | Weak               |\n| Destination | Destination | Strong              | None                 | None               |\n| Destination | Account     | Weak                | None                 | None               |\n\n**SetHook**\n\n| OTXN    | TSH     | SetHook |\n| ------- | ------- | ------- |\n| Account | Account | Strong  |\n\n**SetRegularKey**\n\n| OTXN    | TSH        | SetRegularKey |\n| ------- | ---------- | ------------- |\n| Account | Account    | Strong        |\n| Account | RegularKey | Strong        |\n\n**SignerListSet**\n\n| OTXN    | TSH     | SignerListSet |\n| ------- | ------- | ------------- |\n| Account | Account | Strong        |\n| Account | Signer  | Strong        |\n\n**Ticket**\n\n| OTXN    | TSH     | TicketCreate |\n| ------- | ------- | ------------ |\n| Account | Account | Strong       |\n\n**TrustSet**\n\n| OTXN    | TSH     | TrustSet |\n| ------- | ------- | -------- |\n| Account | Account | Strong   |\n| Account | Issuer  | Weak     |\n\n**URIToken**\n\n| OTXN   | Burnable | TSH    | Mint   | Burn   | Buy    | Sell   | Cancel |\n| ------ | -------- | ------ | ------ | ------ | ------ | ------ | ------ |\n| Owner  | False    | Owner  | None   | Strong | Strong | Strong | Strong |\n| Owner  | False    | Issuer | None   | Weak   | Weak   | Weak   | None   |\n| Owner  | False    | Buyer  | None   | None   | None   | Strong | Weak   |\n| Owner  | True     | Buyer  | None   | None   | None   | Strong | Weak   |\n| Owner  | True     | Owner  | None   | Strong | Strong | Strong | Strong |\n| Owner  | True     | Issuer | None   | Weak   | Strong | Strong | None   |\n| Issuer | False    | Owner  | None   | None   | None   | None   | None   |\n| Issuer | False    | Issuer | Strong | None   | None   | None   | None   |\n| Issuer | False    | Buyer  | Weak   | None   | None   | None   | None   |\n| Issuer | True     | Owner  | None   | Weak   | None   | None   | None   |\n| Issuer | True     | Issuer | Strong | Strong | None   | None   | None   |\n| Issuer | True     | Buyer  | Weak   | None   | None   | None   | None   |\n| Buyer  | True     | Buyer  | None   | None   | Strong | None   | None   |\n| Buyer  | True     | Owner  | None   | None   | Weak   | None   | None   |","src/content/docs/docs/hooks/concepts/weak-and-strong.mdx","c75a1f572e858cee","docs/hooks/concepts/sethook-transaction",{"id":677,"data":679,"body":684,"filePath":685,"digest":686,"deferredRender":14},{"title":680,"editUrl":14,"head":681,"template":16,"sidebar":682,"pagefind":14,"draft":18},"SetHook Transaction",[],{"hidden":18,"attrs":683},{},"### SetHook Transaction\n\nHook web assembly bytecode is installed onto an Xahau account using the `SetHook` transaction.\n\nAn example appears below:\n\n```js\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {                \n                CreateCode: fs.readFileSync('accept.wasm').toString('hex').toUpperCase(),\n                HookOn: '0000000000000000',\n                HookNamespace: addr.codec.sha256('accept').toString('hex').toUpperCase(),\n                HookApiVersion: 0\n            }\n        }\n    ]\n}\n```\n\nThe transaction is deceptively simple, but hides significant complexity, described below.\n\n### Hooks Array\n\nThe main body of the SetHook transaction is the hooks array:\n\n```js\n{\n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Hooks:                         // This is the Hooks Array\n    [            \n          {  Hook: { ... }  },     // HookSet Object (position 0)\n          {  Hook: { ... }  },  \n          {  Hook: { ... }  },  \n          {  Hook: { ... }  }.     // HookSet Object (position 3)\n    ]\n}\n```\n\nThis array _mirrors_ the [Hook Chain](chaining.md) installed on the account:\n\n* Position 0 in the array _corresponds_ to position 0 in the Hook Chain.\n* Position 3 in the array _corresponds_ to position 3 in the Hook Chain, etc.\n\n### HookSet Object and Corresponding Hook\n\nEach entry in the Hooks Array (in the SetHook Transaction) is called a _HookSet Object_, and its corresponding Hook in the account's Hook Chain is called the _Corresponding Hook_.\n\n\u003Cfigure>\n![Example: A user performs an operation on each Hook in his/her Hook chain with a SetHook transaction.](../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_NbV5W3McCRKkL4eJeF6v_cdf692e-sethook.png)\n\u003Cfigcaption>*Example: A user performs an operation on each Hook in his/her Hook chain with a SetHook transaction.*\u003C/figcaption>\n\u003C/figure>\n\n### HookDefinition\n\nEach Corresponding Hook is an object containing a _reference_ (pointer) to a `HookDefinition` object.\n\nThe HookDefinition object is an unowned reference-counted ledger object that provides for de-duplication of identical web assembly bytecode. Two users using an identical hook will both point to the same HookDefinition.\n\n\u003Cfigure>\n![Example: Hook Definitions on Xahau](../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_TlDL7tsVNYi1yU64EZQh_3ef0cee-sethook-Page-2.png)\n\u003Cfigcaption>*Example: Hook Definitions on Xahau*\u003C/figcaption>\n\u003C/figure>\n\nFor more information see: [Reference Counting](reference-counted-hook-definitions.md)\n\n### Hook Defaults\n\nWhen a `HookDefinition` is created it contains the initial [Parameters](parameters.md), [Namespace](namespaces.md) and [Grants](grants.md) supplied by the user. These become the Hook Defaults. Any Hook referencing this Hook Definition will use these defaults _unless_ the SetHook Transaction that creates that reference explicitly overrides those defaults, or a subsequent Update Operation overrides them.\n\n### HookSet Operations\n\nThere are six possible operations: No Operation, Create, Update, Delete, Install and Namespace Delete\n\nEach operation is specified by the inclusion or omission of certain HookSet Object fields. This might seem confusing at first but by working through a few examples the reader should find it intuitive; Essentially HookSet operations are a type of **diff** between a specific Hook's _defaults_, _existing_ and newly specified fields.\n\nAchieving each type of operation is explained in a subsection below.\n\n### No Operation\n\n**Occurs when**:\n\n* The HookSet Object is empty\n\n**Behaviour**:\n\n* No change of any kind is made.\n\n**Example**:\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {}\n        }\n    ]\n}\n```\n\n### Create Operation\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* The Corresponding Hook does not exist _or_`FLAG_OVERRIDE` is specified.\n* `CreateCode` field is specified and is not blank and contains the valid web assembly bytecode for a valid Hook.\n* No instance of the same web assembly bytecode already exists on Xahau. (If it does and all other requirements are met then interpret as an Install Operation — see below.)\n\n**Behaviour**:\n\n* A reference counted `HookDefinition` object is created on Xahau containing the fields in the HookSet Object, with all specified fields (Namespace, Parameters, HookOn) becoming defaults (but not Grants.)\n* A `Hooks` array is created on the executing account, if it doesn't already exist. (This is the structure that contains the Corresponding Hooks.)\n* A `Hook` object is created at the Corresponding Hook position if one does not already exist.\n* The `Hook` object points at the `HookDefinition`.\n* The `Hook` object contains no fields except `HookHash` which points at the created `HookDefinition`.\n* If `hsfNSDELETE` flag is specified then any HookState entires in the destination namespace are deleted if they currently exist.\n\n**Example**:\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {                \n                CreateCode: fs.readFileSync('accept.wasm').toString('hex').toUpperCase(),\n                HookOn: '0000000000000000',\n                HookNamespace: addr.codec.sha256('accept').toString('hex').toUpperCase(),\n                HookApiVersion: 0\n            }\n        }\n    ]\n}\n```\n\n### Install Operation\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* The Corresponding Hook does not exist _or_`FLAG_OVERRIDE` is specified.\n* `HookHash` field is specified and is not blank and contains the hash of a Hook that already exists as a `HookDefinition` on the ledger _or_ `CreateCode` field is specified and is not blank and contains the valid web assembly bytecode for a valid hook that already exists on the ledger as a `HookDefinition`.\n\n**Behaviour**:\n\n* The reference count of the `HookDefinition` object is incremented.\n* A `Hooks` array is created on the executing account, if it doesn't already exist. (This is the structure that contains the Corresponding Hooks.)\n* A `Hook` object is created at the Corresponding Hook position if one does not already exist.\n* The `Hook` object points at the `HookDefinition`.\n* The `Hook` object contains all the fields in the HookSet Object, except and unless:\n* A field or key-pair within a field is identical to the Hook Defaults set on the `HookDefinition`, in which case it is omitted due to defaults.\n* If `hsfNSDELETE` flag is specified then any HookState entires in the destination namespace are deleted if they currently exist.\n\n**Example**:\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {                \n                HookHash: \"A5663784D04ED1B4408C6B97193464D27C9C3334AAF8BBB4FA5EB8E557FC4A2C\",\n                HookOn: '0000000000000000',\n                HookNamespace: addr.codec.sha256('accept').toString('hex').toUpperCase(),\n            }\n        }\n    ]\n}\n```\n\n### Update Operation\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* The Corresponding Hook exists.\n* `HookHash` is absent.\n* `CreateCode` is absent.\n* One or more of `HookNamespace`, `HookParameters` or `HookGrants` is present.\n\n**General Behaviour**:\n\n* The Corresponding Hook is updated in such a way that the desired changes are reflected in the Corresponding Hook.\n\n**Specific Behaviour**:\n\nIf `HookNamespace` is specified and differs from the Corresponding Hook's Namespace:\n\n* the Corresponding Hook's `HookNamespace` is updated, and\n* if the `hsfNSDELETE` flag is specified all HookState entires in the old namespace are deleted.\n\nIf `HookParameters` is specified, then for each entry:\n\n* If `HookParameterName` exists but `HookParameterValue` is absent and the Corresponding Hook's Parameters (either specifically or via defaults) contains this `HookParameterName` then the parameter is marked as deleted on the Corresponding Hook.\n* If `HookParameterName` exists and `HookParameterValue` exists then the Corresponding Hook's Parameters are modified to include the new or updated parameter.\n\nIf `HookGrants` is specified then:\n\n* The Corresponding Hook's `HookGrants` array is replaced with the array.\n\n**Example**:\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {\n                HookNamespace: addr.codec.sha256('new_accept').toString('hex').toUpperCase(),\n            }\n        }\n    ]\n}\n```\n\n### Delete Operation\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* The Corresponding Hook exists.\n* `hsfOVERRIDE` is specified.\n* optionally `hsfNSDELETE` is also specified.\n* `HookHash` is absent.\n* `CreateCode` is present but empty.\n\n**Behaviour**:\n\n* The reference count of the `HookDefinition` object is decremented.\n* If the reference count is now zero the `HookDefintion` is removed from the ledger.\n* The `Hook` object in the Corresponding Hook position is deleted, leaving an empty position.\n* If `hsfNSDELETE` is specified the namespace and all HookState entries are also deleted.\n\n**Example**:\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {\n                CreateCode: \"\",\n                Flags: 1,\n            }\n        }\n    ]\n}\n```\n\n### Namespace Reset\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* `flags` is present and `hsfNSDELETE` is set. `hsfOVERRIDE` can optionally also be specified if the Hook at this position is to be deleted.\n* `HookNamespace` is specified.\n* `CreateCode` is absent.\n* `HookHash` is absent.\n* `HookGrants`, `HookParameters`, `HookOn` and `HookApiVersion` are absent.\n\n**Behaviour**:\n\n* If the Corresponding Hook exists, it remains, nothing happens to it.\n* A subset of HookState objects and the HookState directory for the specified namespace are removed from the ledger, up to the defined limit of 512. Further transactions are needed to continue the deletion process until all relevant records are removed.\n\n**Example**:\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {\n              \tHookNamespace: addr.codec.sha256('accept').toString('hex').toUpperCase(),\n                Flags: 3,\n            }\n        }\n    ]\n}\n```","src/content/docs/docs/hooks/concepts/sethook-transaction.mdx","c2c7deaa87af3af6","docs/hooks/concepts/state-management",{"id":687,"data":689,"body":695,"filePath":696,"digest":697,"deferredRender":14},{"title":690,"description":691,"editUrl":14,"head":692,"template":16,"sidebar":693,"pagefind":14,"draft":18},"State Management","Hooks can read and save small pieces of on-ledger data 🚀",[],{"hidden":18,"attrs":694},{},"import { Aside } from '@astrojs/starlight/components';\n\n### What is Hook State?\n\n[State](https://en.wikipedia.org/wiki/State_\\(computer_science\\)) in computer science describes information held by a system between executions (as distinct from inputs and outputs.) For example your browser leaves you logged in to a website even after you close and reopen it. The login cookie is held in the browser's _state_.\n\n**Hook State** refers to a key-value mapping that logically exists for each account on Xahau whether or not any keys are currently present. The keys are always 32 bytes (unsigned 256 bit integer) and the values are variable length with a maximum size determined by validator voting, at time of writing 256 bytes.\n\nState Management is achieved using\n\n* [state](../technical/hooks-functions/state/state.md)\n* [state_set](../technical/hooks-functions/state/state_set.md)\n* [state_foreign](../technical/hooks-functions/state/state_foreign.md)\n\n### Storing and fetching\n\nThe below example uses the [state_set](../technical/hooks-functions/state/state_set.md) Hook API to assign the value `0xC001CAFE` to the key `0x0..000001` (uint256 = 1) in the Hook State of the Hook Account.\n\n```c\nuint8_t key[32] = {\n    0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,\n    0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,\n    0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,\n    0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x01U\n};\nuint8_t value[4] = { 0xC0U, 0x01U, 0xCAU, 0xFEU };\nif (state_set(value, 4, key, 32) == 4)\n{\n    // ... state successfully saved\n}\n```\n\nIn a subsequent Hook execution this value can now be retrieved using the same key:\n\n```c\nuint8_t value[4];\nuint8_t key[32] = {\n    0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,\n    0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,\n    0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,\n    0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x01U\n};\nif (state(value, 4, key, 32) \u003C 0)\n{\n    // ... state fetch failed\n}\n```\n\nAfter the above code has run the `value` buffer will be populated with the value found at the key.\n\n\u003CAside type=\"tip\">\n  The buffer that \u003Ccode>state()\u003C/code> reads into (\u003Ccode>writeptr\u003C/code>) must be large enough to store the value currently held at that key. If it isn't, the Hook API returns with a \u003Ccode>TOO_SMALL\u003C/code> error.\n\u003C/Aside>\n\n### Foreign state\n\nFrom time to time it may be advantageous for one Hook running on one account to read the Hook State of another Hook running on another account. The [state_foreign](../technical/hooks-functions/state/state_foreign.md) Hook API does exactly this. Because the ledger is public there is no reasonable expectation of privacy anyway. Any Hook may therefore _read_ (but not write) the Hook State of any other Hook.\n\n### Namespaces and querying\n\nPlease see [Namespaces](namespaces.md)","src/content/docs/docs/hooks/concepts/state-management.mdx","de502b75052a6179","docs/hooks/concepts/parameters",{"id":698,"data":700,"body":706,"filePath":707,"digest":708,"deferredRender":14},{"title":701,"description":702,"editUrl":14,"head":703,"template":16,"sidebar":704,"pagefind":14,"draft":18},"Parameters","Install-time parameters allow Hooks to be generic and flexible",[],{"hidden":18,"attrs":705},{},"### Parameters\n\nHook developers may opt to use _install-time_ parameters (called Hook Parameters) in their Hook. This allows subsequent installers of the Hook to change certain behaviours the programmer defines without recompiling or re-uploading the Hook (assuming at least one account still [references](reference-counted-hook-definitions.md) the existing Hook Definition.)\n\nHook Parameters are a set of Key-Value pairs set during the [SetHook Transaction](sethook-transaction.md) and retrievable by the Hook during runtime. Both the `ParameterName` (key) and the `ParameterValue` are set as _hex_ blobs, and have a maximum length of 32 bytes and 256 bytes respectively.\n\nA [SetHook Transaction](sethook-transaction.md) may define up to _16_ Hook Parameters per installed Hook.\n\n### Setting Parameters\n\nThe `HookParameters` array is optionally defined inside each `Hook` in the `Hooks` array as shown below:\n\n```json\nTransactionType: \"SetHook\",\nHooks:\n[   \n    {   \n        Hook: {\n            ...,\n            HookParameters:\n            [   \n                {   \n                    HookParameter:\n                    {   \n                        HookParameterName:  \"ABCDEF12\",\n                        HookParameterValue: \"12345678\"\n                    }   \n                },  \n                ...  // optionally up to 15 more Hook Parameters\n            ]   \n        }   \n    }   \n],  \n... \n```\n\n### Default Parameters\n\nThe first user to [set a novel Hook](sethook-transaction.md) may define Hook Parameters which then become the _Default Parameters_ for that Hook. This means any subsequent users who [references the same _HookDefinition_](reference-counted-hook-definitions.md) will receive these originally set Hook Parameters by default.\n\nThe subsequent user may specify their own Parameters, overriding the Default Parameters for their installation.\n\nTo erase a Parameter in a subsequent installation, specify the `ParameterName` key without specifying a `ParameterValue` key.\n\n### Using Parameters in Hooks\n\nParameters can be read by the Hooks they are set on using [hook_param](../technical/hooks-functions/hook-context/hook_param.md).\n\nIf more than one Hook is installed in a Hook Chain, then [hook_param_set](../technical/hooks-functions/hook-context/hook_param_set.md) can be used in limited circumstances to modify the Hook Parameters of a Hook further down the chain on the same account.\n\n### Runtime Parameters\n\nOn Xahau and the Xahau testnet, HookParameters may also be included at the top level of any transaction type according to the foregoing rules and size limits. These parameters can be accessed inside a hook using the [otxn_param](../technical/hooks-functions/originating-transaction/otxn_param.md) API.","src/content/docs/docs/hooks/concepts/parameters.mdx","9ac21913183087c9","docs/hooks/functions/control/accept",{"id":709,"data":711,"body":717,"filePath":718,"digest":719,"deferredRender":14},{"title":712,"description":713,"editUrl":14,"head":714,"template":16,"sidebar":715,"pagefind":14,"draft":18},"accept","Accept the originating transaction and commit any changes the hook made.",[],{"hidden":18,"attrs":716},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/introduction/\">Introduction\u003C/LinkButton>\n\u003CLinkButton href=\"/docs/hooks/concepts/execution-metadata/\">Execution Metadata\u003C/LinkButton>\n\n### Behaviour\n\nEnd the execution of the hook with status: success.\n\n* Record a return string and return code in transaction metadata.\n* Commit all state changes.\n* Submit all `emit()` transactions.\n* Allow originating transaction to continue.\n\n\u003CAside type=\"caution\">\nIf the originating transaction is stopped for some other reason then this accept becomes a rollback. See: Execution Order.\n\u003C/Aside>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t accept (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint64_t error_code\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction accept(msg: string, code: number): number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\naccept(\"Success\", 7, 100);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\naccept('Success', 100)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name        | Type      | Description                                                                                                                                                                         |\n| ----------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| read_ptr   | uint32_t | \u003Cp>Pointer to a return string to be stored in execution metadata.\u003Cbr />This is any string the hook-developer wishes to return with the acceptance. \u003Cem>May be null.\u003C/em>\u003C/p>          |\n| read_len   | uint32_t | The length of the return string. At most 32. _May be null._                                                                                                                         |\n| error_code | uint64_t | \u003Cp>A return code specific to this hook to be stored in execution metadata.\u003Cbr />\u003Cbr />Similar to the return code of an application on a *nix system. By convention success is zero.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type   | Description                                                                                                                                                                         |\n| ---- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| msg  | string | \u003Cp>String to be stored in execution metadata.\u003Cbr />This is any string the hook-developer wishes to return with the acceptance. \u003Cem>May be null.\u003C/em>\u003C/p>                              |\n| code | number | \u003Cp>A return code specific to this hook to be stored in execution metadata.\u003Cbr />\u003Cbr />Similar to the return code of an application on a *nix system. By convention success is zero.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                             |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | Accept ends the hook, therefore no value is returned to the caller. By convention all Hook APIs return `int64_t`, but in this case nothing is returned. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type   | Description                                                                                                                                              |\n| ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| number | Accept ends the hook, therefore no value is returned to the caller. By convention all Hook APIs return `a number`, but in this case nothing is returned. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/control/accept.mdx","d38c52788f95213c","docs/hooks/functions/control/rollback",{"id":720,"data":722,"body":727,"filePath":728,"digest":729,"deferredRender":14},{"title":723,"editUrl":14,"head":724,"template":16,"sidebar":725,"pagefind":14,"draft":18},"rollback",[],{"hidden":18,"attrs":726},{},"import { Aside, Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/introduction/\">Introduction\u003C/LinkButton>\n\u003CLinkButton href=\"/docs/hooks/concepts/execution-metadata/\">Execution Metadata\u003C/LinkButton>\n\n### Behaviour\n\nEnd the execution of the hook with status: reject.\n\n* Record a return string and return code in transaction metadata.\n* Discard all state changes.\n* Discard all `emit()` transactions.\n* Disallow originating transaction to continue.\n\n\u003CAside type=\"caution\">\n  The originating transaction will fail with \u003Ccode>tecHOOK_REJECTED\u003C/code> and a fee will be charged. See: Execution Order.\n\u003C/Aside>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t rollback (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint64_t error_code\n);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction rollback(error_msg: string, error_code: number): number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nrollback(\"Rejected!\", 9, 100);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nrollback('Rejected!', 100)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth>Type\u003C/th>\u003Cth width=\"202\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>read_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to a return string to be stored in execution metadata.\u003Cbr />This is any string the hook-developer wishes to return with the acceptance. \u003Cem>May be null.\u003C/em>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>The length of the return string. At most 32. \u003Cem>May be null.\u003C/em>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>error_code\u003C/td>\u003Ctd>uint64_t\u003C/td>\u003Ctd>A return code specific to this hook to be stored in execution metadata.\u003Cbr />\u003Cbr />Similar to the return code of an application on a *nix system. By convention non-success is non-zero.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth>Type\u003C/th>\u003Cth width=\"202\">Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>error_msg\u003C/td>\u003Ctd>string\u003C/td>\u003Ctd>String to be stored in execution metadata.\u003Cbr />This is any string the hook-developer wishes to return with the acceptance. \u003Cem>May be null.\u003C/em>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>error_code\u003C/td>\u003Ctd>number\u003C/td>\u003Ctd>A return code specific to this hook to be stored in execution metadata.\u003Cbr />\u003Cbr />Similar to the return code of an application on a *nix system. By convention non-success is non-zero.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"123\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>Rollback ends the hook, therefore no value is returned to the caller. By convention all Hook APIs return \u003Ccode>int64_t\u003C/code>, but in this case nothing is returned.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"123\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>number\u003C/td>\u003Ctd>Rollback ends the hook, therefore no value is returned to the caller. By convention all Hook APIs return \u003Ccode>number\u003C/code>, but in this case nothing is returned.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/control/rollback.mdx","7ba0ae13645dfbcb","docs/hooks/functions/developer-defined/cbak-callback",{"id":730,"data":732,"body":738,"filePath":739,"digest":740,"deferredRender":14},{"title":733,"description":734,"editUrl":14,"head":735,"template":16,"sidebar":736,"pagefind":14,"draft":18},"cbak / Callback","The callback function of your hook",[],{"hidden":18,"attrs":737},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/compiling-hooks\">Compiling Hooks\u003C/LinkButton>\n\n### Behaviour\n\n* `cbak` is a user defined function called by `xahaud` in order to inform your hook about the status of a previously emitted transaction\n* State changes and further emit calls can be made from cbak but it cannot `rollback` a transaction.\n* When cbak is executed the emitted transaction to which the callback relates is now the originating transaction.\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t cbak (\n    uint32_t what\n)\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\ntype Callback = (reserved: number) => number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t cbak(uint32_t reserved)\n{\n    return 0;\n}\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst Callback = (reserved: number) => {\n  return 0\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type      | Description                                                                                                                                                                                                                                                                        |\n| -------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| reserved | uint32_t | \u003Cp>if \u003Ccode>0\u003C/code>:\u003Cbr />- the emittted transaction to which this callback relates was successfully accepted into a ledger.\u003Cbr />\u003Cbr />If \u003Ccode>1\u003C/code>\u003Cbr />- the emitted transaction to which the callback relates was NOT successfully accepted into a ledger before it expired.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name     | Type   | Description                                                                                                                                                                                                                                                                        |\n| -------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| reserved | number | \u003Cp>if \u003Ccode>0\u003C/code>:\u003Cbr />- the emittted transaction to which this callback relates was successfully accepted into a ledger.\u003Cbr />\u003Cbr />If \u003Ccode>1\u003C/code>\u003Cbr />- the emitted transaction to which the callback relates was NOT successfully accepted into a ledger before it expired.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                      |\n| -------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | An arbitrary return code you wish to return from your hook. This will be present in the metadata of the originating transaction. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type   | Description                                                                                                                      |\n| ------ | -------------------------------------------------------------------------------------------------------------------------------- |\n| number | An arbitrary return code you wish to return from your hook. This will be present in the metadata of the originating transaction. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/developer-defined/cbak-callback.mdx","342232c8ebb3041b","docs/hooks/functions/developer-defined/hook",{"id":741,"data":743,"body":749,"filePath":750,"digest":751,"deferredRender":14},{"title":744,"description":745,"editUrl":14,"head":746,"template":16,"sidebar":747,"pagefind":14,"draft":18},"hook","The main function of your hook",[],{"hidden":18,"attrs":748},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/compiling-hooks\">Compiling Hooks\u003C/LinkButton>\n\n### Behaviour\n\n* `hook` is a user defined function called by `xahaud` in order to fire your hook.\n* Your `hook` function calls either `accept` or `reject` to pass or reject the originating transaction.\n* If execution reaches the end of the function it is implicitly an `accept`.\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook (\n    uint32_t reserved\n)\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\ntype Hook = (reserved: number) => number\n```\n\n\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook(uint32_t reserved)\n{\n  return 0;\n}\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst Hook = (reserved: number) => {\n    return 0\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"183\">Name\u003C/th>\u003Cth>Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>reserved\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Reserved for future use.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"183\">Name\u003C/th>\u003Cth>Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>reserved\u003C/td>\u003Ctd>number\u003C/td>\u003Ctd>Reserved for future use.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                      |\n| -------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | An arbitrary return code you wish to return from your hook. This will be present in the metadata of the originating transaction. |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type   | Description                                                                                                                      |\n| ------ | -------------------------------------------------------------------------------------------------------------------------------- |\n| number | An arbitrary return code you wish to return from your hook. This will be present in the metadata of the originating transaction. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/developer-defined/hook.mdx","5f17a0725bc37d8b","docs/hooks/functions/ledger/ledger_keylet",{"id":752,"data":754,"body":760,"filePath":761,"digest":762,"deferredRender":14},{"title":755,"description":756,"editUrl":14,"head":757,"template":16,"sidebar":758,"pagefind":14,"draft":18},"ledger_keylet","Search for a keylet within a specified range on the current ledger",[],{"hidden":18,"attrs":759},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read a 34 byte Keylet from the `lread_ptr`\n* Read a 32 byte Keylet from the `hread_ptr`\n* Search the ledger for the first (lowest) Keylet of this type in this range.\n* If any matching Keylet is found, write it to `write_ptr`.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* This function searches the ledger for the first (`lowest`) Keylet of this type in the given range.\n* Returns the number of bytes written (34 bytes) on success, or an error code if an error occurs.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\nC\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t ledger_keylet (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t lread_ptr,\n    uint32_t lread_len,\n    uint32_t hread_ptr,\n    uint32_t hread_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction ledger_keylet(\n    low: ByteArray | HexString,\n    high: ByteArray | HexString\n  ): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\nC\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n//TODO\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nledger_keylet(low, high)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                                |\n| ---------- | --------- | ---------------------------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer to store the output serialised Keylet. .                                               |\n| write_len | uint32_t | Length of the output buffer. Must be 34 bytes                                                              |\n| lread_ptr | uint32_t | Pointer to the 34 byte serialised Keylet that represents the lower boundary of the Keylet range to search. |\n| lread_len | uint32_t | Always 34 bytes                                                                                            |\n| hread_ptr | uint32_t | Pointer to the 34 byte serialised Keylet that represents the upper boundary of the Keylet range to search. |\n| hread_len | uint32_t | Always 34 bytes                                                                                            |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type                   | Description                                                                                                |\n| ---- | ---------------------- | ---------------------------------------------------------------------------------------------------------- |\n| low  | ByteArray \\| HexString | Pointer to the 34-byte serialized Keylet that represents the lower boundary of the Keylet range to search. |\n| high | ByteArray \\| HexString | Pointer to the 34-byte serialized Keylet that represents the upper boundary of the Keylet range to search. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The number of bytes written (34 bytes) on success.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code> / \u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- \u003Ccode>write_len\u003C/code>, \u003Ccode>lread_len\u003C/code> or \u003Ccode>hread_len\u003C/code> was not 34 bytes\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- One or more of the provided Keylets was not a valid serialised Keylet\u003Cbr />\u003Cbr />\u003Ccode>DOES_NOT_MATCH\u003C/code>\u003Cbr />- The two provided Keylets were not of the same Keylet Type.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- No matching Keylet was found in the specified range.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                   | Description                                                                                     |\n| ---------------------- | ----------------------------------------------------------------------------------------------- |\n| ErrorCode \\| ByteArray | Returns the number of bytes written (34 bytes) on success, or an error code if an error occurs. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/ledger/ledger_keylet.mdx","9a5722501f2bac61","docs/hooks/functions/ledger/fee_base",{"id":763,"data":765,"body":771,"filePath":772,"digest":773,"deferredRender":14},{"title":766,"description":767,"editUrl":14,"head":768,"template":16,"sidebar":769,"pagefind":14,"draft":18},"fee_base","Fetch the fee base of the current ledger",[],{"hidden":18,"attrs":770},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/hook-fees\">Hook Fees\u003C/LinkButton>\n\n### Behaviour\n\n* Return the fee base from the current ledger\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t fee_base();\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction fee_base(): number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t fee =\n    fee_base();\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst fee = fee_base()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nThis API takes no parameters.\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                        |\n| -------- | ---------------------------------- |\n| int64_t | The fee base of the current ledger |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type   | Description                        |\n| ------ | ---------------------------------- |\n| number | The fee base of the current ledger |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/ledger/fee_base.mdx","46d14a0501670fdb","docs/hooks/functions/ledger/ledger_last_hash",{"id":774,"data":776,"body":782,"filePath":783,"digest":784,"deferredRender":14},{"title":777,"description":778,"editUrl":14,"head":779,"template":16,"sidebar":780,"pagefind":14,"draft":18},"ledger_last_hash","Retreive the 32 byte namespace biased SHA512H of the last closed ledger",[],{"hidden":18,"attrs":781},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Write the 32 byte Hash to the write_ptr\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the hash of the last ledger.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t ledger_last_hash (\n    uint32_t write_ptr,\n    uint32_t write_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction ledger_last_hash(): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t hash[32];\nint64_t bytes_written = \n    ledger_last_hash(hash, 32);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst hash = ledger_last_hash()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                              |\n| ---------- | --------- | ---------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output. Should be at least 32 bytes. |\n| write_len | uint32_t | Length of the output buffer.                                                             |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                            |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type   | Description                                                                                     |\n| ------ | ----------------------------------------------------------------------------------------------- |\n| number | Returns an error code if an error occurs, or an array representing the hash of the last ledger. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/ledger/ledger_last_hash.mdx","2d113ff9e8a5c1d8","docs/hooks/functions/ledger/ledger_last_time",{"id":785,"data":787,"body":793,"filePath":794,"digest":795,"deferredRender":14},{"title":788,"description":789,"editUrl":14,"head":790,"template":16,"sidebar":791,"pagefind":14,"draft":18},"ledger_last_time","Fetch the last closed ledger's timestamp",[],{"hidden":18,"attrs":792},{},"import { Aside, Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Return the Xahau Timestamp from the last closed ledger.\n\n\u003CAside type=\"tip\">\nXahau timestamps are identical to a unix timestamps except that they are offset by `-946684800`.\n\nThe equivalent unix timestamp is: `ledger_last_time() + 946684800;`\n\u003C/Aside>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t ledger_last_time();\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction ledger_last_time(): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t ts =\n    ledger_last_time();\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst ts = ledger_last_time()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nThis API takes no parameters.\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                  |\n| -------- | -------------------------------------------- |\n| int64_t | The XRPL timestamp of the last closed ledger |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type   | Description                                                                                          |\n| ------ | ---------------------------------------------------------------------------------------------------- |\n| number | Returns an error code if an error occurs, or a number representing the timestamp of the last ledger. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/ledger/ledger_last_time.mdx","2e975949511cc84b","docs/hooks/functions/ledger/ledger_nonce",{"id":796,"data":798,"body":804,"filePath":805,"digest":806,"deferredRender":14},{"title":799,"description":800,"editUrl":14,"head":801,"template":16,"sidebar":802,"pagefind":14,"draft":18},"ledger_nonce","Generate a 32 byte nonce for use in an emitted transaction",[],{"hidden":18,"attrs":803},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Write a 32 byte random value to the write_ptr\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the nonce of the current ledger.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\nC\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t ledger_nonce (\n    uint32_t write_ptr,\n    uint32_t write_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction ledger_nonce(): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t n[32];\nint64_t bytes_written = \n    ledger_nonce(n, 32);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst nonce = ledger_nonce()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                              |\n| ---------- | --------- | ---------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output. Should be at least 32 bytes. |\n| write_len | uint32_t | Length of the output buffer.                                                             |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Type                   | Description                                                                                                                           |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| ErrorCode \\| ByteArray | Returns an error code if an error occurs, or an array representing the nonce of the current ledger. specified outside of hook memory. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type     | Description                                                                                                                                            |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/ledger/ledger_nonce.mdx","2f81ae2725dc29a8","docs/hooks/functions/ledger/ledger_seq",{"id":807,"data":809,"body":815,"filePath":816,"digest":817,"deferredRender":14},{"title":810,"description":811,"editUrl":14,"head":812,"template":16,"sidebar":813,"pagefind":14,"draft":18},"ledger_seq","Fetch the current ledger sequence number",[],{"hidden":18,"attrs":814},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Return the sequence number from the current ledger\n\n### Definition\n\nC\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t ledger_seq();\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction ledger_seq(): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t seq =\n    ledger_seq();\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst seq = ledger_seq()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nThis API takes no parameters.\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                               |\n| -------- | ----------------------------------------- |\n| int64_t | The sequence number of the current ledger |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type   | Description                               |\n| ------ | ----------------------------------------- |\n| number | The sequence number of the current ledger |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/ledger/ledger_seq.mdx","0130dfef74f33486","docs/hooks/functions/hook-context/hook_hash",{"id":818,"data":820,"body":826,"filePath":827,"digest":828,"deferredRender":14},{"title":821,"description":822,"editUrl":14,"head":823,"template":16,"sidebar":824,"pagefind":14,"draft":18},"hook_hash","Retreive the 32 byte namespace biased SHA512H of the currently executing Hook",[],{"hidden":18,"attrs":825},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Look up the hash of the hook installed on hook account at position `hook_no`\n* Write the 32 byte hash to `write_ptr`\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n* Look up the hash of the hook installed on the hook account at the specified position.\n* The Namespace biased SHA512H of the currently executing Hook, or an error code if the lookup fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook_hash (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    int32_t  hook_no\n);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction hook_hash(hookno: number): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t hash[32];\nint64_t bytes_written = \n    hook_hash(hash, 32, -1);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst hash = hook_hash(hookno)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                    |\n| ---------- | --------- | ---------------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output. Should be at least 32 bytes.       |\n| write_len | uint32_t | Length of the output buffer.                                                                   |\n| hook_no   | int32_t  | The position in the hook chain the hook is located at, or -1 for the currently executing hook. |\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n| Name     | Type   | Description                                                                                    |\n| -------- | ------ | ---------------------------------------------------------------------------------------------- |\n| hook_no | number | The position in the hook chain the hook is located at, or -1 for the currently executing hook. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                      |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The specified hook sequence number doesn't exist in the hook chain.\u003C/p> |\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                                                                 |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------- |\n| ByteArray or ErrorCode | Returns the Namespace biased SHA512H of the currently executing Hook, or an error code if the lookup fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/hook-context/hook_hash.mdx","885febb70b3da38d","docs/hooks/functions/hook-context/hook_account",{"id":829,"data":831,"body":837,"filePath":838,"digest":839,"deferredRender":14},{"title":832,"description":833,"editUrl":14,"head":834,"template":16,"sidebar":835,"pagefind":14,"draft":18},"hook_account","Retreive the 20 byte Account ID the Hook is executing on",[],{"hidden":18,"attrs":836},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Write the 20 byte Account ID to the write_ptr\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieve the 20 byte Account ID the Hook is executing on.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook_account (\n    uint32_t write_ptr,\n    uint32_t write_len\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n``JavaScript\nfunction hook_account(): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t hook_acc_id[20];\nint64_t bytes_written = \n    hook_account(hook_acc_id, 20);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst hook_acc_id =hook_account()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                              |\n| ---------- | --------- | ---------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output. Should be at least 20 bytes. |\n| write_len | uint32_t | Length of the output buffer.                                                             |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\nNo parameters\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                            |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                                               |\n| ---------------------- | ----------------------------------------------------------------------------------------- |\n| ErrorCode or ByteArray | Returns the Account ID the Hook is executing on, or an error code if the retrieval fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/hook-context/hook_account.mdx","b927ab59fc033781","docs/hooks/functions/hook-context/hook_param_set",{"id":840,"data":842,"body":848,"filePath":849,"digest":850,"deferredRender":14},{"title":843,"description":844,"editUrl":14,"head":845,"template":16,"sidebar":846,"pagefind":14,"draft":18},"hook_param_set","Set or delete a parameter on a hook on the same account further down the execution chain",[],{"hidden":18,"attrs":847},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Search the hook chain on the hook account for a 32 byte hash indicated by `hread_ptr`\n* If found: set a parameter:\n* With the parameter name indicated by `kread_ptr` and\n* The parameter value indicated by `read_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Set a parameter for the hook with the specified value and key, and associate it with a hash.\n* Returns a status code indicating the result of the operation.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook_param_set (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint32_t kread_ptr,\n    uint32_t kread_len,\n    uint32_t hread_ptr,\n    uint32_t hread_len  \n);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction hook_param_set(\n    val: ByteArray | HexString,\n    key: ByteArray | HexString,\n    hash: ByteArray | HexString\n  ): number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t pvalue[] = \"some parameter value\";\nuint8_t pname[] = \"paramname\";\nuint8_t phash[] = { 0x19U, 0xFEU, 0x69U, 0xF1U, 0x53U, 0x66U, 0x4EU, 0x8CU, \n                    0x97U, 0xF4U, 0x4CU, 0x5CU, 0x3CU, 0x65U, 0x63U, 0x79U, \n                    0xC2U, 0xD0U, 0x26U, 0xE7U, 0x90U, 0xEFU, 0x38U, 0xF7U, \n                    0xEDU, 0x73U, 0xE9U, 0xCEU, 0x9CU, 0x9DU, 0xBFU, 0x03U };\nint64_t result = \n  \thook_param_set(pvalue, sizeof(pvalue),\n                   pname, sizeof(pname),\n                   phash, sizeof(phash));\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst pvalue = \"some parameter value\"\nconst pname = \"paramname\"\nconst phash = [ 0x19, 0xFE, 0x69, 0xF1, 0x53, 0x66, 0x4E, 0x8C, \n                0x97, 0xF4, 0x4C, 0x5C, 0x3C, 0x65, 0x63, 0x79, \n                0xC2, 0xD0, 0x26, 0xE7, 0x90, 0xEF, 0x38, 0xF7, \n                0xED, 0x73, 0xE9, 0xCE, 0x9C, 0x9D, 0xBF, 0x03 ]\nconst result = hook_param_set(str2hex(pvalue), str2hex(pname), phash)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                     |\n| ---------- | --------- | ------------------------------- |\n| read_ptr  | uint32_t | Pointer to parameter value      |\n| read_len  | uint32_t | Length of the parameter value   |\n| kread_ptr | uint32_t | Pointer to the parameter name   |\n| kread_len | uint32_t | Length of the parameter name    |\n| hread_ptr | uint32_t | Pointer to hook hash            |\n| hread_len | uint32_t | Length of hook hash (always 32) |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type                   | Description                               |\n| ---- | ---------------------- | ----------------------------------------- |\n| val  | ByteArray or HexString | The value to set for the parameter.       |\n| key  | ByteArray or HexString | The key associated with the parameter.    |\n| hash | ByteArray or HexString | The hash to associate with the parameter. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"148\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>The length of the parameter value successfully set\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- The parameter name can't be null\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- The parameter name is greater than 32 bytes\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"148\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>number\u003C/td>\u003Ctd>Returns a status code indicating the result of the operation.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/hook-context/hook_param_set.mdx","47c4db2214d6f642","docs/hooks/functions/emitted-transaction/emit",{"id":851,"data":853,"body":859,"filePath":860,"digest":861,"deferredRender":14},{"title":854,"description":855,"editUrl":14,"head":856,"template":16,"sidebar":857,"pagefind":14,"draft":18},"prepare","Prepares a JSON transaction for emission.",[],{"hidden":18,"attrs":858},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/protocol-reference/transactions\">Transactions\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n* This function takes a transaction JSON object and prepares it for emission.\n* The transaction must be complete except for the Account field, which should always be the Hook account.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction prepare(\n    txJson: Record\u003Cstring, any> | Transaction\n  ): ErrorCode | Record\u003Cstring, any> | Transaction\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst prepared_txn = prepare({\n                TransactionType: \"Payment\",\n                Destination: util_raddr(p1address_ns),\n                Amount: parseFloat(drops_sent)*2\n            })\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"124\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>txJson\u003C/td>\u003Ctd>Record&#x3C;string, any> | Transaction\u003C/td>\u003Ctd>The transaction JSON, must be a complete transaction except for Account (always the Hook account).\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"231\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>ErrorCode | Record&#x3C;string, any> | Transaction\u003C/td>\u003Ctd>Returns an ErrorCode if there is an error, or the prepared transaction JSON or Transaction object.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/emitted-transaction/emit.mdx","a7bb82a1feaeb86b","docs/hooks/functions/hook-context/hook_param",{"id":862,"data":864,"body":870,"filePath":871,"digest":872,"deferredRender":14},{"title":865,"description":866,"editUrl":14,"head":867,"template":16,"sidebar":868,"pagefind":14,"draft":18},"hook_param","Retrieve the parameter value for a named hook parameter",[],{"hidden":18,"attrs":869},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Look up the value for a named parameter specified in `read_ptr`\n* Write the parameter's value to `write_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieve the value of a parameter associated with the specified key.\n* Returns the value associated with the key, or an error code if the retrieval fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook_param (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction hook_param(key: ByteArray | HexString): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t pname[] = {0xCAU, 0xFEU};\nuint8_t pvalue[32];\nint64_t value_len = \n    hook_param(pvalue, 32, pname, 2);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst pname = [0xCA, 0xFE]\nconst pvalue = hook_param(pname)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                              |\n| ---------- | --------- | ---------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output. Should be at least 32 bytes. |\n| write_len | uint32_t | Length of the output buffer.                                                             |\n| read_ptr  | uint32_t | Pointer to a buffer containing the parameter's name                                      |\n| read_len  | uint32_t | Length of the parameter's name                                                           |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type                   | Description                                        |\n| ---- | ---------------------- | -------------------------------------------------- |\n| key  | ByteArray or HexString | The key for which to retrieve the parameter value. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                    |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The specified paramater doesn't exist or is null\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- The parameter name can't be null\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- The parameter name is greater than 32 bytes\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                   | Description                                                                         |\n| ---------------------- | ----------------------------------------------------------------------------------- |\n| ByteArray or ErrorCode | Returns the value associated with the key, or an error code if the retrieval fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/hook-context/hook_param.mdx","2a6f5667303b749a","docs/hooks/functions/hook-context/hook_skip",{"id":873,"data":875,"body":881,"filePath":882,"digest":883,"deferredRender":14},{"title":876,"description":877,"editUrl":14,"head":878,"template":16,"sidebar":879,"pagefind":14,"draft":18},"hook_skip","Skip a hook that appears later in the hook chain on the hook account",[],{"hidden":18,"attrs":880},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Search the hook chain for a hook identified by the hook hash at `read_ptr`\n* Mark it as disabled for this chain execution\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Skip the execution of a hook based on the provided hash and flag.\n* Returns a status code indicating the result of the operation.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook_skip (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint32_t flags\n);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction hook_skip(\n    hash: ByteArray | HexString,\n    flag: number\n  ): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t phash[] = { 0x19U, 0xFEU, 0x69U, 0xF1U, 0x53U, 0x66U, 0x4EU, 0x8CU, \n                    0x97U, 0xF4U, 0x4CU, 0x5CU, 0x3CU, 0x65U, 0x63U, 0x79U, \n                    0xC2U, 0xD0U, 0x26U, 0xE7U, 0x90U, 0xEFU, 0x38U, 0xF7U, \n                    0xEDU, 0x73U, 0xE9U, 0xCEU, 0x9CU, 0x9DU, 0xBFU, 0x03U };\nint64_t result = \n  \thook_skip(phash, 32, 0);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst phash = [ 0x19, 0xFE, 0x69, 0xF1, 0x53, 0x66, 0x4E, 0x8C, \n                0x97, 0xF4, 0x4C, 0x5C, 0x3C, 0x65, 0x63, 0x79, \n                0xC2, 0xD0, 0x26, 0xE7, 0x90, 0xEF, 0x38, 0xF7, \n                0xED, 0x73, 0xE9, 0xCE, 0x9C, 0x9D, 0xBF, 0x03 ]\nconst result = hook_skip(phash, 0);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Name      | Type      | Description                                                                                                   |\n| --------- | --------- | ------------------------------------------------------------------------------------------------------------- |\n| read_ptr | uint32_t | Pointer to a buffer containing the hook hash                                                                  |\n| read_len | uint32_t | Length of the hook hash (always 32)                                                                           |\n| flags     | uint32_t | \u003Cp>If 0:\u003Cbr />- add the hash to the hook skip list\u003Cbr />\u003Cbr />If 1\u003Cbr />- remove the hash from the hook skip list\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type                   | Description                                         |\n| ---- | ---------------------- | --------------------------------------------------- |\n| hash | ByteArray or HexString | The hash of the hook to skip.                       |\n| flag | number                 | A flag indicating the reason for skipping the hook. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"163\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>If successful \u003Ccode>1\u003C/code>\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The specified paramater doesn't exist or is null\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- Hash is not 32 bytes\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"163\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>number or ErrorCode\u003C/td>\u003Ctd>Returns a status code indicating the result of the operation.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/hook-context/hook_skip.mdx","c876b5c03bfe2cc9","docs/hooks/functions/emitted-transaction/etxn_burden",{"id":884,"data":886,"body":892,"filePath":893,"digest":894,"deferredRender":14},{"title":887,"description":888,"editUrl":14,"head":889,"template":16,"sidebar":890,"pagefind":14,"draft":18},"etxn_burden","Get the burden of a hypothetically emitted transaction",[],{"hidden":18,"attrs":891},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/emitted-transactions\">Emitted Transactions\u003C/LinkButton>\n\n### Behaviour\n\n* Return the burden an emitted transaction will carry.\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t etxn_burden (\n    void\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction etxn_burden(): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t burden = etxn_burden();\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst burden = etxn_burden()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nNone\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"165\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>The burden an emitted transaction will need in order to be successfully passed to \u003Ccode>emit()\u003C/code>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"165\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>number\u003C/td>\u003Ctd>An ErrorCode if there is an error, or the current burden value on success.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/emitted-transaction/etxn_burden.mdx","1fa1f1773c390c8b","docs/hooks/functions/hook-context/hook_again",{"id":895,"data":897,"body":903,"filePath":904,"digest":905,"deferredRender":14},{"title":898,"description":899,"editUrl":14,"head":900,"template":16,"sidebar":901,"pagefind":14,"draft":18},"hook_again","Returns the position in the hook chain the currently executing hook occupies",[],{"hidden":18,"attrs":902},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* If the hook is being strongly executed then flag this specific hook in the chain for [Again As Weak Execution](../../../concepts/weak-and-strong.md).\n* If the originating transaction successfully is applied then the hook will be called again in a second, Weak Execution.\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook_again(void);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction hook_again(): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t result = \n  \thook_again();\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst result = hook_again()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\nThis API has no parameters\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"176\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>\u003Ccode>1\u003C/code> iff successfully flagged for Again As Weak.\u003Cbr />\u003Cbr />\u003Ccode>PREREQUISITE_NOT_MET\u003C/code>\u003Cbr />- This hook is already being executed weakly at the time of the call.\u003Cbr />\u003Cbr />\u003Ccode>ALREADY_SET\u003C/code>\u003Cbr />- The function was already called this execution.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"176\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>number\u003C/td>\u003Ctd>Returns a status code indicating the result of the operation.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/hook-context/hook_again.mdx","8a6dfc02586945c8","docs/hooks/functions/hook-context/hook_pos",{"id":906,"data":908,"body":913,"filePath":914,"digest":915,"deferredRender":14},{"title":909,"description":899,"editUrl":14,"head":910,"template":16,"sidebar":911,"pagefind":14,"draft":18},"hook_pos",[],{"hidden":18,"attrs":912},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Returns the position in the hook chain the currently executing hook occupies.\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t hook_pos(void);\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nhook_pos()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t pos = \n  \thook_pos();\n```\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst pos = hook_pos()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\nThis API has no parameters\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                               |\n| -------- | ----------------------------------------------------------------------------------------- |\n| int64_t | The position in the chain the currently executing hook occupies. The first position is 0. |\n\u003C/TabItem>\n\u003CTabItem label=\"JavaScript\">\n| Type   | Description                                                                              |\n| ------ | ---------------------------------------------------------------------------------------- |\n| number | Returns the current position in the hook chain, or an error code if the retrieval fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/hook-context/hook_pos.mdx","81b13fcdfae1206d","docs/hooks/functions/emitted-transaction/emit-1",{"id":916,"data":918,"body":924,"filePath":925,"digest":926,"deferredRender":14},{"title":919,"description":920,"editUrl":14,"head":921,"template":16,"sidebar":922,"pagefind":14,"draft":18},"emit","Emit a new transaction from the hook",[],{"hidden":18,"attrs":923},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/emitted-transactions\">Emitted Transactions\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read a transaction from `read_ptr`\n* Validate the transaction against the emission rules\n* Emit the transaction into consensus when valid\n* Write canonical transaction hash to `write_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* This function emits the provided transaction JSON.\n* On success, it returns the number of emitted transaction hashes.&#x20;\n* If there is an error, it returns an error code.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t emit (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction emit(\n    txJson: Record\u003Cstring, any> | Transaction\n  ): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nif (emit(tx, tx_len) \u003C 0)\n    rollback(\"Failed to emit!\", 15, 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst emitResult = emit(txJson)\nif(typeof emitResult === 'number')\n    rollback(\"Failed to emit!\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"124\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>write_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to a buffer to write the transaction hash to\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>write_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>The size of the buffer to write the transaction hash to (should be 32.)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to the transaction to emit\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>The length of the transaction\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"124\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>txJson\u003C/td>\u003Ctd>Record&#x3C;string, any> | Transaction\u003C/td>\u003Ctd>The TX JSON to emit.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"127\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>On success, the number of bytes of transaction hash written (32), or:\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>PREREQUISITE_NOT_MET\u003C/code>\u003Cbr />- \u003Ccode>emit_reserve\u003C/code> must be called first\u003Cbr />\u003Cbr />\u003Ccode>TOO_MANY_EMITTED_TXN\u003C/code>\u003Cbr />- the number of emitted transactions is now greater than the promise made when \u003Ccode>emit_reserve\u003C/code> was called earlier\u003Cbr />\u003Cbr />\u003Ccode>EMISSION_FAILURE\u003C/code>\u003Cbr />- the transaction was malformed according to the emission rules.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"231\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>ErrorCode | ByteArray\u003C/td>\u003Ctd>Returns an ErrorCode if there is an error, or an array of emitted transaction hashes on success.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/emitted-transaction/emit-1.mdx","e0cf38ffe5b82596","docs/hooks/functions/emitted-transaction/etxn_details",{"id":927,"data":929,"body":935,"filePath":936,"digest":937,"deferredRender":14},{"title":930,"description":931,"editUrl":14,"head":932,"template":16,"sidebar":933,"pagefind":14,"draft":18},"etxn_details","Produce an sfEmitDetails suitable for a soon-to-be emitted transaction",[],{"hidden":18,"attrs":934},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/emitted-transactions\">Emitted Transactions\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Generate and write a 105 byte sfEmitDetails object into the `write_ptr` if cbak is not defined\n* Generate and write a 127 byte sfEmitDetails object into the `write_ptr` if cbak is defined.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* This function provides detailed information about the transaction.\n* Returns an ErrorCode if there is an error, or an array of transaction details on success.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t etxn_details (\n    uint32_t write_ptr,\n    uint32_t write_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction etxn_details(): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t emitdet[105];\nint64_t result =\n    etxn_details(emitdet, 105);\nif (result != 105)\n    rollback(\"Etxndetails failed.\", 19, 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst emitdet = etxn_details()\nif (typeof emitdet === 'string || emitdet.length != 105)\n    rollback(\"Etxndetails failed.\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                              |\n| ---------- | --------- | -------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to the buffer receiving the sfEmitDetails record |\n| write_len | uint32_t | Length of the buffer                                     |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\nNo parameters for JavaScript\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The number of bytes written.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- Buffer isn't large enough to receive record\u003Cbr />\u003Cbr />\u003Ccode>PREREQUISITE_NOT_MET\u003C/code>\u003Cbr />- The hook failed to call \u003Ccode>etxn_reserve(n)\u003C/code> first\u003Cbr />\u003Cbr />\u003Ccode>FEE_TOO_LARGE\u003C/code>\u003Cbr />- The burden would be too high for the network to allow.\u003Cbr />\u003Cbr />\u003Ccode>INTERNAL_ERROR\u003C/code>\u003Cbr />- A generic error in which rippled had trouble generating the required field.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                   | Description                                                                       |\n| ---------------------- | --------------------------------------------------------------------------------- |\n| ErrorCode | ByteArray | An ErrorCode if there is an error, or an array of transaction details on success. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/emitted-transaction/etxn_details.mdx","cb52110d0bca9c71","docs/hooks/functions/emitted-transaction/etxn_fee_base",{"id":938,"data":940,"body":945,"filePath":946,"digest":947,"deferredRender":14},{"title":941,"editUrl":14,"head":942,"template":16,"sidebar":943,"pagefind":14,"draft":18},"etxn_fee_base",[],{"hidden":18,"attrs":944},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"caution\">\nFees on a Hooks-enabled ledger are non trivial. See: [Hook Fees](../../../concepts/hook-fees.md) for details.\n\u003C/Aside>\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/emitted-transactions\">Emitted Transactions\u003C/LinkButton>\n\n### Behaviour\n\n* Return the amount of the fee in drops recommended for a to-be emitted transaction.\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t etxn_fee_base (\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction etxn_fee_base(txblob: ByteArray | HexString): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t fee_to_pay =\n    etxn_fee_base(tx_blob, tx_blob_len);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst fee_to_pay = etxn_fee_base(tx_blob)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"118\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>read_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to the buffer containing the serialized transaction you intend to emit. The fee field is required but ignored (you may use zero). Use the output of this function to populate the fee field correctly.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>The length of the tx blob.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"118\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>txblob\u003C/td>\u003Ctd>ByteArray | HexString\u003C/td>\u003Ctd>The transaction blob, which can be an array of numbers or a string.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The smallest number of drops that an emitted txn would need to be accepted.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- The provided buffer is not validly within the hook memory.\u003Cbr />\u003Cbr />\u003Ccode>PREREQUISITE_NOT_MET\u003C/code>\u003Cbr />- \u003Ccode>etxn_reserve\u003C/code> has not been called first.\u003Cbr />\u003Cbr />\u003Ccode>INVALID_TXN\u003C/code>\u003Cbr />- The provided buffer did not contain a valid serialized transaction. (Deserialization failed, or a required field was missing.)\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type   | Description                                                               |\n| ------ | ------------------------------------------------------------------------- |\n| number | An ErrorCode if there is an error, or the calculated base fee on success. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/emitted-transaction/etxn_fee_base.mdx","022ba3c1a9f88ccf","docs/hooks/functions/emitted-transaction/etxn_nonce",{"id":948,"data":950,"body":955,"filePath":956,"digest":957,"deferredRender":14},{"title":951,"description":800,"editUrl":14,"head":952,"template":16,"sidebar":953,"pagefind":14,"draft":18},"etxn_nonce",[],{"hidden":18,"attrs":954},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/emitted-transactions\">Emitted Transactions\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Write the 32 byte Hash to the write_ptr\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Returns an ErrorCode if there is an error, or an array containing the nonce value on success.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t etxn_nonce (\n    uint32_t write_ptr,\n    uint32_t write_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction etxn_nonce(): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t n[32];\nint64_t bytes_written = \n    etxn_nonce(n, 32);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst nonce = etxn_nonce()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Name       | Type      | Description                                                                              |\n| ---------- | --------- | ---------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output. Should be at least 32 bytes. |\n| write_len | uint32_t | Length of the output buffer.                                                             |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\nNo parameters\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"187\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"187\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>ErrorCode | ByteArray\u003C/td>\u003Ctd>Returns an ErrorCode if there is an error, or an array containing the nonce value on success.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/emitted-transaction/etxn_nonce.mdx","a58c6dcf03e1501d","docs/hooks/functions/emitted-transaction/etxn_generation",{"id":958,"data":960,"body":966,"filePath":967,"digest":968,"deferredRender":14},{"title":961,"description":962,"editUrl":14,"head":963,"template":16,"sidebar":964,"pagefind":14,"draft":18},"etxn_generation","Get the generation of a hypothetically emitted transaction",[],{"hidden":18,"attrs":965},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/emitted-transactions\">Emitted Transactions\u003C/LinkButton>\n\n### Behaviour\n\n* Return the generation an emitted transaction will carry.\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t etxn_generation (\n    void\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction etxn_generation(): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t generation = \n  etxn_generation();\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst generation = etxn_generation()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nNone\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                    |\n| -------- | ---------------------------------------------------------------------------------------------- |\n| int64_t | The generation an emitted transaction will need in order to be successfully passed to `emit()` |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type   | Description                                                                                         |\n| ------ | --------------------------------------------------------------------------------------------------- |\n| number | Returns An ErrorCode if there is an error, or a number indicating the generation result on success. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/emitted-transaction/etxn_generation.mdx","42d2a3aa878fb02e","docs/hooks/functions/originating-transaction/meta_slot",{"id":969,"data":971,"body":977,"filePath":978,"digest":979,"deferredRender":14},{"title":972,"description":973,"editUrl":14,"head":974,"template":16,"sidebar":975,"pagefind":14,"draft":18},"meta_slot","Load the metadata of the originating transaction into a slot",[],{"hidden":18,"attrs":976},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* If the Hook is being [Weakly Executed](../../../concepts/weak-and-strong.md) then emplace the metadata of the originating transaction into the slot specified or into a new slot if no slot is specified\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t meta_slot (\n    uint32_t slot_no\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction meta_slot(slotno: number): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t meta_slot_no = \n\t\tmeta_slot(0);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst meta_slot_no = meta_slot(0)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type      | Description                                                                   |\n| -------- | --------- | ----------------------------------------------------------------------------- |\n| slot_no | uint32_t | The slot number to emplace into, or 0 if you wish to pick the next available. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type   | Description                               |\n| ------ | ------ | ----------------------------------------- |\n| slotno | number | The slot number to retrieve metadata for. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The slot the otxn was placed in\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- specified slot number exceeds the largest possible slot number\u003Cbr />\u003Cbr />\u003Ccode>NO_FREE_SLOTS\u003C/code>\u003Cbr />- the request could not granted because no free slot was avaialble to place the originating transaction into.\u003Cbr />\u003Cbr />\u003Ccode>PREREQUISITE_NOT_MET\u003C/code>\u003Cbr />- The hook is being \u003Ca href=\"../../../concepts/weak-and-strong.md\">Strongly Executed\u003C/a> and therefore no transactional metadata is available.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                   |\n| ------------------- | --------------------------------------------- |\n| ErrorCode \\| number | Returns an error code or the slot's metadata. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/originating-transaction/meta_slot.mdx","be996103b1268f1e","docs/hooks/functions/overview/return-codes",{"id":980,"data":982,"body":987,"filePath":988,"digest":989,"deferredRender":14},{"title":983,"editUrl":14,"head":984,"template":16,"sidebar":985,"pagefind":14,"draft":18},"Return Codes",[],{"hidden":18,"attrs":986},{},"### Return code design\n\nWeb assembly allows for exceptions (traps) however this language feature is not used for Hooks. Instead there is only one way to return from any Hook API (you may think of every Hook API as being `noexcept`).\n\nTo provide for efficient error handling:\n\n1. All Hook API functions return a _signed_ integer.\n2. All negative return codes are an error.\n3. All return codes `0` or greater are a function specific output, usually but not always the number of bytes read or written.\n\n### Error codes\n\nError codes are global across all Hook APIs and may be found in the table below.\n\n| Name                               | Value  | Description                                                                                                                                                                                                                                                                |\n| ---------------------------------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| SUCCESS                            | >= 0   | Non-negative return codes refer always to success and usually indicate the number of bytes written or events performed, depending on the specific API.                                                                                                                     |\n| OUT_OF_BOUNDS                    | -1     | A pointer or buffer length provided as a parameter described memory outside of the Hook's allowed memory region.                                                                                                                                                           |\n| INTERNAL_ERROR                    | -2     | Reserved for internal invariant trips, generally unrelated to inputs. These should be reported with an issue.                                                                                                                                                              |\n| TOO_BIG                           | -3     | Attempted to set a parameter or value larger than the allowed space.                                                                                                                                                                                                       |\n| TOO_SMALL                         | -4     | The API was unable to produce output to the write_ptr because the specified write_len was too small.                                                                                                                                                                     |\n| DOESNT_EXIST                      | -5     | The requested object or item wasn't found.                                                                                                                                                                                                                                 |\n| NO_FREE_SLOTS                    | -6     | The Hook attempted to allocate an item into a slot, but there were no slots free. To avoid ensure re-use of existing slots. The maximum number of slots is 255.                                                                                                            |\n| INVALID_ARGUMENT                  | -7     | One or more of the parameters to the API were invalid according to the individual API's specification.                                                                                                                                                                     |\n| ALREADY_SET                       | -8     | Some APIs allow for a once-per-execution parameter to be set. A second attempt to set a once-per-execution parameter results in this error.                                                                                                                                |\n| PREREQUISITE_NOT_MET             | -9     | An API required the Hook to do something before the API is allowed to be called. Check the API's documentation.                                                                                                                                                            |\n| FEE_TOO_LARGE                    | -10    | During fee calculation if an absurdly large fee is calculated this error is returned.                                                                                                                                                                                      |\n| EMISSION_FAILURE                  | -11    | An attempt to `emit()` a TXN was unsccessful for any of a number of reasons. Check the `trace` log of the rippled to which you are submitting the originating TXN.                                                                                                         |\n| TOO_MANY_NONCES                  | -12    | A Hook may only use up to 256 calls to `nonce()` per execution. Further calls result in this error code.                                                                                                                                                                   |\n| TOO_MANY_EMITTED_TXN            | -13    | \u003Cp>A Hook must declare ahead of time how many TXN it intends to \u003Ccode>emit()\u003C/code>.\u003Cbr />If it emits fewer than this many, this is allowed.\u003Cbr />If it emits more than this many this error is returned.\u003C/p>                                                                  |\n| NOT_IMPLEMENTED                   | -14    | While Hooks is/was in development an API may return this if some or all of that API is planned but not yet implemented.                                                                                                                                                    |\n| INVALID_ACCOUNT                   | -15    | An API which accepts a 20 byte Account ID may return this if, in its opinion, the Account ID was not valid for any reason.                                                                                                                                                 |\n| GUARD_VIOLATION                   | -16    | All loops inside a Hook must declare at the top of the loop, as the first non trivial instruction, before any branch instruction, the promised maximum number of iterations of the loop. If this promise is violated the hook terminates immediately with this error code. |\n| INVALID_FIELD                     | -17    | The requested serialized field could not be found in the specified object.                                                                                                                                                                                                 |\n| PARSE_ERROR                       | -18    | While parsing serialized content an error was encountered (typically indicating an invalidly serialized object).                                                                                                                                                           |\n| RC_ROLLBACK                       | -19    | Used internally to communicate a rollback event.                                                                                                                                                                                                                           |\n| RC_ACCEPT                         | -20    | Used internally to communicate an accept event.                                                                                                                                                                                                                            |\n| NO_SUCH_KEYLET                   | -21    | Specified keylet could not be found, or keylet is invalid                                                                                                                                                                                                                  |\n| NOT_AN_ARRAY                     | -22    | API was asked to assume object under analysis is an STArray but it was not.                                                                                                                                                                                                |\n| NOT_AN_OBJECT                    | -23    | API was asked to assume object under analysis is an STObject but it was not.                                                                                                                                                                                               |\n| INVALID_FLOAT                     | -10024 | A floating point operation resulted in Not-A-Number or API call attempted to specify an XFL floating point number outside of the expressible range of XFL.                                                                                                                 |\n| DIVISION_BY_ZERO                 | -25    | API call would result in a division by zero, so API ended early.                                                                                                                                                                                                           |\n| MANITSSA_OVERSIZED                | -26    | When attempting to create an XFL the mantissa must be 16 decimal digits.                                                                                                                                                                                                   |\n| MANTISSA_UNDERSIZED               | -27    | When attempting to create an XFL the mantissa must be 16 decimal digits.                                                                                                                                                                                                   |\n| EXPONENT_OVERSIZED                | -28    | When attempting to create an XFL the exponent must not exceed 80.                                                                                                                                                                                                          |\n| EXPONENT_UNDERSIZED               | -29    | When attempting to create an XFL the exponent must not be less than -96.                                                                                                                                                                                                   |\n| OVERFLOW                           | -30    | A floating point operation done on an XFL resulted in a value larger than XFL format is able to represent.                                                                                                                                                                 |\n| NOT_IOU_AMOUNT                   | -31    | An API assumed an STAmount was an IOU when in fact it was XRP.                                                                                                                                                                                                             |\n| NOT_AN_AMOUNT                    | -32    | An API assumed an STObject was an STAmount when in fact it was not.                                                                                                                                                                                                        |\n| CANT_RETURN_NEGATIVE             | -33    | An API would have returned a negative integer except that negative integers are reserved for error codes (i.e. what you are reading.)                                                                                                                                      |\n| NOT_AUTHORIZED                    | -34    | Hook attempted to set foreign state but was not authorized to do so (grant was missing or invalid.)                                                                                                                                                                        |\n| PREVIOUS_FAILURE_PREVENTS_RETRY | -35    | Hook previously received a `NOT_AUTHORIZED` return code and is not allowed to retry.                                                                                                                                                                                       |\n| TOO_MANY_PARAMS                  | -36    | Attempted to set a hook parameter for a later hook in the chain, but there are now too many parameters.                                                                                                                                                                    |\n| INVALID_TXN                       | -37    | Serialized transaction was not a valid transaction (usually because of a missing required field or data corruption / truncation.)                                                                                                                                          |\n| RESERVE_INSUFFICIENT              | -38    | Setting an additional state object on this account would cause the reserve requirements to exceed the account's balance.                                                                                                                                                   |\n| COMPLEX_NOT_SUPPORTED            | -39    | Hook API would be forced to return a complex number, which it cannot do.                                                                                                                                                                                                   |\n| DOES_NOT_MATCH                   | -40    | Two arguments were required to be of the same type but are not.                                                                                                                                                                                                            |\n| INVALID_KEY                       | -41    | The provided public key was not valid.                                                                                                                                                                                                                                     |\n| NOT_A_STRING                     | -42    | The buffer did not contain a nul terminated string.                                                                                                                                                                                                                        |\n| MEM_OVERLAP                       | -43    | The writing pointer points to a buffer that overlaps with the reading pointer.                                                                                                                                                                                             |\n| TOO_MANY_STATE_MODIFICATIONS    | -44    | More than 5000 modified state entries in the combined hook chains                                                                                                                                                                                                          |\n| TOO_MANY_NAMESPACES              | -45    | More than 256 namespaces on this account                                                                                                                                                                                                                                   |","src/content/docs/docs/hooks/functions/overview/return-codes.mdx","a739dc4adbb0e2a2","docs/hooks/functions/overview/hook-api-conventions",{"id":990,"data":992,"body":997,"filePath":998,"digest":999,"deferredRender":14},{"title":993,"editUrl":14,"head":994,"template":16,"sidebar":995,"pagefind":14,"draft":18},"Hook API Conventions",[],{"hidden":18,"attrs":996},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Naming conventions\n\nAll Hook APIs follow a standard naming convention:\n\n|           |                 |              |                 |\n| --------- | --------------- | ------------ | --------------- |\n| namespace | \\[ _ noun #1 ] | \\[ _ verb ] | \\[ _ noun #2 ] |\n\nThis may look confusing at first but is actually quite simple:\n\n* If the first noun is missing then it is implicitly the same as the namespace\n* If the verb is missing then it is implicitly `get`\n\nThus:\n\n* `state()` means: fetch a hook state.\n* `state_set()` means: set a hook.\n* `state_foreign()` means: fetch a foreign hook state.\n\n### Memory model\n\nEach Hook executes as a singular stack frame. All working memory must exist within this stackframe. There is no heap and no dynamic memory.\n\nWhen Hooks communicate with `xahaud` they can only pass _integer_ values. Typically these integers are pointers within the Hook's memory. Since the Hook runs within xahaud, these points can then be resolved by xahaud and written to or read from as needed to perform the Hook API function.\n\n### Allowed functions\n\nOnly two functions are allowed within a Hook: `hook()` and `cbak()`. Read about this [here](../../../concepts/compiling-hooks.md)\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\nAll parameters passed to a Hook API must be one of: `uint32_t, int32_t, uint64_t, int64_t`. Typically these are pointers and lengths of buffers within the Hook's stack frame. Sometimes they are [Integer Encoded Floating Point Numbers (XFL)](../../../concepts/floating-point-numbers-xfl.md) or other data.\n\nThe parameters to a Hook API are always in the following order:\n\n1. Writing pointer _if any_\n2. Writing length _if any_\n3. Reading pointer _if any_\n4. Reading length _if any_\n5. Specifics / other fields _if any_\n\nSome Hook APIs may only write or may only read from memory, and some might not do either and return a value only by return code.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\nAll parameters passed to a Hook API must be one of: `string, number[], bigint(xfl), object(json)`. Typically these are pointers and lengths of buffers within the Hook's stack frame. Sometimes they are [Integer Encoded Floating Point Numbers (XFL)](../../../concepts/floating-point-numbers-xfl.md) or other data.\n\nThe parameters to a Hook API are always in the following order:\n\n1. Writing variable _if any_\n2. Reading variable _if any_\n3. Specifics / other fields _if any_\n\nSome Hook APIs may only write or may only read from memory, and some might not do either and return a value only by return code.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return codes\n\nAll Hook APIs return a _signed integer_. Read about return codes here: [Return codes](return-codes.md)","src/content/docs/docs/hooks/functions/overview/hook-api-conventions.mdx","d7402e2082d07317","docs/hooks/functions/emitted-transaction/etxn_reserve",{"id":1000,"data":1002,"body":1008,"filePath":1009,"digest":1010,"deferredRender":14},{"title":1003,"description":1004,"editUrl":14,"head":1005,"template":16,"sidebar":1006,"pagefind":14,"draft":18},"etxn_reserve","Estimate the required fee for a txn to be emitted successfully",[],{"hidden":18,"attrs":1007},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/emitted-transactions\">Emitted Transactions\u003C/LinkButton>\n\n### Behaviour\n\n* Specifies a number of emitted transactions this hook might emit during execution.\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t etxn_fee_base (\n    uint32_t count\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction etxn_reserve(count: number): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\netxn_reserve(2);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\netxn_reserve(2)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name  | Type      | Description                                                                                 |\n| ----- | --------- | ------------------------------------------------------------------------------------------- |\n| count | uint32_t | The largest number of transactions this hook might emit during the course of one execution. |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name  | Type   | Description                                                      |\n| ----- | ------ | ---------------------------------------------------------------- |\n| count | number | The maximum amount of transactions this Hook is allowed to emit. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                            |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The maximum number of emitted transactions this hook may emit. This will always be the same as the \u003Ccode>count\u003C/code> parameter or an error as below.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>ALREADY_SET\u003C/code>\u003Cbr />- The hook already called this function earlier.\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- The specified number of emitted transactions is too large.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type   | Description                                                                        |\n| ------ | ---------------------------------------------------------------------------------- |\n| number | An ErrorCode if there is an error, or the configured transaction count on success. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/emitted-transaction/etxn_reserve.mdx","456464366a1777be","docs/hooks/functions/originating-transaction/otxn_burden",{"id":1011,"data":1013,"body":1019,"filePath":1020,"digest":1021,"deferredRender":14},{"title":1014,"description":1015,"editUrl":14,"head":1016,"template":16,"sidebar":1017,"pagefind":14,"draft":18},"otxn_burden","Get the burden of the originating transaction",[],{"hidden":18,"attrs":1018},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Return the burden of the originating transaction or `1` if no burden field is present.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieve the burden of the originating transaction.\n* Returns the burden as a number, or an ErrorCode if the retrieval fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t otxn_burden (\n    void\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction otxn_burden(): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t burden = \n  otxn_burden();\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst burden = otxn_burden()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nNone\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                |\n| -------- | ---------------------------------------------------------------------------------------------------------- |\n| int64_t | The burden of the originating transaction, or `1` if no burden was present on the originating transaction. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                                             |\n| ------------------- | ----------------------------------------------------------------------- |\n| number or ErrorCode | Returns the burden as a number, or an ErrorCode if the retrieval fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/originating-transaction/otxn_burden.mdx","11e015f396895648","docs/hooks/functions/originating-transaction/otxn_field",{"id":1022,"data":1024,"body":1030,"filePath":1031,"digest":1032,"deferredRender":14},{"title":1025,"description":1026,"editUrl":14,"head":1027,"template":16,"sidebar":1028,"pagefind":14,"draft":18},"otxn_field","Serialize and output a field from the originating transaction",[],{"hidden":18,"attrs":1029},{},"import { Tabs, TabItem, Aside } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Find the specified `sf` field in the originating transaction\n* Write the serialized version of the field to the output buffer\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieve the value of a specific field in the originating transaction.\n* Returns the value of the specified field as an array of numbers, or an ErrorCode if the lookup fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t otxn_field (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t field_id\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction otxn_field(field_id: number): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t account_field_len = \n    otxn_field(account_field, 20, sfAccount);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst account_field = otxn_field(sfAccount)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                                                                                                                                                                                                                                                                                                                                |\n| ---------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output.                                                                                                                                                                                                                                                                                                                                                |\n| write_len | uint32_t | Length of the output buffer.                                                                                                                                                                                                                                                                                                                                                                               |\n| field_id  | uint32_t | \u003Cp>The \u003Ccode>sf\u003C/code> code of the field you are searching for.\u003Cbr />\u003Cbr />To compute this manually take the serialized \u003Ccode>type\u003C/code> and shift it into the 16 highest bits of uint32_t, then take the \u003Ccode>field\u003C/code> and place it in the 16 lowest bits.\u003Cbr />\u003Cbr />For example:\u003Cbr />\u003Ccode>sfEmitNonce\u003C/code> has \u003Ccode>type\u003C/code> 5 and \u003Ccode>field\u003C/code> 11 thus its value is \u003Ccode>0x050BU\u003C/code>\u003C/p> |\n\n\u003CAside type=\"caution\" title=\"Important\">\nThe field code is _not_ written to the output buffer, only the _payload_ of the field is.\n\nAt time of writing for Hooks Public Testnet, `STI_ACCOUNT` fields like `sfAccount` are returned _without_ the leading variable length byte.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name      | Type   | Description                                                                                         |\n| --------- | ------ | --------------------------------------------------------------------------------------------------- |\n| field_id | number | \u003Cp>\u003C/p>\u003Cp>Returns the value of the specified field as an array of numbers, if the lookup fails.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- output buffer was not large enough to hold the serialized field\u003Cbr />\u003Cbr />\u003Ccode>INVALID_FIELD\u003C/code>\u003Cbr />- the \u003Ccode>sf\u003C/code> field_id was invalid\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the field was not found in the originating transaction\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                                                                         |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| ByteArray or ErrorCode | \u003Cp>\u003C/p>\u003Cp>Returns the value of the specified field as an array of numbers, or an ErrorCode if the lookup fails.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/originating-transaction/otxn_field.mdx","6f3f4f3e8c2b82f9","docs/hooks/functions/originating-transaction/otxn_generation",{"id":1033,"data":1035,"body":1041,"filePath":1042,"digest":1043,"deferredRender":14},{"title":1036,"description":1037,"editUrl":14,"head":1038,"template":16,"sidebar":1039,"pagefind":14,"draft":18},"otxn_generation","Get the generation of the originating transaction",[],{"hidden":18,"attrs":1040},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Return the generation of the originating transaction or `1` if no generation field is present.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieve the generation number of the originating transaction.\n* Returns the generation number as a number.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t otxn_generation (\n    void\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction otxn_generation(): number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t generation = \n  otxn_generation();\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst generation = otxn_generation()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nNone\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type   | Description                                |\n| ------ | ------------------------------------------ |\n| number | Returns the generation number as a number. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type     | Description                                                                                                        |\n| -------- | ------------------------------------------------------------------------------------------------------------------ |\n| int64_t | The generation of the originating transaction, or `1` if no generation was present on the originating transaction. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/originating-transaction/otxn_generation.mdx","65c44a235477ff5d","docs/hooks/functions/originating-transaction/otxn_json",{"id":1044,"data":1046,"body":1052,"filePath":1053,"digest":1054,"deferredRender":14},{"title":1047,"description":1048,"editUrl":14,"head":1049,"template":16,"sidebar":1050,"pagefind":14,"draft":18},"otxn_json","Output the originating transaction in JSON format.",[],{"hidden":18,"attrs":1051},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n* Output the originating transaction in JSON format.\n* Returns the originating transaction as a JSON object or Transaction, or an ErrorCode if the retrieval fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction otxn_json(): ErrorCode | Record\u003Cstring, any> | Transaction\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst tx_json = otxn_json()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nNo parameters\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n| Type                                             | Description                                                                                                  |\n| ------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ |\n| ErrorCode \\| Record\\\u003Cstring, any> \\| Transaction | Returns the originating transaction as a JSON object or Transaction, or an ErrorCode if the retrieval fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/originating-transaction/otxn_json.mdx","229052d9b6978c00","docs/hooks/functions/originating-transaction/otxn_param",{"id":1055,"data":1057,"body":1063,"filePath":1064,"digest":1065,"deferredRender":14},{"title":1058,"description":1059,"editUrl":14,"head":1060,"template":16,"sidebar":1061,"pagefind":14,"draft":18},"otxn_param","Retrieve the parameter value for a named Invoke transaction parameter",[],{"hidden":18,"attrs":1062},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Look up the value for a named parameter specified in `read_ptr` on the originating transaction (ttINVOKE only).\n* Write the parameter's value to `write_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Look up the value for a named parameter specified on the originating transaction.\n* Returns the value of the specified parameter, or an ErrorCode if the lookup fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t otxn_param (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction otxn_param(name: ByteArray | HexString): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t pname[] = {0xCAU, 0xFEU};\nuint8_t pvalue[32];\nint64_t value_len = \n    otxn_param(pvalue, 32, pname, 2);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst pname = [0xCA, 0xFE]\nconst pvalue = otxn_param(pname)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                              |\n| ---------- | --------- | ---------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output. Should be at least 32 bytes. |\n| write_len | uint32_t | Length of the output buffer.                                                             |\n| read_ptr  | uint32_t | Pointer to a buffer containing the parameter's name                                      |\n| read_len  | uint32_t | Length of the parameter's name                                                           |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type                   | Description                                                               |\n| ---- | ---------------------- | ------------------------------------------------------------------------- |\n| name | ByteArray \\| HexString | The name of the parameter to look up, specified as a ByteArray or string. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                    |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The specified paramater doesn't exist or is null\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- The parameter name can't be null\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- The parameter name is greater than 32 bytes\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                                        |\n| ---------------------- | ---------------------------------------------------------------------------------- |\n| ErrorCode \\| ByteArray | Returns the value of the specified parameter, or an ErrorCode if the lookup fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/originating-transaction/otxn_param.mdx","07acc17bcba2e3ff","docs/hooks/functions/originating-transaction/otxn_id",{"id":1066,"data":1068,"body":1074,"filePath":1075,"digest":1076,"deferredRender":14},{"title":1069,"description":1070,"editUrl":14,"head":1071,"template":16,"sidebar":1072,"pagefind":14,"draft":18},"otxn_id","Output the canonical hash of the originating transaction",[],{"hidden":18,"attrs":1073},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Write the canonical hash of the originating transaction to the output buffer.\n* If flags = 1 and the transaction is an EMIT_FAILURE transaction then write the canonical hash of the originating transaction that caused the emission.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Output the canonical hash of the originating transaction.\n* Returns the transaction hash as an array of numbers, or an ErrorCode if the retrieval fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t otxn_id (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t flags\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction otxn_id(flag: number): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t txn_id[32];\nint64_t bytes_written = \n    otxn_id(txn_id, 32, 0);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst tx_id = otxn_id(0)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                                                                                                                                                 |\n| ---------- | --------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of to store the hash.                                                                                                                                                                                   |\n| write_len | uint32_t | Length of the output buffer. Should be at least 32 bytes.                                                                                                                                                                   |\n| flags      | uint32_t | \u003Cp>If \u003Ccode>0\u003C/code>:\u003Cbr />Write the canonical hash of the originating transaction.\u003Cbr />\u003Cbr />If \u003Ccode>1\u003C/code> AND the originating transaction is an EMIT_FAILURE:\u003Cbr />Write the canonical hash of the emitting transaction.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name  | Type   | Description                                                                                                                                                                                                                 |\n| ----- | ------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| flags | number | \u003Cp>If \u003Ccode>0\u003C/code>:\u003Cbr />Write the canonical hash of the originating transaction.\u003Cbr />\u003Cbr />If \u003Ccode>1\u003C/code> AND the originating transaction is an EMIT_FAILURE:\u003Cbr />Write the canonical hash of the emitting transaction.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- output buffer was not large enough to hold the serialized object\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                                                  |\n| ---------------------- | -------------------------------------------------------------------------------------------- |\n| ErrorCode \\| ByteArray | Returns the transaction hash as an array of numbers, or an ErrorCode if the retrieval fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/originating-transaction/otxn_id.mdx","19ab9fe118bf5a02","docs/hooks/functions/originating-transaction/otxn_slot",{"id":1077,"data":1079,"body":1085,"filePath":1086,"digest":1087,"deferredRender":14},{"title":1080,"description":1081,"editUrl":14,"head":1082,"template":16,"sidebar":1083,"pagefind":14,"draft":18},"otxn_slot","Load the originating transaction into a slot",[],{"hidden":18,"attrs":1084},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Emplace the originating transaction into the slot specified or into a new slot if no slot is specified\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t otxn_slot (\n    uint32_t slot_no\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction otxn_slot(slotno: number): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t otxn_slot_no = \n\t\totxn_slot(0);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst otxn_slot_no = otxn_slot(0)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type      | Description                                                                   |\n| -------- | --------- | ----------------------------------------------------------------------------- |\n| slot_no | uint32_t | The slot number to emplace into, or 0 if you wish to pick the next available. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type   | Description                 |\n| ------ | ------ | --------------------------- |\n| slotno | number | The slot number to look up. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                        |\n| -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The slot the otxn was placed in\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- specified slot number exceeds the largest possible slot number\u003Cbr />\u003Cbr />\u003Ccode>NO_FREE_SLOTS\u003C/code>\u003Cbr />- the request could not granted because no free slot was avaialble to place the originating transaction into.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                                                                                            |\n| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| ErrorCode \\| ByteArray | \u003Cp>\u003C/p>\u003Cp>Returns the value associated with the specified slot number as an array of numbers, or an ErrorCode if the lookup fails.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/originating-transaction/otxn_slot.mdx","167e6cf3a5950d4a","docs/hooks/functions/float/float_compare",{"id":1088,"data":1090,"body":1096,"filePath":1097,"digest":1098,"deferredRender":14},{"title":1091,"description":1092,"editUrl":14,"head":1093,"template":16,"sidebar":1094,"pagefind":14,"draft":18},"float_compare","Perform a comparison on two XFL floating point numbers",[],{"hidden":18,"attrs":1095},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Evaluate a comparison of two XFL floating point numbers\n* Return the result of the comparison as a boolean encoded in an int64_t.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Evaluate a comparison of two XFL floating point numbers\n* Returns an error code or the comparison result as a number.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_compare (\n    int64_t float1,\n    int64_t float2,\n    uint32_t mode\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_compare(\n    f1: bigint,\n    f2: bigint,\n    mode: number\n  ): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nif (float_compare(pusd_to_send, 0, COMPARE_LESS) == 1)\n{\n  // pusd_to_send is less than 0\n}\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nif (float_compare(pusd_to_send, 0n, COMPARE_LESS) == 1)\n{\n  // pusd_to_send is less than 0\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Name   | Type      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| ------ | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| float1 | int64_t  | An XFL floating point enclosing number representing the first operand to the comparison                                                                                                                                                                                                                                                                                                                                                                                                                |\n| float2 | int64_t  | An XFL floating point enclosing number representing the second operand to the comparison                                                                                                                                                                                                                                                                                                                                                                                                               |\n| mode   | uint32_t | A bit-flag field consisting of any of (or any logically valid combination of) the following flags:\u003Cbr />\u003Ccode>COMPARE_LESS\u003C/code>\u003Cbr />\u003Ccode>COMPARE_EQUAL\u003C/code>\u003Cbr />\u003Ccode>COMPARE_GREATER\u003C/code>\u003Cbr />\u003Cbr />Valid combinations are:\u003Cbr />\u003Ccode>COMPARE_LESS\u003C/code> | \u003Ccode>COMPARE_GREATER\u003C/code>\u003Cbr />- Not equal\u003Cbr />\u003Cbr />\u003Ccode>COMPARE_LESS\u003C/code> | \u003Ccode>COMPARE_EQUAL\u003C/code>\u003Cbr />- Less than or equal to\u003Cbr />\u003Cbr />\u003Ccode>COMPARE_GREATER\u003C/code> | \u003Ccode>COMPARE_EQUAL\u003C/code>\u003Cbr />- Greater than or equal to |\n\n\u003CAside type=\"caution\">\nAlways verify the function returned `1` rather than `non-zero`, as negative error codes will be classed as `non-zero`.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type   | Description                                                    |\n| ---- | ------ | -------------------------------------------------------------- |\n| f1   | bigint | The first float to compare.                                    |\n| f2   | bigint | The second float to compare.                                   |\n| mode | number | The comparison mode (e.g., less than, equal to, greater than). |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Type     | Description                                                                                                                                                                                                                                                                                                                                           |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Ccode>0\u003C/code> if the comparison was logically false.\u003Cbr />\u003Ccode>1\u003C/code> if the comparison was logically true.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- one of the supplied parameters was not a valid XFL enclosing number\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- invalid combination of supplied comparison flags. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                | Description                                                 |\n| ------------------- | ----------------------------------------------------------- |\n| ErrorCode or number | Returns an error code or the comparison result as a number. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_compare.mdx","a09681aca275c8bd","docs/hooks/functions/originating-transaction/otxn_type",{"id":1099,"data":1101,"body":1107,"filePath":1108,"digest":1109,"deferredRender":14},{"title":1102,"description":1103,"editUrl":14,"head":1104,"template":16,"sidebar":1105,"pagefind":14,"draft":18},"otxn_type","Get the Transaction Type of the originating transaction",[],{"hidden":18,"attrs":1106},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Return the Transaction Type of the originating transaction\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t otxn_type (\n    void\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction otxn_type(): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t tt = \n  otxn_type();\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst tt = txn_type()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\nNone\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                         |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | The Transaction Type of the originating transaction. Check the table below for a list of known Transaction Types at time of writing |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                                                       |\n| ------------------- | --------------------------------------------------------------------------------- |\n| ErrorCode \\| number | Returns the Transaction Type as a number, or an ErrorCode if the retrieval fails. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Known Transaction Types\n\n| Name                            | Value |\n| ------------------------------- | ----- |\n| ttPAYMENT                       | 0     |\n| ttESCROW_CREATE                | 1     |\n| ttESCROW_FINISH                | 2     |\n| ttACCOUNT_SET                  | 3     |\n| ttESCROW_CANCEL                | 4     |\n| ttREGULAR_KEY_SET             | 5     |\n| ttOFFER_CREATE                 | 7     |\n| ttOFFER_CANCEL                 | 8     |\n| ttTICKET_CREATE                | 10    |\n| ttTICKET_CANCEL                | 11    |\n| ttSIGNER_LIST_SET             | 12    |\n| ttPAYCHAN_CREATE               | 13    |\n| ttPAYCHAN_FUND                 | 14    |\n| ttPAYCHAN_CLAIM                | 15    |\n| ttCHECK_CREATE                 | 16    |\n| ttCHECK_CASH                   | 17    |\n| ttCHECK_CANCEL                 | 18    |\n| ttDEPOSIT_PREAUTH              | 19    |\n| ttTRUST_SET                    | 20    |\n| ttACCOUNT_DELETE               | 21    |\n| ttHOOK_SET                     | 22    |\n| ttURITOKEN_MINT                | 45    |\n| ttURITOKEN_BURN                | 46    |\n| ttURITOKEN_BUY                 | 47    |\n| ttURITOKEN_CREATE_SELL_OFFER | 48    |\n| ttURITOKEN_CANCEL_SELL_OFFER | 49    |\n| ttGENESIS_MINT                 | 96    |\n| ttIMPORT                        | 97    |\n| ttCLAIM_REWARD                 | 98    |\n| ttINVOKE                        | 99    |\n| ttAMENDMENT                     | 100   |\n| ttFEE                           | 101   |\n| ttUNL_MODIFY                   | 102   |\n| ttEMIT_FAILURE                 | 103   |\n| ttUNL_REPORT                   | 104   |","src/content/docs/docs/hooks/functions/originating-transaction/otxn_type.mdx","06642d48b60cf74a","docs/hooks/functions/float/float_divide",{"id":1110,"data":1112,"body":1118,"filePath":1119,"digest":1120,"deferredRender":14},{"title":1113,"description":1114,"editUrl":14,"head":1115,"template":16,"sidebar":1116,"pagefind":14,"draft":18},"float_divide","Divide an XFL by another XFL floating point number",[],{"hidden":18,"attrs":1117},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Divide an XFL by another XFL\n* Return a new XFL as an int64_t\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Divides one float representation by another.\n* An error code or the quotient as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_divide (\n    int64_t float1,\n    int64_t float2\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\n function float_divide(f1: bigint, f2: bigint): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t still_one =\n    float_divide(float_one(), float_one());\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst still_one =\n    float_divide(float_one(), float_one())\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name   | Type     | Description                                                  |\n| ------ | -------- | ------------------------------------------------------------ |\n| float1 | int64_t | An XFL floating point enclosing number to act as numerator   |\n| float2 | int64_t | An XFL floating point enclosing number to act as denominator |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type   | Description         |\n| ---- | ------ | ------------------- |\n| f1   | bigint | The dividend float. |\n| f2   | bigint | The divisor float.  |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                    |\n| -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The XFL (xls17) enclosing number\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- the supplied parameter was not a valid XFL enclosing number or the division resulted in an XFL that cannot be represented.\u003Cbr />\u003Cbr />\u003Ccode>DIVISION_BY_ZERO\u003C/code>\u003Cbr />- the supplied parameter was zero.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                |\n| ------------------- | ------------------------------------------ |\n| bigint or ErrorCode | An error code or the quotient as a bigint. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_divide.mdx","5fde34b753ae3fb6","docs/hooks/functions/float/float_exponent",{"id":1121,"data":1123,"body":1129,"filePath":1130,"digest":1131,"deferredRender":14},{"title":1124,"description":1125,"editUrl":14,"head":1126,"template":16,"sidebar":1127,"pagefind":14,"draft":18},"float_exponent","Get the exponent of an XFL enclosing number",[],{"hidden":18,"attrs":1128},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003CAside type=\"caution\" title=\"Replaced by macro\">\nThis function was replaced by a macro. Please use the macro below in your code instead.\nTo check the validity of the XFL please use float_mantissa in conjunction with this macro.\n\u003C/Aside>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Return the exponent part of an XFL as a signed integer\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\nBecause exponents can be negative, and because negatives are reserved for error states, exponents cannot be returned from functions. Therefore this function has become a macro as shown below.\n\n```c\n#define float_exponent(f)\\\n        (((int32_t)(((f) >> 54U) & 0xFFU)) - 97)\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst float_exponent = (f) => (Number(((f) >> 54n) & 0xFFn) - 97)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t exponent =\n    float_exponent(float_one());\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name   | Type     | Description                            |\n| ------ | -------- | -------------------------------------- |\n| float1 | int64_t | An XFL floating point enclosing number |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_exponent.mdx","9d9fd4c9a01bde6b","docs/hooks/functions/float/float_int",{"id":1132,"data":1134,"body":1140,"filePath":1141,"digest":1142,"deferredRender":14},{"title":1135,"description":1136,"editUrl":14,"head":1137,"template":16,"sidebar":1138,"pagefind":14,"draft":18},"float_int","Convert an XFL floating point into an integer (floor)",[],{"hidden":18,"attrs":1139},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Left shift (multiply by 10) the XFL by the number of specified decimal places\n* Convert the resulting XFL to an integer, discarding any remainder\n* Return the integer\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Converts a float representation to an integer with specified decimal places.\n* An error code or the resulting integer as a number.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_int (\n    int64_t float1,\n    uint32_t decimal_places,\n    uint32_t absolute\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_int(\n    f1: bigint,\n    decimal_places: number,\n    abs: number\n  ): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t drops =\n    float_int(xahbalance, 6, 0);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst drops =\n    float_int(xahbalance, 6, 0);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name            | Type      | Description                                                                                              |\n| --------------- | --------- | -------------------------------------------------------------------------------------------------------- |\n| float1          | int64_t  | An XFL floating point enclosing number representing the first operand to the addition                    |\n| decimal_places | uint32_t | The number of places to shift the decimal to the right before computing the floor of the floating point. |\n| absolute        | uint32_t | If `1` also take the absolute of the value before returning it.                                          |\n\n\u003CAside type=\"tip\">\nNegative return values are reserved for error codes. Therefore if you need to execute this function against a negative XFL you should use `absolute = 1`\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name            | Type   | Description                                   |\n| --------------- | ------ | --------------------------------------------- |\n| f1              | bigint | The float to convert                          |\n| decimal_places | number | The number of decimal places to consider.     |\n| abs             | number | Indicates whether to take the absolute value. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                       |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The computed positive integer\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- one of the supplied parameters was not a valid XFL enclosing number\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- attempted to specify more than 15 decimal places.\u003Cbr />\u003Cbr />\u003Ccode>CANT_RETURN_NEGATIVE\u003C/code>\u003Cbr />- attempted to return a negative integer but this is not allowed, use \u003Ccode>absolute = 1\u003C/code>\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                | Description                                                 |\n| ------------------- | ----------------------------------------------------------- |\n| number or ErrorCode | Returns an error code or the resulting integer as a number. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_int.mdx","64a53b9394b3de46","docs/hooks/functions/float/float_mantissa",{"id":1143,"data":1145,"body":1151,"filePath":1152,"digest":1153,"deferredRender":14},{"title":1146,"description":1147,"editUrl":14,"head":1148,"template":16,"sidebar":1149,"pagefind":14,"draft":18},"float_mantissa","Get the mantissa of an XFL enclosing number",[],{"hidden":18,"attrs":1150},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Return the mantissa part of an XFL as an unsigned integer\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the mantissa of a float representation.\n* An error code or the mantissa as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_mantissa (\n    int64_t float1\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_mantissa(f1: bigint): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t mantissa =\n    float_mantissa(float_one());\n```\n\n\u003CAside type=\"tip\">\nThe mantissa of a negative XFL is always positive. Use `float_sign` to determine the sign of the number.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst mantissa =\n    float_mantissa(float_one());\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name | Type   | Description                              |\n| ---- | ------ | ---------------------------------------- |\n| f1   | bigint | The float to retrieve the mantissa from. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type     | Description                            |\n| ------ | -------- | -------------------------------------- |\n| float1 | int64_t | An XFL floating point enclosing number |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                 |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The mantissa of the XFL\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- the supplied parameter was not a valid XFL enclosing number\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                |\n| ------------------- | ------------------------------------------ |\n| bigint or ErrorCode | An error code or the mantissa as a bigint. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_mantissa.mdx","060ad5f844f07eba","docs/hooks/functions/float/float_invert",{"id":1154,"data":1156,"body":1162,"filePath":1163,"digest":1164,"deferredRender":14},{"title":1157,"description":1158,"editUrl":14,"head":1159,"template":16,"sidebar":1160,"pagefind":14,"draft":18},"float_invert","Divide one by an XFL floating point number",[],{"hidden":18,"attrs":1161},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Inverts a float representation.\n* Return a inverted float as a bigint or an ErrorCode\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Divide `1` by an XFL\n* Return a new XFL as an int64_t\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_invert (\n    int64_t float1\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_invert(f1: bigint): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t still_one =\n    float_invert(float_one());\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst still_one =\n    float_invert(float_one())\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name   | Type     | Description                            |\n| ------ | -------- | -------------------------------------- |\n| float1 | int64_t | An XFL floating point enclosing number |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type  | Description         |\n| ---- | ----- | ------------------- |\n| f1   | float | The float to invert |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                    |\n| -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The XFL (xls17) enclosing number\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- the supplied parameter was not a valid XFL enclosing number or the division resulted in an XFL that cannot be represented.\u003Cbr />\u003Cbr />\u003Ccode>DIVISION_BY_ZERO\u003C/code>\u003Cbr />- the supplied parameter was zero.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                      |\n| ------------------- | ------------------------------------------------ |\n| ErrorCode \\| bigint | An error code or the inverted float as a bigint. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_invert.mdx","a19bbb637e0a7c00","docs/hooks/functions/float/float_log",{"id":1165,"data":1167,"body":1173,"filePath":1174,"digest":1175,"deferredRender":14},{"title":1168,"description":1169,"editUrl":14,"head":1170,"template":16,"sidebar":1171,"pagefind":14,"draft":18},"float_log","Compute the decimal log of an XFL",[],{"hidden":18,"attrs":1172},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Compute a the decimal logarithm of an XFL number\n* Return the new XFL\n\n\u003CAside type=\"caution\">\nDue to speed constraints,`float_log` converts the argument to an IEEE base-2 double precision floating point before applying base 10 log. Therefore the returned result will often contain less precision than expected.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Calculates the logarithm of a float representation.\n* Returns an error code or the logarithm as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_log (\n    int64_t float1\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_log(f1: bigint): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t zero =\n    float_log(float_one());\n```\n\n\u003CAside type=\"caution\">\nIf a negative number is passed the function will return `COMPLEX_NOT_SUPPORTED` if the root is an even root.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst zero =\n    float_log(float_one())\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Name   | Type     | Description                                                                                            |\n| ------ | -------- | ------------------------------------------------------------------------------------------------------ |\n| float1 | int64_t | An XFL floating point enclosing number representing the floating point number to take the logarithm of |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type   | Description                              |\n| ---- | ------ | ---------------------------------------- |\n| f1   | bigint | The float to calculate the logarithm of. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                          |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The computed logarithm\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- the supplied parameter was not a valid XFL enclosing number\u003Cbr />\u003Cbr />\u003Ccode>COMPLEX_NOT_SUPPORTED\u003C/code>\u003Cbr />- the supplied parameter was a negative number which would result in a complex return value.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                         |\n| ------------------- | --------------------------------------------------- |\n| bigint or ErrorCode | Returns an error code or the logarithm as a bigint. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_log.mdx","a7d2236015b5305a","docs/hooks/functions/float/float_multiply",{"id":1176,"data":1178,"body":1184,"filePath":1185,"digest":1186,"deferredRender":14},{"title":1179,"description":1180,"editUrl":14,"head":1181,"template":16,"sidebar":1182,"pagefind":14,"draft":18},"float_multiply","Multiply two XFL numbers together",[],{"hidden":18,"attrs":1183},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Compute the multiplication of two XFL (xls17) floating point numbers\n* Return a new XFL as an int64_t\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Compute the multiplication of two XFL (xls17) floating point numbers\n* Return n error code or new XFL as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_multiply (\n    int64_t float1,\n    int64_t float2\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_multiply(f1: bigint, f2: bigint): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t max_vault_pusd =\n    float_multiply(vault_xrp, exchange_rate);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst max_vault_pusd =\n    float_multiply(vault_xrp, exchange_rate)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Name   | Type     | Description                                                                                  |\n| ------ | -------- | -------------------------------------------------------------------------------------------- |\n| float1 | int64_t | An XFL floating point enclosing number representing the first operand to the multiplication  |\n| float2 | int64_t | An XFL floating point enclosing number representing the second operand to the multiplication |\n\n\u003CAside type=\"caution\">\nCertain multiplications may overflow, which return with an `INVALID_FLOAT` error. However an **underflow** returns as XFL Canonical Zero (i.e. enclosing number = 0).\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type   | Description                                                                                  |\n| ---- | ------ | -------------------------------------------------------------------------------------------- |\n| f1   | bigint | An XFL floating point enclosing number representing the first operand to the multiplication  |\n| f2   | bigint | An XFL floating point enclosing number representing the second operand to the multiplication |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Type     | Description                                                                                                                                                                                                                                                                       |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The XFL (xls17) enclosing number\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- one of the supplied parameters was not a valid XFL enclosing number\u003Cbr />\u003Cbr />\u003Ccode>OVERFLOW\u003C/code>\u003Cbr />- the result of the multiplication was too large to store in an XFL.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type               | Description                                       |\n| ------------------ | ------------------------------------------------- |\n| Errorcor or bigint | An error code or The XFL (xls17) enclosing number |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_multiply.mdx","a30c12ff688547dc","docs/hooks/functions/float/float_mulratio",{"id":1187,"data":1189,"body":1195,"filePath":1196,"digest":1197,"deferredRender":14},{"title":1190,"description":1191,"editUrl":14,"head":1192,"template":16,"sidebar":1193,"pagefind":14,"draft":18},"float_mulratio","Multiply an XFL floating point by a non-XFL numerator and denominator",[],{"hidden":18,"attrs":1194},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Compute the multiplication of an XFL (xls17) floating point number and the quotient of two integers\n* Return a new XFL as an int64_t\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Multiplies a float by a ratio defined by a numerator and denominator.\n* Returns an error code or new XFL as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_mulratio (\n    int64_t float1,\n    uint32_t round_up,\n    uint32_t numerator,\n    uint32_t denominator\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_mulratio(\n    f1: bigint,\n    round_up: number,\n    numerator: number,\n    denominator: number\n  ): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t max_vault_pusd =\n    float_mulratio(max_vault_pusd, 0,\n        COLLATERALIZATION_NUMERATOR, COLLATERALIZATION_DENOMINATOR);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst max_vault_pusd =\n    float_mulratio(max_vault_pusd, 0,\n        COLLATERALIZATION_NUMERATOR, COLLATERALIZATION_DENOMINATOR);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name        | Type      | Description                                                                                 |\n| ----------- | --------- | ------------------------------------------------------------------------------------------- |\n| float1      | int64_t  | An XFL floating point enclosing number representing the first operand to the multiplication |\n| round_up   | uint32_t | If non-zero all computations will be rounded up                                             |\n| numerator   | uint32_t | The numerator of the quotient that the float will be multiplied by                          |\n| denominator | uint32_t | The denominator of the quotient that the float will be multiplied by                        |\n\n\u003CAside type=\"caution\">\nCertain multiplications may overflow, which return with an `INVALID_FLOAT` error. However an **underflow** returns as XFL Canonical Zero (i.e. enclosing number = 0).\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name        | Type   | Description                                                                                 |\n| ----------- | ------ | ------------------------------------------------------------------------------------------- |\n| f1          | bigint | An XFL floating point enclosing number representing the first operand to the multiplication |\n| round_up   | number | If non-zero all computations will be rounded up                                             |\n| numerator   | number | The numerator of the quotient that the float will be multiplied by                          |\n| denominator | number | The denominator of the quotient that the float will be multiplied by                        |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                    |\n| -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The XFL (xls17) enclosing number\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- one of the supplied parameters was not a valid XFL enclosing number\u003Cbr />\u003Cbr />\u003Ccode>OVERFLOW\u003C/code>\u003Cbr />- the result of the multiplication was too large to store in an XFL.\u003Cbr />\u003Cbr />\u003Ccode>DIVISION_BY_ZERO\u003C/code>\u003Cbr />- the supplied denominator was zero.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                | Description                                                 |\n| ------------------- | ----------------------------------------------------------- |\n| ErrorCode or bigint | Returns an error code or tThe XFL (xls17) enclosing number. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_mulratio.mdx","a1b113e47421ff18","docs/hooks/functions/float/float_negate",{"id":1198,"data":1200,"body":1206,"filePath":1207,"digest":1208,"deferredRender":14},{"title":1201,"description":1202,"editUrl":14,"head":1203,"template":16,"sidebar":1204,"pagefind":14,"draft":18},"float_negate","Negate an XFL floating point number",[],{"hidden":18,"attrs":1205},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Multiply an XFL by `-1`\n* Return a new XFL as an int64_t\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Negates a float representation.\n* Returns an error code or the negated float as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_negate (\n    int64_t float1\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_negate(f1: bigint): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t negative_one =\n    float_negate(float_one());\n```\n\n\u003CAside type=\"tip\" title=\"Special case\">\nThe negation of Canonical Zero is Canonical Zero. Unlike some floating point standards (such as IEEE) there is no \"negative zero\" in XFL.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst negative_one =\n    float_negate(float_one());\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name   | Type     | Description                            |\n| ------ | -------- | -------------------------------------- |\n| float1 | int64_t | An XFL floating point enclosing number |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type   | Description          |\n| ---- | ------ | -------------------- |\n| f1   | bigint | The float to negate. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                  |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The XFL (xls17) enclosing number\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- one of the supplied parameters was not a valid XFL enclosing number\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                        |\n| ------------------- | -------------------------------------------------- |\n| ErrorCode or bigint | An error code or The XFL (xls17) enclosing number. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_negate.mdx","388fa4fa74de2c08","docs/hooks/functions/float/float_set",{"id":1209,"data":1211,"body":1217,"filePath":1218,"digest":1219,"deferredRender":14},{"title":1212,"description":1213,"editUrl":14,"head":1214,"template":16,"sidebar":1215,"pagefind":14,"draft":18},"float_set","Create a float from an exponent and mantissa",[],{"hidden":18,"attrs":1216},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Compute an XFL (xls17) floating point from the provided exponent and mantissa\n* Return that XFL as an int64_t\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Sets the exponent and mantissa for a float representation.\n* Returns an error code or a new XFL as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_set (\n    int32_t exponent,\n    int64_t mantissa\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_set(exponent: number, mantissa: number): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t small_amount =\n  float_set(-81, 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst small_amount = float_set(-81, 1);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type     | Description                                                     |\n| -------- | -------- | --------------------------------------------------------------- |\n| exponent | int32_t | An exponent in the range `-96` to `80`                          |\n| mantissa | int64_t | A mantissa. If negative then the sign of the float is negative. |\n\n\u003CAside type=\"caution\">\nWhen setting a mantissa that is greater or fewer than 16 decimal digits the exponent will be adjusted to ensure the mantissa is exactly 16 digits. This adjustment may result in an `INVALID_FLOAT` in some circumstances.\n\u003C/Aside>\n\n\u003CAside type=\"tip\" title=\"Special case\">\nXFL canonical 0 is also 0 in the enclosing number. Thus there is never a need to call `float_set(0,0);`\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name     | Type   | Description                                                     |\n| -------- | ------ | --------------------------------------------------------------- |\n| exponent | bigint | An exponent in the range `-96` to `80`                          |\n| mantissa | bigint | A mantissa. If negative then the sign of the float is negative. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                         |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The XFL (xls17) enclosing number\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- The adjustment of the mantissa to 16 digits produced an under or overflow.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                | Description                                        |\n| ------------------- | -------------------------------------------------- |\n| ErrorCode \\| bigint | An error code or the XFL (xls17) enclosing number. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_set.mdx","56a74fd4b3756e74","docs/hooks/functions/float/float_one",{"id":1220,"data":1222,"body":1228,"filePath":1229,"digest":1230,"deferredRender":14},{"title":1223,"description":1224,"editUrl":14,"head":1225,"template":16,"sidebar":1226,"pagefind":14,"draft":18},"float_one","Return the number 1 represented in an XFL enclosing number",[],{"hidden":18,"attrs":1227},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Return one(`1`) as an XFL int64_t\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the float representation of a number.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_one();\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_one(): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t one =\n    float_one();\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst one = float_one()\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\nThis function has no parameters.\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                      |\n| -------- | -------------------------------- |\n| int64_t | The XFL (xls17) enclosing number |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                      |\n| ------------------- | -------------------------------- |\n| ErrorCode \\| bigint | The XFL (xls17) enclosing number |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_one.mdx","7923d08ec9450696","docs/hooks/functions/float/float_root",{"id":1231,"data":1233,"body":1239,"filePath":1240,"digest":1241,"deferredRender":14},{"title":1234,"description":1235,"editUrl":14,"head":1236,"template":16,"sidebar":1237,"pagefind":14,"draft":18},"float_root","Compute the nth root of an XFL",[],{"hidden":18,"attrs":1238},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Compute a the `nth` root of an XFL number\n* Return the new XFL\n\n\u003CAside type=\"caution\">\nDue to speed constraints,`float_root` converts the argument to an IEEE base-2 double precision floating point before applying n-th root. Therefore the returned result will often contain less precision than expected. If you need better precision you should consider dividing your XFL into a high and a low product then individually take the square roots of those products and multiply the results together.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Calculates the nth root of a float representation.\n* An error code or the resulting root as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_root (\n    int64_t float1,\n    uint32_t n\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_root(f1: bigint, n: number): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t three =\n    float_root(nine, 2);\n```\n\n\u003CAside type=\"caution\">\nIf a negative number is passed the function will return `COMPLEX_NOT_SUPPORTED` if the root is an even root.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst three =\n  float_root(nine, 2)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name   | Type      | Description                                                                                              |\n| ------ | --------- | -------------------------------------------------------------------------------------------------------- |\n| float1 | int64_t  | An XFL floating point enclosing number representing the floating point number to take the square root of |\n| n      | uint32_t | The root to compute, for example `2` is a square root.                                                   |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type   | Description                          |\n| ---- | ------ | ------------------------------------ |\n| f1   | bigint | The float to calculate the root of.  |\n| n    | number | The degree of the root to calculate. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Type     | Description                                                                                                                                                                                                                                                                                 |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The computed nth root\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- the supplied parameter was not a valid XFL enclosing number\u003Cbr />\u003Cbr />\u003Ccode>COMPLEX_NOT_SUPPORTED\u003C/code>\u003Cbr />- the supplied parameter was a negative number which would result in a complex root.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                | Description                                              |\n| ------------------- | -------------------------------------------------------- |\n| bigint or ErrorCode | Returns an error code or the resulting root as a bigint. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_root.mdx","6307a9c4bdf10a29","docs/hooks/functions/float/float_sign",{"id":1242,"data":1244,"body":1250,"filePath":1251,"digest":1252,"deferredRender":14},{"title":1245,"description":1246,"editUrl":14,"head":1247,"template":16,"sidebar":1248,"pagefind":14,"draft":18},"float_sign","Get the sign of an XFL enclosing number",[],{"hidden":18,"attrs":1249},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Return `1` if the XFL is negative, otherwise return 0\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Return 1 if the XFL is negative, otherwise return 0\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_sign (\n    int64_t float1\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_sign(f1: bigint): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t sign =\n    float_sign(float_one());\n```\n\n\u003CAside type=\"tip\">\nThe sign bit inside the XFL is the `0` when the XFL is negative, however this function follows the standard computing convention to return `1` if it is negative.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst sign =\n   float_sign(float_one());\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name   | Type     | Description                            |\n| ------ | -------- | -------------------------------------- |\n| float1 | int64_t | An XFL floating point enclosing number |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type   | Description                              |\n| ---- | ------ | ---------------------------------------- |\n| f1   | bigint | The float to retrieve the mantissa from. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                         |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The sign of the XFL:\u003Cbr />\u003Ccode>0\u003C/code> if positive, \u003Ccode>1\u003C/code> if negative.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- the supplied parameter was not a valid XFL enclosing number\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                |\n| ------------------- | ------------------------------------------ |\n| bigint or ErrorCode | An error code or the mantissa as a bigint. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_sign.mdx","566cc65f1ac75416","docs/hooks/functions/float/float_sto",{"id":1253,"data":1255,"body":1261,"filePath":1262,"digest":1263,"deferredRender":14},{"title":1256,"description":1257,"editUrl":14,"head":1258,"template":16,"sidebar":1259,"pagefind":14,"draft":18},"float_sto","Output an XFL as a serialized object",[],{"hidden":18,"attrs":1260},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read an XFL floating point number and optionally a field code and currency code\n* Write a serialized amount to `write_ptr` according to the parameters provided\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Stores a float representation into a specified field.\n* Returns an error code or the updated value as an array of numbers.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_sto (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t cread_ptr,\n    uint32_t cread_len,  \n    uint32_t iread_ptr,\n    uint32_t iread_len,  \n    int64_t float1,\n    uint32_t field_code\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_sto(\n    currency: ByteArray | HexString | undefined,\n    issuer: ByteArray | HexString | undefined,\n    f1: bigint,\n    field_code: number\n  ): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SBUF(str) (uint32_t)(str), sizeof(str)\nuint8_t amt_out[48];\nif (float_sto(SBUF(amt_out),\n    SBUF(currency), SBUF(hook_accid), pusd_to_send, -1) \u003C 0)\n        rollback(SBUF(\"Peggy: Could not dump pusd amount into sto\"), 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst amt_out = float_sto(currency, hook_accid, pusd_to_send, -1)\nif (typeof amt_out === 'number')\n        rollback(\"Peggy: Could not dump pusd amount into sto\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name        | Type      | Description|\n| ----------- | --------- ||\n| write_ptr  | uint32_t | Pointer to a buffer of a suitable size to store the serialized amount field. Recommend at least 48 bytes.                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| write_len  | uint32_t | The length of the output buffer.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| cread_ptr  | uint32_t | Pointer to a buffer contianing the currency code to serialize into the output. _May be null._                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| cread_len  | uint32_t | The length of the currency code. This must be 20 or 3 or 0 (null).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| iread_ptr  | uint32_t | Pointer to a buffer containing the issuer's Account ID to serialize into the output. _May be null._                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| iread_len  | uint32_t | The length of the issuer's Account ID. This must be either 20 or 0 (null).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| float1      | int64_t  | An XFL floating point enclosing number to serialize.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| field_code | uint32_t | \u003Cp>The \u003Ccode>sf\u003C/code> field code to prefix the serialized amount with. E.g. \u003Ccode>sfAmount\u003C/code>.\u003Cbr />If this field is \u003Ccode>0xFFFFFFFFU\u003C/code> (i.e. \u003Ccode>(uint32_t)(-1)\u003C/code>) then no field code is prepended to the output, and no issuer or currency code is appended, but serialization proceeds as a floating point amount.\u003Cbr />If this field is 0 no field code is prepended to the output, and no issuer or currency code is appended, but serialization proceeds as though the amount is an XRP native amount rather than a floating point.\u003C/p> |\n\n\u003CAside type=\"tip\">\nTo output an `XAH` amount prepopulate the field code in the output buffer then pass the output buffer incremented to the new start and `0` as field_code\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name        | Type                                | Description                                                |\n| ----------- | ----------------------------------- | ---------------------------------------------------------- |\n| currency    | ByteArray \\| HexString \\| undefined | The current value to store into.                           |\n| issuer      | ByteArray \\| HexString \\| undefined | The value to store.                                        |\n| f1          | bigint                              | The field code indicating where to store the float.        |\n| field_code | number                              | An error code or the updated value as an array of numbers. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| -------- ||\n| int64_t | \u003Cp>The number of bytes written to the output buffer.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- the supplied float was not a valid XFL enclosing number\u003Cbr />\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- If instructed to output as \u003Ccode>XRP\u003C/code> or without \u003Ccode>field code\u003C/code> then all non-write pointers and lengths should be 0 (null).\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- The output buffer was too small to receive the serialized object.\u003Cbr />\u003Cbr />\u003Ccode>XFL_OVERFLOW\u003C/code>\u003Cbr />- Expressing the output caused an overflow during normalization.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                   | Description                                                        |\n| ---------------------- | ------------------------------------------------------------------ |\n| ErrorCode \\| ByteArray | Returns an error code or the updated value as an array of numbers. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_sto.mdx","f820909572ac6e85","docs/hooks/functions/float/float_sto_set",{"id":1264,"data":1266,"body":1272,"filePath":1273,"digest":1274,"deferredRender":14},{"title":1267,"description":1268,"editUrl":14,"head":1269,"template":16,"sidebar":1270,"pagefind":14,"draft":18},"float_sto_set","Read a serialized amount into an XFL",[],{"hidden":18,"attrs":1271},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read a serialized floating point number.\n* If there are more fields/data after the serialized floating pointer number then ignore them.\n* Return it as an XFL enclosing number\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Sets the buffer for storing float representations.\n* Returns ErrorCode or the result as a number.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_sto_set (\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_sto_set(buf: ByteArray | HexString): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t vault_pusd = float_sto_set(vault, 8);\nif (vault_pusd \u003C 0)\n  rollback(\"Failed to parse serialized float.\", 33, 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst vault_pusd = float_sto_set(vault)\nif (typeof vault_pusd === 'string')\n  rollback(\"Failed to parse serialized float.\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name      | Type      | Description                                                       |\n| --------- | --------- | ----------------------------------------------------------------- |\n| read_ptr | uint32_t | Pointer to a buffer contianing the serialized XFL. _May be null._ |\n| read_len | uint32_t | The length of the buffer.                                         |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type                   | Description        |\n| ---- | ---------------------- | ------------------ |\n| buf  | ByteArray \\| HexString | The buffer to set. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                      |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| int64_t | \u003Cp>The number of bytes written to the output buffer.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>NOT_AN_OBJECT\u003C/code>\u003Cbr />- the supplied buffer did not contain a valid serialized floating point number\u003Cbr />\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                              |\n| ------------------- | ---------------------------------------- |\n| ErrorCode or number | An error code or the result as a number. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_sto_set.mdx","f0320883ec6ba8b5","docs/hooks/functions/float/float_sum",{"id":1275,"data":1277,"body":1283,"filePath":1284,"digest":1285,"deferredRender":14},{"title":1278,"description":1279,"editUrl":14,"head":1280,"template":16,"sidebar":1281,"pagefind":14,"draft":18},"float_sum","Add two XFL numbers together",[],{"hidden":18,"attrs":1282},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/floating-point-numbers-xfl\">Floating Point Numbers (XFL)\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Compute the addition of two XFL (xls17) floating point numbers\n* Return a new XFL as an int64_t\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Sums two float representations.\n* Returns an error code or the sum as a bigint.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t float_sum (\n    int64_t float1,\n    int64_t float2\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction float_sum(f1: bigint, f2: bigint): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t two =\n    float_sum(float_one(), float_one());\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst two =\n  float_sum(float_one(), float_one());\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n| Name   | Type     | Description                                                                            |\n| ------ | -------- | -------------------------------------------------------------------------------------- |\n| float1 | int64_t | An XFL floating point enclosing number representing the first operand to the addition  |\n| float2 | int64_t | An XFL floating point enclosing number representing the second operand to the addition |\n\n\u003CAside type=\"tip\">\nTo subtract two floats use `float_negate` on the second float then use `float_sum`.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type   | Description              |\n| ---- | ------ | ------------------------ |\n| f1   | bigint | The first float to sum.  |\n| f2   | bigint | The second float to sum. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                 |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The XFL (xls17) enclosing number\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>INVALID_FLOAT\u003C/code>\u003Cbr />- one of the supplied parameters was not a valid XFL enclosing number\u003Cbr />\u003Cbr />\u003Ccode>OVERFLOW\u003C/code>\u003Cbr />- the result of the addition was too large to store in an XFL.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                           |\n| ------------------- | ------------------------------------- |\n| ErrorCode or bigint | An error code or the sum as a bigint. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/float/float_sum.mdx","de331a25e9083916","docs/hooks/functions/serialization/sto_emplace",{"id":1286,"data":1288,"body":1294,"filePath":1295,"digest":1296,"deferredRender":14},{"title":1289,"description":1290,"editUrl":14,"head":1291,"template":16,"sidebar":1292,"pagefind":14,"draft":18},"sto_emplace","Emplace a field into an existing STObject at its canonical placement",[],{"hidden":18,"attrs":1293},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Parse an STObject `S` (source object) pointed to by `sread_ptr`\n* Parse an STObject `F` (to inject/emplace) pointed to by `fread_ptr`\n* Write a new STObject to `write_ptr` which places `F` into `S` at the canonical position `field_id`\n\n\u003CAside type=\"caution\" title=\"Field ID encoding\">\nThe `sto_` apis accept a `field_id` parameter encoded as follows: `(type \u003C\u003C 16U) + field`\\\nThus type 1 field 2 would be `0x10002U`.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Ask for the STO object by the param `sto`\n* Ask for the bytes representing the field to be added by the param `field_bytes`\n* Ask for the ID of the field to be added by the param `field_id`\n* Return the updated STO object in binary encoded ledger data format, or an error code if the operation fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\nC\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t sto_emplace (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t sread_ptr,\n    uint32_t sread_len,\n    uint32_t fread_ptr,\n    uint32_t fread_len,\n    uint32_t field_id\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction sto_emplace(\n    sto: ByteArray | HexString,\n    field_bytes: ByteArray | HexString,\n    field_id: number\n  ): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t tx_out[1024];\n\nint64_t tx_len =\n    sto_emplace(tx_out, sizeof(tx_out),\n                tx_in, tx_len,\n                sequence_field, 5, sfSequence);\n\nif (tx_len \u003C= 0)\n    rollback(\"Emplacing failed.\", 17, 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst tx_out = sto_emplace(tx_in, sequence_field, sfSequence)\nif (typeof tx_out === 'number')\n    rollback(\"Emplacing failed.\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                                                                                             |\n| ---------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | The buffer to write the modified STObject to                                                                                                                            |\n| write_len | uint32_t | The length of the output buffer                                                                                                                                         |\n| sread_ptr | uint32_t | The buffer to read the source STObject from                                                                                                                             |\n| sread_len | uint32_t | The Length of the source object                                                                                                                                         |\n| fread_ptr | uint32_t | The buffer to read the field to be emplaced/injected from                                                                                                               |\n| fread_len | uint32_t | The length of the field to be emplaced/injected                                                                                                                         |\n| field_id  | uint32_t | The `sf` code (location) to form the emplacement. If this already exists in the source object then the existing field is overriden. If it doesn't exist it is inserted. |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name         | Type                   | Description                                                                   |\n| ------------ | ---------------------- | ----------------------------------------------------------------------------- |\n| sto          | ByteArray \\| HexString | The STO object (binary encoded ledger data) to which the field will be added. |\n| field_bytes | ByteArray \\| HexString | The bytes representing the field to be added.                                 |\n| field_id    | number                 | The ID of the field to be added.                                              |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"169\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>The number of bytes written to \u003Ccode>write_ptr\u003C/code>\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- Output buffer must be at least as large as the source object + the injected field, even if the field is only being overriden.\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- Field you are attempting to emplace is too large\u003Cbr />\u003Cbr />\u003Ccode>PARSE_ERROR\u003C/code>\u003Cbr />- The supplied STObject is malformed or not an STObject.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"169\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>ErrorCode | ByteArray\u003C/td>\u003Ctd>The updated STO object in binary encoded ledger data format, or an error code if the operation fails.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/serialization/sto_emplace.mdx","d548ac4c71b34ae1","docs/hooks/functions/serialization/sto_erase",{"id":1297,"data":1299,"body":1305,"filePath":1306,"digest":1307,"deferredRender":14},{"title":1300,"description":1301,"editUrl":14,"head":1302,"template":16,"sidebar":1303,"pagefind":14,"draft":18},"sto_erase","Remove a field from an STObject",[],{"hidden":18,"attrs":1304},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Parse an STObject pointed to by `read_ptr`\n* Write a new STObject to `write_ptr` but without `field_id` if it was present in the original object.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* It will look for the STO object (binary encoded ledger data) from which the field will be removed.\n* It will look for the ID of the field to be erased.\n* Returns the updated STO object in binary encoded ledger data format, or an error code if the operation fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t sto_erase (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint32_t field_id\n);\n```\n\n\u003CAside type=\"caution\" title=\"Field ID encoding\">\nThe `sto_` apis accept a `field_id` parameter encoded as follows: `(type \u003C\u003C 16U) + field`\nThus type 1 field 2 would be `0x10002U`.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction sto_erase(\n    sto: ByteArray | HexString,\n    field_id: number\n  ): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t result = \n  sto_erase(tx_out, sizeof(tx_out),\n            tx_in, tx_len, sfSigners);\n\nif (tx_len \u003C= 0)\n    rollback(\"Erasing failed.\", 15, 1);\n```\n\n\u003CAside type=\"tip\" title=\"Emplace equivalence\">\n`sto_erase` is the same as `sto_emplace` with `0,0` for `field_ptr, field_len` parameters.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst tx_out = sto_erase(tx_in, sfSigners)\n\nif (typeof tx_out === 'number')\n    rollback(\"Erasing failed.\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                  |\n| ---------- | --------- | -------------------------------------------- |\n| write_ptr | uint32_t | The buffer to write the modified STObject to |\n| write_len | uint32_t | The length of the output buffer              |\n| read_ptr  | uint32_t | The buffer to read the source STObject from  |\n| read_len  | uint32_t | The Length of the source object              |\n| field_id  | uint32_t | The `sf` code (location) to erase            |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name      | Type                   | Description                                                                       |\n| --------- | ---------------------- | --------------------------------------------------------------------------------- |\n| sto       | ByteArray \\| HexString | The STO object (binary encoded ledger data) from which the field will be removed. |\n| field_id | number                 | The ID of the field to be erased.                                                 |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The number of bytes written to \u003Ccode>write_ptr\u003C/code>\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- Output buffer must be at least as large as the source object.\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- Field you are attempting to erase from is too large\u003Cbr />\u003Cbr />\u003Ccode>PARSE_ERROR\u003C/code>\u003Cbr />- The supplied STObject is malformed or not an STObject.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The specified \u003Ccode>field_id\u003C/code> isn't present in the STObject.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                                                           |\n| ---------------------- | ----------------------------------------------------------------------------------------------------- |\n| ErrorCode \\| ByteArray | The updated STO object in binary encoded ledger data format, or an error code if the operation fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/serialization/sto_erase.mdx","e3defe52367683ee","docs/hooks/functions/serialization/sto_from_json",{"id":1308,"data":1310,"body":1316,"filePath":1317,"digest":1318,"deferredRender":14},{"title":1311,"description":1312,"editUrl":14,"head":1313,"template":16,"sidebar":1314,"pagefind":14,"draft":18},"sto_from_json","Format JSON as an STO object (binary encoded ledger data).",[],{"hidden":18,"attrs":1315},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n* Takes a JSON object and converts it into a binary encoded ledger data format.\n* Returns STO Object in binary encoded ledger data format, or an error code if the conversion fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction sto_from_json(\n    jsonobj: Record\u003Cstring, any> | Transaction\n  ): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst stoBlob = sto_from_json(stoJson)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name    | Type                                | Description                                     |\n| ------- | ----------------------------------- | ----------------------------------------------- |\n| jsonobj | Record\\\u003Cstring, any> \\| Transaction | JSON object to be converted into an STO object. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                   | Description                                                                                |\n| ---------------------- | ------------------------------------------------------------------------------------------ |\n| ErrorCode \\| ByteArray | STO Object in binary encoded ledger data format, or an error code if the conversion fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/serialization/sto_from_json.mdx","7f62aec4cb1d1b69","docs/hooks/functions/serialization/sto_subarray",{"id":1319,"data":1321,"body":1327,"filePath":1328,"digest":1329,"deferredRender":14},{"title":1322,"description":1323,"editUrl":14,"head":1324,"template":16,"sidebar":1325,"pagefind":14,"draft":18},"sto_subarray","Index into a xahaud serialized array and return the location and length of an index",[],{"hidden":18,"attrs":1326},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Parse a STArray pointed to by `read_ptr`\n* Find the array index specified by `array_id`\n* Return the byte offset and length of the serialized field within the STObject, if it is found\n\n\u003CAside type=\"caution\" title=\"Field ID encoding\">\nThe `sto_` apis accept a `field_id` parameter encoded as follows: `(type \u003C\u003C 16U) + field`\nThus type 1 field 2 would be `0x10002U`.\n\nIn the case of this array field ID is `array_id`.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Ask for the STO object (binary encoded ledger data) from which to extract the subarray.\n* Find the array index specified by `array_id`\n* Return a subarray from an STO object.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t sto_subarray (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint32_t array_id\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction sto_subarray(\n    sto: ByteArray | HexString,\n    array_id: number\n  ): bigint | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SUB_OFFSET(x) ((int32_t)(x >> 32))\n#define SUB_LENGTH(x) ((int32_t)(x & 0xFFFFFFFFULL))\n\n  int64_t memo_lookup =\n    sto_subarray(memos, memos_len, 0);\n\nif (memo_lookup \u003C 0)\n{\n    // sfMemo was not found in the STObject pointed at by memo_ptr\n}\nelse\n{\n    // 0th index of the STArray was found and its location is as follows:\n    uint8_t*  memo_ptr = SUB_OFFSET(memo_lookup) + memos;\n    uint32_t  memo_len = SUB_LENGTH(memo_lookup);\n}\n```\n\n\u003CAside type=\"tip\">\nhookmacro.h already contains the `SUB_OFFSET` and `SUB_LENGTH` macros.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst SUB_OFFSET = (x) => Number(x >> 32n)\nconst SUB_LENGTH = (x) => Number(x & 0xFFFFFFFFn)\n\nconst memo_lookup = sto_subarray(memos, 0)\n\nif (typeof memo_lookup === 'number')\n{\n    // sfMemo was not found in the STObject pointed at\n}\nelse\n{\n    // 0th index of the STArray was found and its location is as follows:\n    const memo_start = SUB_OFFSET(memo_lookup)\n    const memo_len = SUB_LENGTH(memo_lookup)\n    const memo = memos.slice(memo_start, memo_len)\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name      | Type      | Description                                                               |\n| --------- | --------- | ------------------------------------------------------------------------- |\n| read_ptr | uint32_t | Pointer to the buffer containing the STArray                              |\n| read_len | uint32_t | Length of STArray                                                         |\n| array_id | uint32_t | The index of the entry within the STArray you are seeking. Starts from 0. |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name      | Type                   | Description                                                                     |\n| --------- | ---------------------- | ------------------------------------------------------------------------------- |\n| sto       | ByteArray \\| HexString | The STO object (binary encoded ledger data) from which to extract the subarray. |\n| array_id | number                 | The ID of the array to be extracted.                                            |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The location of the field within the specified buffer:\u003Cbr />- The high 32 bits are the offset location.\u003Cbr />- The low 32 bits are the length.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- Input buffer isn't large enough to possibly contain a valid STArray.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The searched for index isn't present in the supplied STArray.\u003Cbr />\u003Cbr />\u003Ccode>PARSE_ERROR\u003C/code>\u003Cbr />- The supplied STArray is malformed or not an STArray.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type               | Description                                                                                                                                                                                        |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| bigint / ErrorCode | \u003Cp>The location of the field within the specified buffer:\u003Cbr />- The high 32 bits are the offset location.\u003Cbr />- The low 32 bits are the length.\u003Cbr />\u003Cbr />or an error code if the extraction fails.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/serialization/sto_subarray.mdx","8e67d0beffb0c1bb","docs/hooks/functions/serialization/sto_subfield",{"id":1330,"data":1332,"body":1338,"filePath":1339,"digest":1340,"deferredRender":14},{"title":1333,"description":1334,"editUrl":14,"head":1335,"template":16,"sidebar":1336,"pagefind":14,"draft":18},"sto_subfield","Index into a xahaud serialized object and return the location and length of a subfield",[],{"hidden":18,"attrs":1337},{},"import { Tabs, TabItem, LinkButton, Aside } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Parse a STObject pointed to by `read_ptr`\n* Find the field specified by `field_id`\n* If the field is found, and:\n*\n  1. It is an array, then return the start and length of the array including the leadin/leadout bytes, or\n*\n  2. It is **not** an array, then return the start and length of the PAYLOAD of the field (excluding the leadin bytes).\n\n\u003CAside type=\"caution\" title=\"Field ID encoding\">\nThe `sto_` apis accept a `field_id` parameter encoded as follows: `(type \u003C\u003C 16U) + field`\nThus type 1 field 2 would be `0x10002U`.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Parse a STObject into `sto` variable\n* Find the field specified by `field_id`\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t sto_subfield (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint32_t field_id\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction sto_subfield(\n    sto: ByteArray | HexString,\n    field_id: number\n  ): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SUB_OFFSET(x) ((int32_t)(x >> 32))\n#define SUB_LENGTH(x) ((int32_t)(x & 0xFFFFFFFFULL))\nint64_t memos_lookup =\n    sto_subfield(txn_ptr, txn_len, sfMemos);\nif (memos_lookup \u003C 0)\n{\n    // sfMemos was not found in the STObject pointed at by memo_ptr\n}\nelse\n{\n    // sfMemos was found and its location is as follows:\n    uint8_t* memos_ptr = SUB_OFFSET(memos_lookup) + memos_ptr;\n    int64_t  memos_len = SUB_LENGTH(memos_lookup);\n}\n```\n\n\u003CAside type=\"tip\">\nhookmacro.h already contains the `SUB_OFFSET` and `SUB_LENGTH` macros.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst SUB_OFFSET = (x) => Number(x >> 32n)\nconst SUB_LENGTH = (x) => Number(x & 0xFFFFFFFFn)\nconst memos_lookup = sto_subfield(txn, sfMemos);\nif (typeof memos_lookup === 'number')\n{\n    // sfMemos was not found in the STObject pointed at by memo_ptr\n}\nelse\n{\n    // sfMemos was found and its location is as follows:\n    const memo_start = SUB_OFFSET(memos_lookup)\n    const memo_len = SUB_LENGTH(memos_lookup)\n    const memo = txn.slice(memo_start, memo_len)\n}\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name      | Type      | Description                                                                                                                                                                                                                                                                                                                                                                                                |\n| --------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| read_ptr | uint32_t | Pointer to the buffer containing the STObject                                                                                                                                                                                                                                                                                                                                                              |\n| read_len | uint32_t | Length of STObject                                                                                                                                                                                                                                                                                                                                                                                         |\n| field_id | uint32_t | \u003Cp>The \u003Ccode>sf\u003C/code> code of the field you are searching for.\u003Cbr />\u003Cbr />To compute this manually take the serialized \u003Ccode>type\u003C/code> and shift it into the 16 highest bits of uint32_t, then take the \u003Ccode>field\u003C/code> and place it in the 16 lowest bits.\u003Cbr />\u003Cbr />For example:\u003Cbr />\u003Ccode>sfEmitNonce\u003C/code> has \u003Ccode>type\u003C/code> 5 and \u003Ccode>field\u003C/code> 11 thus its value is \u003Ccode>0x050BU\u003C/code>\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name      | Type                   | Description                                                                     |\n| --------- | ---------------------- | ------------------------------------------------------------------------------- |\n| sto       | ByteArray or HexString | The STO object (binary encoded ledger data) from which to extract the subfield. |\n| field_id | number                 | The ID of the field to be extracted.                                            |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The location of the field within the specified buffer:\u003Cbr />- The high 32 bits are the offset location.\u003Cbr />- The low 32 bits are the length.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- Input buffer isn't large enough to possibly contain a valid STObject.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The searched for field isn't present in the supplied STObject.\u003Cbr />\u003Cbr />\u003Ccode>PARSE_ERROR\u003C/code>\u003Cbr />- The supplied STObject is malformed or not an STObject.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type               | Description                                                                                                                                                                                              |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| bigint / ErrorCode | \u003Cp>The location of the field within the specified buffer:\u003Cbr />- The high 32 bits are the offset location.\u003Cbr />- The low 32 bits are the length.\u003C/p>\u003Cp>\u003C/p>\u003Cp>or an error code if the extraction fails.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/serialization/sto_subfield.mdx","ae3785417201ca96","docs/hooks/functions/serialization/sto_to_json",{"id":1341,"data":1343,"body":1349,"filePath":1350,"digest":1351,"deferredRender":14},{"title":1344,"description":1345,"editUrl":14,"head":1346,"template":16,"sidebar":1347,"pagefind":14,"draft":18},"sto_to_json","Format an STO object (binary encoded ledger data) as JSON format.",[],{"hidden":18,"attrs":1348},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n*   Format an STO object (binary encoded ledger data) as JSON format.&#x20;\n\n    This function takes a serialized transaction `blob` and converts it into a human-readable JSON format.\n* Returns Decoded JSON representation of the STO object, or an error code if the conversion fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction sto_to_json(\n    blob: ByteArray | HexString\n  ): ErrorCode | Record\u003Cstring, any> | Transaction\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst jsonSto = sto_to_json(stoBlob)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type                   | Description                                             |\n| ---- | ---------------------- | ------------------------------------------------------- |\n| blob | ByteArray \\| HexString | The blob (e.g. serialized transaction) to be converted. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type                                             | Description                                                                              |\n| ------------------------------------------------ | ---------------------------------------------------------------------------------------- |\n| ErrorCode \\| Record\\\u003Cstring, any> \\| Transaction | Decoded JSON representation of the STO object, or an error code if the conversion fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/serialization/sto_to_json.mdx","27ec1d16d4d81463","docs/hooks/functions/serialization/sto_validate",{"id":1352,"data":1354,"body":1360,"filePath":1361,"digest":1362,"deferredRender":14},{"title":1355,"description":1356,"editUrl":14,"head":1357,"template":16,"sidebar":1358,"pagefind":14,"draft":18},"sto_validate","Validate an STObject",[],{"hidden":18,"attrs":1359},{},"import { Tabs, TabItem, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/serialized-objects\">Serialized Objects\u003C/LinkButton>\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Parse an STObject pointed to by `read_ptr`\n* Return 1 if the serialization is valid, 0 otherwise.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* The `blob` (e.g. serialized transaction) is provided to be validated.\n* Returns number 1 if the STObject is valid, 0 if it isn't, or an error code if validation fails.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t sto_validate (\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction sto_validate(blob: ByteArray | HexString): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t result = \n  sto_validate(tx_out, sizeof(tx_out));\n\nif (tx_len \u003C= 0)\n    rollback(\"Invalid STO.\", 12, 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst result = sto_validate(tx_out)\n\nif (result \u003C= 0)\n    rollback(\"Invalid STO.\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name      | Type      | Description                                 |\n| --------- | --------- | ------------------------------------------- |\n| read_ptr | uint32_t | The buffer to read the source STObject from |\n| read_len | uint32_t | The Length of the source object             |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Name | Type                   | Description                                             |\n| ---- | ---------------------- | ------------------------------------------------------- |\n| blob | ByteArray \\| HexString | The blob (e.g. serialized transaction) to be validated. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                       |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>\u003Ccode>1\u003C/code> if the STObject pointed to by \u003Ccode>read_ptr\u003C/code> is a valid STObject.\u003Cbr />\u003Ccode>0\u003C/code> if it isn't.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                                                                     |\n| ------------------- | ----------------------------------------------------------------------------------------------- |\n| ErrorCode \\| number | Returns number 1 if the STObject is valid, 0 if it isn't, or an error code if validation fails. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/serialization/sto_validate.mdx","27291edb59adf571","docs/hooks/functions/state/state_foreign",{"id":1363,"data":1365,"body":1371,"filePath":1372,"digest":1373,"deferredRender":14},{"title":1366,"description":1367,"editUrl":14,"head":1368,"template":16,"sidebar":1369,"pagefind":14,"draft":18},"state_foreign","Retrieve the data pointed to, on another account, by a Hook State key and write it to an output buffer",[],{"hidden":18,"attrs":1370},{},"import { Tabs, TabItem, Aside } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read a 20 byte Account ID from the `aread_ptr`\n* Read a 32 byte Hook State key from the `kread_ptr`\n* Write the data (value) at that key at that Account ID to the buffer pointed to by `write_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the Foreign Hook State value belonging to another account for the specified key.\n* Returns an error code or the Hook State value for the key.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t state_foreign (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t kread_ptr,\n    uint32_t kread_len,\n    uint32_t nread_ptr,\n    uint32_t nread_len,\n    uint32_t aread_ptr,\n    uint32_t aread_len  \n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction state_foreign(\n    key: ByteArray | HexString,\n    namespace: ByteArray | HexString | undefined | null,\n    accountid: ByteArray | HexString | undefined | null\n  ): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SBUF(str) (uint32_t)(str), sizeof(str)\nuint8_t ns[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\nint64_t lookup =\n    state_foreign(SBUF(blacklist_status), SBUF(otxn_accid), SBUF(ns), SBUF(blacklist_accid));\nif (lookup \u003C 0)\n     rollback(SBUF(\"Error: could not find key on foreign state.\"), 1);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst ns = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nconst blacklist_status =\n    state_foreign(otxn_accid, ns, blacklist_accid)\nif (typeof blacklist_status === 'number')\n     rollback(\"Error: could not find key on foreign state.\", 1);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                     |\n| ---------- | --------- | ------------------------------------------------------------------------------- |\n| write_ptr | uint32_t | A pointer to the buffer to write the data in the Hook State into.               |\n| write_len | uint32_t | The length of the write buffer.                                                 |\n| kread_ptr | uint32_t | Pointer to a buffer containing the Hook State key.                              |\n| kread_len | uint32_t | The length of the Hook State key. (Should be 32.)                               |\n| nread_ptr | uint32_t | A pointer to the buffer containing the 32 byte Namespace to lookup the state on |\n| nread_len | uint32_t | The length of the namespace buffer (Should be 32).                              |\n| aread_ptr | uint32_t | A pointer to a buffer containing the 20 byte Account ID to look up state on.    |\n| aread_len | uint32_t | The length of the Account buffer. (Should always be 20).                        |\n\n\u003CAside type=\"tip\">\nEnsure you check the return value. A state lookup can fail of a range of reasons and the buffer will then contain whatever it did before the call (typically all zeros).\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name      | Type                   | Description                                           |\n| --------- | ---------------------- | ----------------------------------------------------- |\n| key       | ByteArray or HexString | The key of the Hook State to retrieve the value from. |\n| namespace | ByteArray or HexString | The Hook namespace to look in.                        |\n| accountid | ByteArray or HexString | The owner of the state.                               |\n|           |                        |                                                       |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The number of bytes written to the write buffer.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the specified Hook State key doesn't have an associated value on the ledger at the time of the call.\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- the key specified by \u003Ccode>read_ptr\u003C/code> and \u003Ccode>read_len\u003C/code> was larger than 32 bytes.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- the output buffer was too small to store the Hook State data.\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ACCOUNT\u003C/code>\u003Cbr />- the account specified at \u003Ccode>aread_ptr\u003C/code> is invalid or does not exist.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                |\n| ---------------------- | ---------------------------------------------------------- |\n| ErrorCode or ByteArray | Returns an error code or the Hook State value for the key. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/state/state_foreign.mdx","e4b355fac55137b7","docs/hooks/functions/state/state_foreign_set",{"id":1374,"data":1376,"body":1382,"filePath":1383,"digest":1384,"deferredRender":14},{"title":1377,"description":1378,"editUrl":14,"head":1379,"template":16,"sidebar":1380,"pagefind":14,"draft":18},"state_foreign_set","Set the Hook State on another account for a given key, value and namespace",[],{"hidden":18,"attrs":1381},{},"import { Tabs, TabItem, Aside } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read a 32 byte Hook State key from the `kread_ptr`\n* Read an arbitrary amount of data from `read_ptr` (the value)\n* Read a 32 byte Namespace from the `nread_ptr`\n* Read a 20 byte Account ID from `aread_ptr`\n* Update the Hook State key on the specified account within the specified namespace with the value\n* But only if a [Grant](https://xrpl-hooks.readme.io/docs/grants) on that account allows this.\n* If the Hook Account is specified in `aread_ptr` then the behaviour is that of state_set but still allows specification of namespace through `nread_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Sets the Foreign Hook State with the specified value, key, namespace, and account ID.\n* This operation requires authorization and a Grant to allow this action.\n* Returns the number of bytes written to Hook State (the length of the data), negative on error.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t state_foreign_set (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint32_t kread_ptr,\n    uint32_t kread_len,\n    uint32_t nread_ptr,\n    uint32_t nread_len,\n    uint32_t aread_ptr,\n    uint32_t aread_len  \n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction state_foreign_set(\n    value: ByteArray | HexString | undefined | null,\n    key: ByteArray | HexString,\n    namespace: ByteArray | HexString | undefined | null,\n    accountid: ByteArray | HexString | undefined | null\n  ): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SBUF(str) (uint32_t)(str), sizeof(str)\nif (state_foreign_set(SBUF(vault), SBUF(vault_key), SBUF(namespace), SBUF(account)) \u003C 0)\n    rollback(SBUF(\"Error: could not set foreign state!\"), 1);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nif (state_foreign_set(vault, vault_key, namespace, account) \u003C 0)\n    rollback(\"Error: could not set foreign state!\", 1);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                                                                              |\n| ---------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| read_ptr  | uint32_t | \u003Cp>Pointer to the data (value) to write into Hook State.\u003Cbr />If this is \u003Ccode>0\u003C/code> (null) then delete the data at this key. \u003Cem>May be null.\u003C/em>\u003C/p> |\n| read_len  | uint32_t | \u003Cp>The length of the data.\u003Cbr />If this is \u003Ccode>0\u003C/code> (null) then delete the data at this key. \u003Cem>May be null.\u003C/em>\u003C/p>                               |\n| kread_ptr | uint32_t | A pointer to the Hook State key at which to store the value.                                                                                             |\n| kread_len | uint32_t | The length of the key. (Should always be 32.)                                                                                                            |\n| nread_ptr | uint32_t | A pointer to the namespace which the key belongs to.                                                                                                     |\n| nread_len | uint32_t | The length of the namespace. (Should always be 32.)                                                                                                      |\n| aread_ptr | uint32_t | A pointer to the Account ID whose state we are trying to modify.                                                                                         |\n| aread_len | uint32_t | The length of the Account ID. (Should always be 20.)                                                                                                     |\n\n\u003CAside type=\"caution\">\nXahau sets internally a maximum hook data size. At time of writing and for public testnet this is hard coded at 128 bytes, however in future it will be a validator-votable number.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name      | Type                   | Description                                     |\n| --------- | ---------------------- | ----------------------------------------------- |\n| value     | ByteArray or HexString | The value of data to persist.                   |\n| key       | ByteArray or HexString | The key of the Hook State to set the value for. |\n| namespace | ByteArray or HexString | The Hook namespace to look in.                  |\n| accountid | ByteArray or HexString | The owner of the state.                         |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The number of bytes written to Hook State (the length of the data.)\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- \u003Ccode>kread_len\u003C/code> was greater than 32, or\u003Cbr />- \u003Ccode>read_len\u003C/code> was greater than the maximum hook data size.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- \u003Ccode>kread_len\u003C/code> was 0.\u003Cbr />\u003Cbr />\u003Ccode>NOT_AUTHORIZED\u003C/code>\u003Cbr />- no appropriate HookGrant was present on the foreign account to allow this state mutation.\u003Cbr />\u003Cbr />\u003Ccode>PREVIOUS_FAILURE_PREVENTS_RETRY\u003C/code>\u003Cbr />- during this execution a previous \u003Ccode>state_foreign_set\u003C/code> failed with NOT_AUTHORIZED, and consequently no further calls to this API are allowed during this execution.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                                                                    |\n| ------------------- | ---------------------------------------------------------------------------------------------- |\n| number or ErrorCode | Returns the number of bytes written to Hook State (the length of the data), negative on error. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/state/state_foreign_set.mdx","33399ee20ccd08b1","docs/hooks/functions/state/state",{"id":1385,"data":1387,"body":1393,"filePath":1394,"digest":1395,"deferredRender":14},{"title":1388,"description":1389,"editUrl":14,"head":1390,"template":16,"sidebar":1391,"pagefind":14,"draft":18},"state","Retrieve the data pointed to by a Hook State key and write it to an output buffer",[],{"hidden":18,"attrs":1392},{},"import { Tabs, TabItem, Aside } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read a 32 byte Hook State key from the `kread_ptr`\n* Write the data (value) at that key to the buffer pointed to by `write_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the Hook State value associated with the specified key.\n* Returns an error code or the Hook State value for the key.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t state (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t kread_ptr,\n    uint32_t kread_len  \n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction state(key: ByteArray | HexString): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SBUF(str) (uint32_t)(str), sizeof(str)\nif (state(SBUF(vault), SBUF(vault_key)) != 16)\n    rollback(SBUF(\"Error: could not read state!\"), 1);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst value = state(SBUF(vault), SBUF(vault_key))\nif (typeof value === 'number' || value.length != 16)\n    rollback(\"Error: could not read state!\", 1);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                       |\n| ---------- | --------- | ----------------------------------------------------------------- |\n| write_ptr | uint32_t | A pointer to the buffer to write the data in the Hook State into. |\n| write_len | uint32_t | The length of the write buffer.                                   |\n| kread_ptr | uint32_t | Pointer to a buffer containing the Hook State key.                |\n| kread_len | uint32_t | The length of the Hook State key. (Should be 32.)                 |\n\n\u003CAside type=\"tip\">\nEnsure you check the return value. A state lookup can fail of a range of reasons and the buffer will then contain whatever it did before the call (typically all zeros).\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name | Type                   | Description                                           |\n| ---- | ---------------------- | ----------------------------------------------------- |\n| key  | ByteArray or HexString | The key of the Hook State to retrieve the value from. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The number of bytes written to the write buffer.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the specified Hook State key doesn't have an associated value on the ledger at the time of the call.\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- the key specified by \u003Ccode>read_ptr\u003C/code> and \u003Ccode>read_len\u003C/code> was larger than 32 bytes.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- the output buffer was too small to store the Hook State data.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                                                |\n| ---------------------- | ---------------------------------------------------------- |\n| ByteArray or ErrorCode | Returns an error code or the Hook State value for the key. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/state/state.mdx","eae7a41635bd3241","docs/hooks/functions/state/state_set",{"id":1396,"data":1398,"body":1404,"filePath":1405,"digest":1406,"deferredRender":14},{"title":1399,"description":1400,"editUrl":14,"head":1401,"template":16,"sidebar":1402,"pagefind":14,"draft":18},"state_set","Set the Hook State for a given key and value",[],{"hidden":18,"attrs":1403},{},"import { Tabs, TabItem, Aside } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read a 32 byte Hook State key from the `kread_ptr`\n* Read an arbitrary amount of data from `read_ptr` (the value)\n* Update the Hook State key with the value\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Sets the Hook State with the specified value and key.\n* Returns the number of bytes written to Hook State (the length of the data), negative on error.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t state_set (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint32_t kread_ptr,\n    uint32_t kread_len  \n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction state_set(\n    value: ByteArray | HexString | undefined | null,\n    key: ByteArray | HexString\n  ): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SBUF(str) (uint32_t)(str), sizeof(str)\nif (state_set(SBUF(vault), SBUF(vault_key)) \u003C 0)\n\t\trollback(SBUF(\"Error: could not set state!\"), 1);\n```\n\n\u003CAside type=\"tip\">\nTo delete the state use `state_set(0, 0, SBUF(key);`.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst result = state_set(vault, vault_key)\nif (result \u003C 0)\n    rollback(\"Error: could not set state!\", 1);\n```\n\n\u003CAside type=\"tip\">\nTo delete the state use `state_set(null, key);`.\n\u003C/Aside>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                                                                              |\n| ---------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| read_ptr  | uint32_t | \u003Cp>Pointer to the data (value) to write into Hook State.\u003Cbr />If this is \u003Ccode>0\u003C/code> (null) then delete the data at this key. \u003Cem>May be null.\u003C/em>\u003C/p> |\n| read_len  | uint32_t | \u003Cp>The length of the data.\u003Cbr />If this is \u003Ccode>0\u003C/code> (null) then delete the data at this key. \u003Cem>May be null.\u003C/em>\u003C/p>                               |\n| kread_ptr | uint32_t | A pointer to the Hook State key at which to store the value.                                                                                             |\n| kread_len | uint32_t | The length of the key. (Should always be 32.)                                                                                                            |\n\n\u003CAside type=\"caution\">\nXahaud sets internally a maximum hook data size. At time of writing and for mainnet this is hard coded at 256 bytes, however in future it will be a validator-votable number.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name  | Type                   | Description                                     |\n| ----- | ---------------------- | ----------------------------------------------- |\n| value | ByteArray or HexString | The value of data to persist.                   |\n| key   | ByteArray or HexString | The key of the Hook State to set the value for. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                             |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written to Hook State (the length of the data.)\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- \u003Ccode>kread_len\u003C/code> was greater than 32, or\u003Cbr />- \u003Ccode>read_len\u003C/code> was greater than the maximum hook data size.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- \u003Ccode>kread_len\u003C/code> was 0.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                                                                    |\n| ------------------- | ---------------------------------------------------------------------------------------------- |\n| number or ErrorCode | Returns the number of bytes written to Hook State (the length of the data), negative on error. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/state/state_set.mdx","fcc27b06330ceccb","docs/hooks/functions/slot/slot",{"id":1407,"data":1409,"body":1415,"filePath":1416,"digest":1417,"deferredRender":14},{"title":1410,"description":1411,"editUrl":14,"head":1412,"template":16,"sidebar":1413,"pagefind":14,"draft":18},"slot","Serialize and output a slotted object",[],{"hidden":18,"attrs":1414},{},"import { Tabs, TabItem, Aside } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Serialize the object currently occupying the specified slot\n* Write the serialized version of the object to the output buffer\n\n\u003CAside type=\"tip\" title=\"Alternative use\">\nFor small objects you may avoid using a buffer. Specify `0, 0` for `write_ptr, write_len` to attempt to return the slotted object as big endian packed data in the `int64_t` return code. Up to 63 bits of data may be returned this way.\n\u003C/Aside>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the JSON Retrieves the data associated with the specified slot. of the specified slot.\n* Returns an error code or the slot's data.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t slot_no\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot(slotno: number): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t txn[512];\nint64_t bytes_written = \n    slot(txn, 512, 1); // assumes a transaction is slotted into slot=1\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst txn = slot(1) // assumes a transaction is slotted into slot=1\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                 |\n| ---------- | --------- | ----------------------------------------------------------- |\n| write_ptr | uint32_t | Pointer to a buffer of a suitable size to store the output. |\n| write_len | uint32_t | Length of the output buffer.                                |\n| slot_no   | uint32_t | The slot number                                             |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type   | Description     |\n| ------ | ------ | --------------- |\n| slotno | number | The slot number |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- output buffer was not large enough to hold the serialized object\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                   | Description                               |\n| ---------------------- | ----------------------------------------- |\n| ErrorCode \\| ByteArray | Returns an error code or the slot's data. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot.mdx","1b5836c30eadc072","docs/hooks/functions/slot/slot_clear",{"id":1418,"data":1420,"body":1426,"filePath":1427,"digest":1428,"deferredRender":14},{"title":1421,"description":1422,"editUrl":14,"head":1423,"template":16,"sidebar":1424,"pagefind":14,"draft":18},"slot_clear","Free up a currently occupied slot",[],{"hidden":18,"attrs":1425},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Free the specified slot, releasing any object that was slotted there\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_clear (\n    uint32_t slot_no\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot_clear(slotno: number): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nslot_clear(1); // assumes a transaction is slotted into slot=1\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nslot_clear(1) // assumes a transaction is slotted into slot=1\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type      | Description     |\n| -------- | --------- | --------------- |\n| slot_no | uint32_t | The slot number |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type   | Description     |\n| ------ | ------ | --------------- |\n| slotno | number | The slot number |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                               |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>\u003Ccode>1\u003C/code> or an error\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the specified slot does not contain any object or it is an invalid slot\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                                 |\n| ------------------- | ----------------------------------------------------------- |\n| ErrorCode \\| number | Returns an error code or the result of the clear operation. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot_clear.mdx","f579b1d598e90dad","docs/hooks/functions/slot/slot_count",{"id":1429,"data":1431,"body":1437,"filePath":1438,"digest":1439,"deferredRender":14},{"title":1432,"description":1433,"editUrl":14,"head":1434,"template":16,"sidebar":1435,"pagefind":14,"draft":18},"slot_count","Count the elements of an array object in a slot",[],{"hidden":18,"attrs":1436},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Count the elements of an array in the specified slot\n* Return the count\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_count (\n    uint32_t slot_no\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot_count(slotno: number): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nslot_count(1); // assumes an array is slotted into slot=1\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nslot_count(1) // assumes an array is slotted into slot=1\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type      | Description     |\n| -------- | --------- | --------------- |\n| slot_no | uint32_t | The slot number |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type   | Description     |\n| ------ | ------ | --------------- |\n| slotno | number | The slot number |\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                              |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of elements inside the slotted array\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the specified slot does not contain any object or it is an invalid slot\u003Cbr />\u003Cbr />\u003Ccode>NOT_AN_ARRAY\u003C/code>\u003Cbr />- the specified slot does not contain an array object\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                    |\n| ------------------- | ---------------------------------------------- |\n| ErrorCode or number | Returns an error code or the count of entries. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot_count.mdx","668c4015c8e9b728","docs/hooks/functions/slot/slot_float",{"id":1440,"data":1442,"body":1448,"filePath":1449,"digest":1450,"deferredRender":14},{"title":1443,"description":1444,"editUrl":14,"head":1445,"template":16,"sidebar":1446,"pagefind":14,"draft":18},"slot_float","Parse the STI_AMOUNT in the specified slot and return it as an XFL enclosed number",[],{"hidden":18,"attrs":1447},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Parse the STI_AMOUNT in the specified slot and return it as an XFL enclosed number\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the bigint value associated with the specified slot.\n* Returns an error code or the bigint value.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_float (\n    uint32_t slot_no\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot_float(slotno: number): ErrorCode | bigint\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t xfl =\n  \tslot_float(amt_slot);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst xfl = slot_float(amt_slot)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type      | Description     |\n| -------- | --------- | --------------- |\n| slot_no | uint32_t | The slot number |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type   | Description                                        |\n| ------ | ------ | -------------------------------------------------- |\n| slotno | number | The slot number to retrieve the bigint value from. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                          |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| int64_t | \u003Cp>The XFL enclosing number\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the specified slot does not contain any object or it is an invalid slot\u003Cbr />\u003Cbr />\u003Ccode>NOT_AN_AMOUNT\u003C/code>\u003Cbr />- the specified slot does not contain an \u003Ccode>STI_AMOUNT\u003C/code> object\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                |\n| ------------------- | ------------------------------------------ |\n| bigint or ErrorCode | Returns an error code or the bigint value. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot_float.mdx","cc89fcc0b1f258d9","docs/hooks/functions/slot/slot_set",{"id":1451,"data":1453,"body":1459,"filePath":1460,"digest":1461,"deferredRender":14},{"title":1454,"description":1455,"editUrl":14,"head":1456,"template":16,"sidebar":1457,"pagefind":14,"draft":18},"slot_set","Locate an object based on its keylet and place it into a slot",[],{"hidden":18,"attrs":1458},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Locate an object given the Keylet provided in `read_ptr`\n* Emplace the located object into the slot specified or into a new slot if no slot (zero) is specified\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Sets the data for the specified slot.\n* Returns an error code or the result of the set operation.\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_set (\n    uint32_t read_ptr,\n    uint32_t read_len,\n    uint32_t slot_no\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot_set(\n    kl: ByteArray | HexString,\n    slotno: number\n  ): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_no = \n  slot_set(keylet, 34, 0);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst slot_no = slot_set(keylet, 0)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name      | Type      | Description                                                                                     |\n| --------- | --------- | ----------------------------------------------------------------------------------------------- |\n| read_ptr | uint32_t | Pointer to a buffer containing the keylet of the object to locate. This can also be a txn hash. |\n| read_len | uint32_t | Length of the read buffer. Should always be 32 or 34.                                           |\n| slot_no  | uint32_t | The slot number to emplace into, or 0 if you wish to pick the next available.                   |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type                   | Description                                               |\n| ------ | ---------------------- | --------------------------------------------------------- |\n| kl     | ByteArray \\| HexString | The data to set in the slot, can be an array or a string. |\n| slotno | number                 | The slot number to set data for.                          |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The slot number the object was inserted into\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- \u003Ccode>read_len\u003C/code> must be either 32 or 34 bytes depending on whether a txn hash or a keylet is being used in \u003Ccode>read_ptr\u003C/code>\u003Cbr />- the hash or keylet was invalid\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the requested object was not found\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                               |\n| ------------------- | --------------------------------------------------------- |\n| ErrorCode or number | Returns an error code or the result of the set operation. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot_set.mdx","5e50c036a1d82db5","docs/hooks/functions/slot/slot_size",{"id":1462,"data":1464,"body":1470,"filePath":1471,"digest":1472,"deferredRender":14},{"title":1465,"description":1466,"editUrl":14,"head":1467,"template":16,"sidebar":1468,"pagefind":14,"draft":18},"slot_size","Compute the serialized size of an object in a slot",[],{"hidden":18,"attrs":1469},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Return the number of bytes the object in the specified slot occupies when serialized\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the size of the specified slot.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_size (\n    uint32_t slot_no\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot_size(slotno: number): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t bytes_needed = slot_size(1); // get size of slot 1\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst bytes_needed = slot_size(1); // get size of slot 1\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type      | Description     |\n| -------- | --------- | --------------- |\n| slot_no | uint32_t | The slot number |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type   | Description                           |\n| ------ | ------ | ------------------------------------- |\n| slotno | number | The slot number to check the size of. |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                            |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| int64_t | \u003Cp>The number of bytes the object occupies when serialized\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the specified slot does not contain any object or it is an invalid slot\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                    |\n| ------------------- | ---------------------------------------------- |\n| ErrorCode \\| number | Returns an error code or the size of the slot. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot_size.mdx","1f0fbe8cf62d46bd","docs/hooks/functions/slot/slot_subarray",{"id":1473,"data":1475,"body":1481,"filePath":1482,"digest":1483,"deferredRender":14},{"title":1476,"description":1477,"editUrl":14,"head":1478,"template":16,"sidebar":1479,"pagefind":14,"draft":18},"slot_subarray","Index into a slotted array and assign a sub-object to another slot",[],{"hidden":18,"attrs":1480},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Look up the array in slot `parent_slot`\n* Retrieve the sub-object at the index specified in `array_id`\n* Place sub-object into the slot `new_slot` or the next available slot if `new_slot` is 0.\n* Return the new slot number.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Creates a subarray in the specified parent slot.\n* Returns an error code or the result of the subarray creation.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_subarray (\n    uint32_t parent_slot,\n    uint32_t array_id,\n    uint32_t new_slot\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot_subarray(\n    parent_slotno: number,\n    array_id: number,\n    new_slotno: number\n  ): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t subslot = 0;\nsubslot =\n    slot_subarray(slot_no, i, (uint32_t)subslot);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nlet subslot = 0\nsubslot = slot_subarray(slot_no, i, subslot)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name         | Type      | Description                                                                                                                                                                                                                                                                                                                                                                                                |\n| ------------ | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| parent_slot | uint32_t | Slot the parent array is in                                                                                                                                                                                                                                                                                                                                                                                |\n| array_id    | uint32_t | \u003Cp>The \u003Ccode>sf\u003C/code> code of the field you are searching for.\u003Cbr />\u003Cbr />To compute this manually take the serialized \u003Ccode>type\u003C/code> and shift it into the 16 highest bits of uint32_t, then take the \u003Ccode>field\u003C/code> and place it in the 16 lowest bits.\u003Cbr />\u003Cbr />For example:\u003Cbr />\u003Ccode>sfEmitNonce\u003C/code> has \u003Ccode>type\u003C/code> 5 and \u003Ccode>field\u003C/code> 11 thus its value is \u003Ccode>0x050BU\u003C/code>\u003C/p> |\n| new_slot    | uint32_t | New slot number to place the object from the selected array index into. If null, choose the next available slot. _May be null._                                                                                                                                                                                                                                                                            |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name           | Type   | Description                                   |\n| -------------- | ------ | --------------------------------------------- |\n| parent_slotno | number | The parent slot number.                       |\n| array_id      | number | The ID of the array to create a subarray for. |\n| new_slotno    | number | The new slot number for the subarray.         |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The slot number of the newly allocated object\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The specified \u003Ccode>array_id\u003C/code> doesn't exist in the array pointed to by \u003Ccode>parent_slot\u003C/code>\u003Cbr />\u003Cbr />\u003Ccode>NO_FREE_SLOTS\u003C/code>\u003Cbr />- The API would require a new slot to be allocated but the Hook is already at the maximum number of slots.\u003Cbr />\u003Cbr />\u003Ccode>NOT_AN_ARRAY\u003C/code>\u003Cbr />- The specified \u003Ccode>parent_slot\u003C/code> does not contain an STArray.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type   | Description                                                   |\n| ------ | ------------------------------------------------------------- |\n| number | Returns an error code or the result of the subarray creation. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot_subarray.mdx","d3605fcbd01d7053","docs/hooks/functions/slot/slot_subfield",{"id":1484,"data":1486,"body":1492,"filePath":1493,"digest":1494,"deferredRender":14},{"title":1487,"description":1488,"editUrl":14,"head":1489,"template":16,"sidebar":1490,"pagefind":14,"draft":18},"slot_subfield","Index into a slotted object and assign a sub-object to another slot",[],{"hidden":18,"attrs":1491},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Look up the object in slot `parent_slot`\n* Retrieve the sub-object at `field_id`\n* Place sub-object into the slot `new_slot` or the next available slot if `new_slot` is 0.\n* Return the new slot number.\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Creates a subfield in the specified parent slot.\n* Returns an error code or the result of the subfield creation.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_subfield (\n    uint32_t parent_slot,\n    uint32_t field_id,\n    uint32_t new_slot\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot_subfield(\n    parent_slotno: number,\n    field_id: number,\n    new_slotno: number\n  ): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t amt_slot = \n  \tslot_subfield(oslot, sfAmount, 0);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst amt_slot = slot_subfield(oslot, sfAmount, 0)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name         | Type      | Description                                                                                                                                                                                                                                                                                                                                                                                                |\n| ------------ | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| parent_slot | uint32_t | Slot the parent object is in                                                                                                                                                                                                                                                                                                                                                                               |\n| field_id    | uint32_t | \u003Cp>The \u003Ccode>sf\u003C/code> code of the field you are searching for.\u003Cbr />\u003Cbr />To compute this manually take the serialized \u003Ccode>type\u003C/code> and shift it into the 16 highest bits of uint32_t, then take the \u003Ccode>field\u003C/code> and place it in the 16 lowest bits.\u003Cbr />\u003Cbr />For example:\u003Cbr />\u003Ccode>sfEmitNonce\u003C/code> has \u003Ccode>type\u003C/code> 5 and \u003Ccode>field\u003C/code> 11 thus its value is \u003Ccode>0x050BU\u003C/code>\u003C/p> |\n| new_slot    | uint32_t | New slot number to place the object from the selected field into. If null, choose the next available slot. _May be null._                                                                                                                                                                                                                                                                                  |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name           | Type   | Description                                   |\n| -------------- | ------ | --------------------------------------------- |\n| parent_slotno | number | The parent slot number.                       |\n| field_id      | number | The ID of the field to create a subfield for. |\n| new_slotno    | number | The new slot number for the subfield.         |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The slot number of the newly allocated object\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- The searched for field isn't present in the parent slot or the parent slot is unfilled.\u003Cbr />\u003Cbr />\u003Ccode>NO_FREE_SLOTS\u003C/code>\u003Cbr />- The API would require a new slot to be allocated but the Hook is already at the maximum number of slots.\u003Cbr />\u003Cbr />\u003Ccode>INVALID_FIELD\u003C/code>\u003Cbr />- The specified field is not a valid \u003Ccode>sf\u003C/code> field.\u003Cbr />\u003Cbr />\u003Ccode>NOT_AN_OBJECT\u003C/code>\u003Cbr />- The slotted object is not a valid STObject.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                                   |\n| ------------------- | ------------------------------------------------------------- |\n| number or ErrorCode | Returns an error code or the result of the subfield creation. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot_subfield.mdx","55de629fb368695b","docs/hooks/functions/slot/xpop_slot",{"id":1495,"data":1497,"body":1503,"filePath":1504,"digest":1505,"deferredRender":14},{"title":1498,"description":1499,"editUrl":14,"head":1500,"template":16,"sidebar":1501,"pagefind":14,"draft":18},"xpop_slot","Serialize and output the xpop transaction blob and metadata",[],{"hidden":18,"attrs":1502},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Locate the xpop blob on the `Import` transaction\n* Emplace the located tx and meta objects into the slots specified\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t xpop_slot (\n    uint32_t slot_no_tx,\n    uint32_t slot_no_meta\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction xpop_slot(slotno_tx: number, slotno_meta: number): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t bytes_written = \n    xpop_slot(1, 2); // assumes a txn is slotted into slot=1 meta is slotted into slot=2\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst bytes_written = xpop_slot(1, 2)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name           | Type      | Description                                    |\n| -------------- | --------- | ---------------------------------------------- |\n| slot_no_tx   | uint32_t | The slot number to emplace the tx blob into.   |\n| slot_no_meta | uin32_t  | The slot number to emplace the meta blob into. |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name         | Type   | Description                         |\n| ------------ | ------ | ----------------------------------- |\n| slotno_tx   | number | The transaction slot number to pop. |\n| slotno_meta | number | The metadata slot number to pop.    |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>\u003Ccode>PREREQUISITE_NOT_MET\u003C/code>\u003Cbr />\u003Cbr />- The originating tx type was not \u003Ccode>Import\u003C/code>.\u003Cbr />\u003Cbr />\u003Ccode>NO_FREE_SLOTS\u003C/code>\u003Cbr />\u003Cbr />- The API would require a new slot to be allocated but the Hook is already at the maximum number of slots.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                               |\n| ------------------- | --------------------------------------------------------- |\n| number or ErrorCode | Returns an error code or the result of the pop operation. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/xpop_slot.mdx","0c6ca271cccd7c0d","docs/hooks/functions/slot/slot_type",{"id":1506,"data":1508,"body":1514,"filePath":1515,"digest":1516,"deferredRender":14},{"title":1509,"description":1510,"editUrl":14,"head":1511,"template":16,"sidebar":1512,"pagefind":14,"draft":18},"slot_type","Retrieve the field code of an object in a slot and, optionally, some other information",[],{"hidden":18,"attrs":1513},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Locate the object pointed to by the specified `slot_no`\n* Determine its `sf` field code and return this, or some other information (see below) if `flags` are used\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Retrieves the type of the specified slot.\n* Returns an error code or the type of the slot.\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t slot_type (\n    uint32_t slot_no,\n    uint32_t flags\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction slot_type(slotno: number, flags: number): ErrorCode | number\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t fidle_code = \n    slot_type(1, 0);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst field_code = slot_type(1, 0)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name     | Type      | Description                                                                                                                                                                                                          |\n| -------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| slot_no | uint32_t | The slot number                                                                                                                                                                                                      |\n| flags    | uin32_t  | \u003Cp>For normal operation this should be \u003Ccode>0\u003C/code>.\u003Cbr />\u003Cbr />To determine whether or not an \u003Ccode>STI_AMOUNT\u003C/code> type contains a native (XAH) amount or a floating point (IOU) amount set to \u003Ccode>1\u003C/code>.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name   | Type   | Description                           |\n| ------ | ------ | ------------------------------------- |\n| slotno | number | The slot number to check the type of. |\n| flags  | number | Flags to determine the type.          |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>If \u003Ccode>flags\u003C/code> is \u003Ccode>0\u003C/code> then:\u003Cbr />The \u003Ccode>sf\u003C/code> field code of the slotted object\u003Cbr />\u003Cbr />If \u003Ccode>flags\u003C/code> is \u003Ccode>1\u003C/code> then:\u003Cbr />\u003Ccode>1\u003C/code> if and only if the slotted object is an \u003Ccode>STI_AMOUNT\u003C/code> and the type of the amount is XAH.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>DOESNT_EXIST\u003C/code>\u003Cbr />- the specified \u003Ccode>slot_no\u003C/code> does not contain an object.\u003Cbr />\u003Cbr />\u003Ccode>NOT_AN_AMOUNT\u003C/code>\u003Cbr />- \u003Ccode>flags\u003C/code> was set to \u003Ccode>1\u003C/code> but the slotted object is not an \u003Ccode>STI_AMOUNT\u003C/code> object\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type                | Description                                    |\n| ------------------- | ---------------------------------------------- |\n| ErrorCode or number | Returns an error code or the type of the slot. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/slot/slot_type.mdx","3f44877611262b52","docs/hooks/functions/trace-debug/trace",{"id":1517,"data":1519,"body":1525,"filePath":1526,"digest":1527,"deferredRender":14},{"title":1520,"description":1521,"editUrl":14,"head":1522,"template":16,"sidebar":1523,"pagefind":14,"draft":18},"trace","Write the contents of a buffer to the Xahaud trace log",[],{"hidden":18,"attrs":1524},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Write a buffer from inside the Hook to the trace log along with a message (if any)\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t trace (\n    uint32_t mread_ptr,\n    uint32_t mread_len,\n    uint32_t dread_ptr,\n    uint32_t dread_len,\n    uint32_t as_hex\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction trace(\n    message: string | null,\n    data: any,\n    hex: boolean | 0 | 1\n  ): ErrorCode\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SBUF(str) (uint32_t)(str), sizeof(str)\ntrace(SBUF(\"Buffer conatained\"), SBUF(some_buffer), 1);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\ntrace(\"Buffer conatained\", some_buffer, 1);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                         |\n| ---------- | --------- | --------------------------------------------------------------------------------------------------- |\n| mread_ptr | uint32_t | Pointer to a message to output before the buffer. _May be null._                                    |\n| mread_len | uint32_t | Length of the message. _May be null._                                                               |\n| dread_ptr | uint32_t | Pointer to the buffer to output.                                                                    |\n| dread_len | uint32_t | Length of the buffer to output.                                                                     |\n| as_hex    | uint32_t | \u003Cp>If \u003Ccode>1\u003C/code> output the buffer as hex.\u003Cbr />If \u003Ccode>0\u003C/code> output the buffer as utf-8.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Name    | Type    | Description                                                          |\n| ------- | ------- | -------------------------------------------------------------------- |\n| message | string  | The 'logging key', message to output before the buffer (can be null) |\n| data    | any     | The data to log                                                      |\n| hex     | boolean | \u003Cp>Should it log formatted in HEX?\u003Cbr />\u003Cbr />0 - NO\u003Cbr />1 - YES\u003C/p>      |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                             |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>\u003Ccode>0\u003C/code> if successful\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type      | Description                                                                                 |\n| --------- | ------------------------------------------------------------------------------------------- |\n| ErrorCode | \u003Cp>int64_t, value is 0 if successful\u003C/p>\u003Cp>\u003C/p>\u003Cp> If negative, an error: OUT_OF_BOUNDS\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/trace-debug/trace.mdx","1b866977da62d70a","docs/hooks/functions/utilities/util_accid",{"id":1528,"data":1530,"body":1536,"filePath":1537,"digest":1538,"deferredRender":14},{"title":1531,"description":1532,"editUrl":14,"head":1533,"template":16,"sidebar":1534,"pagefind":14,"draft":18},"util_accid","Convert an r-address into a 20 byte Account ID",[],{"hidden":18,"attrs":1535},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read an r-address from the `read_ptr`\n* Write a 20 byte Account ID to the `write_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n* Read an r-address from the `raddress`\n* Returns a 20 byte Account ID or an ErrorCode\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t util_accid (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction util_accid(raddress: string): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t accid_out[20];\nuint8_t raddr_in[] = \"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh\";\n\nint64_t bytes_written = \n    util_accid(accid_out, 20, raddr_in, sizeof(raddr_in)-1);\n// NB: if specified as a c-string as above, account for the nul char\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst accId = util_accid('rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh')\n```\n\n\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"102\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>write_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to a buffer of a suitable size to store the output Account ID. Must be at least 20 bytes.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>write_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Length of the output buffer.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to the r-address.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>The length of the r-address.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"102\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>raddress\u003C/td>\u003Ctd>string\u003C/td>\u003Ctd>The r-address to format as HEX account ID.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description|\n| -------- ||\n| int64_t | \u003Cp>The number of bytes written (the length of the output r-address).\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- \u003Ccode>read_ptr\u003C/code> pointed at something which wasn't a valid r-address.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- \u003Ccode>write_len\u003C/code> was not large enough to store produced Account ID. (Should be 20 bytes).\u003Cbr />\u003Cbr />\u003Ccode>TOO_BIG\u003C/code>\u003Cbr />- \u003Ccode>read_len\u003C/code> was longer than an r-address can be.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type            | Description                                                                                      |\n| --------------- | ------------------------------------------------------------------------------------------------ |\n| string / number | If there is an error in formatting, otherwise returns the HEX Account ID as an array of numbers. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/utilities/util_accid.mdx","0cc77642b2f2b291","docs/hooks/functions/trace-debug/trace_float",{"id":1539,"data":1541,"body":1547,"filePath":1548,"digest":1549,"deferredRender":14},{"title":1542,"description":1543,"editUrl":14,"head":1544,"template":16,"sidebar":1545,"pagefind":14,"draft":18},"trace_float","Write a XFL float to the Xahaud trace log",[],{"hidden":18,"attrs":1546},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Write a XFL floating point to the trace log along with a message (if any)\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t trace_float (\n    uint32_t mread_ptr,\n    uint32_t mread_len,\n    int64_t float1 \n);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SBUF(str) (uint32_t)(str), sizeof(str)\ntrace_float(SBUF(\"This is a float\"), float_one());\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                               |\n| ---------- | --------- | --------------------------------------------------------------------------------------------------------- |\n| rmead_ptr | uint32_t | Pointer to a message to output before the hex-encoded serialized object found in the slot. _May be null._ |\n| mread_len | uint32_t | Length of the message. _May be null._                                                                     |\n| float1     | int64_t  | The enclosing XFL integer.                                                                                |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                             |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>\u003Ccode>0\u003C/code> if successful\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/trace-debug/trace_float.mdx","6b2761e6a855b6e9","docs/hooks/functions/trace-debug/trace_num",{"id":1550,"data":1552,"body":1558,"filePath":1559,"digest":1560,"deferredRender":14},{"title":1553,"description":1554,"editUrl":14,"head":1555,"template":16,"sidebar":1556,"pagefind":14,"draft":18},"trace_num","Write an integer to the Xahaud trace log",[],{"hidden":18,"attrs":1557},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n* Write an integer to the trace log along with a message (if any)\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t trace_num (\n    uint32_t mread_ptr,\n    uint32_t mread_len,\n    int64_t number \n);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\n#define SBUF(str) (uint32_t)(str), sizeof(str)\ntrace_num(SBUF(\"This is an integer\"), 10);\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Name       | Type      | Description                                                                                               |\n| ---------- | --------- | --------------------------------------------------------------------------------------------------------- |\n| rmead_ptr | uint32_t | Pointer to a message to output before the hex-encoded serialized object found in the slot. _May be null._ |\n| mread_len | uint32_t | Length of the message. _May be null._                                                                     |\n| number     | int64_t  | The number.                                                                                               |\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                             |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>\u003Ccode>0\u003C/code> if successful\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/p> |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/trace-debug/trace_num.mdx","c82d815cb75f76c2","docs/hooks/functions/utilities/util_keylet",{"id":1561,"data":1563,"body":1569,"filePath":1570,"digest":1571,"deferredRender":14},{"title":1564,"description":1565,"editUrl":14,"head":1566,"template":16,"sidebar":1567,"pagefind":14,"draft":18},"util_keylet","Compute a serialized keylet of a given type",[],{"hidden":18,"attrs":1568},{},"import { Tabs, TabItem, Aside, LinkButton } from '@astrojs/starlight/components';\n\n### Concepts\n\n\u003CLinkButton href=\"/docs/hooks/concepts/slots-and-keylets\">Slots and Keylets\u003C/LinkButton>\n\n\u003CAside type=\"tip\">\nNot every Keylet type is supported by this utility function. If you need another Keylet type you can derive it yourself using [util_sha512h](https://xrpl-hooks.readme.io/reference/util_sha512h) and by checking the required fields [here](https://github.com/Xahau/xahaud/blob/dev/src/ripple/protocol/impl/Indexes.cpp). A further Keylet tool may [assist you.](https://richardah.github.io/xrpl-keylet-tools/)\n\u003C/Aside>\n\n### Behaviour\n\n* Compute a keylet of the specified `keylet_type` according to the parameters `a` through `f` depending on type.\n* Write the serialized 34 byte keylet into `write_ptr`\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t util_keylet (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t keylet_type,\n    uint32_t a,\n    uint32_t b,\n    uint32_t c,\n    uint32_t d,\n    uint32_t e,\n    uint32_t f\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction util_keylet(\n    keylet_type: number,\n    accountid: ByteArray | HexString,\n    statekey: ByteArray | HexString,\n    namespace: ByteArray | HexString\n  ): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t keylet[34];\nif (util_keylet(keylet, 34, KEYLET_LINE,\n              hook_accid, 20,\n              account_field, 20,\n              currency_code, 20) != 34)\n\trollback(\"Keylet Failed.\", 14, 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nif (util_keylet(\n        KEYLET_LINE, hook_accid, account_field, currency_code\n        ).length \u003C 34) \n    rollback(\"Keylet Failed.\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"155\">Name\u003C/th>\u003Cth>Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>write_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to a buffer the serialized keylet will be written to\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>write_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Length of output buffer, should be at least 34.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>keylet_type\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>One of the keylet types as defined in \u003Ccode>hookapi.h\u003C/code> e.g. \u003Ccode>KEYLET_LINE\u003C/code> for a trustline.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>a\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>See keylet table below\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>b\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>See keylet table below\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>c\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>See keylet table below\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>d\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>See keylet table below\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>e\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>See keylet table below\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>f\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>See keylet table below\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"155\">Name\u003C/th>\u003Cth>Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>keylet_type\u003C/td>\u003Ctd>\u003C/td>\u003Ctd>The type of the keylet to create\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>accountid\u003C/td>\u003Ctd>\u003C/td>\u003Ctd>(Optional) First piece of data for the keylet, can be an array of numbers, a string, or a number.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>statekey\u003C/td>\u003Ctd>\u003C/td>\u003Ctd>(Optional) Second piece of data for the keylet, can be an array of numbers, a string, or a number.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>namespace\u003C/td>\u003Ctd>\u003C/td>\u003Ctd>(Optional) Third piece of data for the keylet, can be an array of numbers, a string, or a number.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Keylet Table\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Keylet Type                                                                          | Parameters                                                                                                                                                                                                                                                                                                                                                                   |\n| ------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| KEYLET_HOOK_STATE                                                                  | \u003Cp>\u003Ccode>a\u003C/code> points to an Account ID\u003Cbr />\u003Ccode>b\u003C/code> is the length of the Account ID (should be 20)\u003Cbr />\u003Ccode>c\u003C/code> points to a hook state key\u003Cbr />\u003Ccode>d\u003C/code> is the length of the key (should be 32)\u003Cbr />\u003Ccode>e\u003C/code> points to a hook state namespace\u003Cbr />\u003Ccode>f\u003C/code> is the length of the namespace (should be 32)\u003C/p>                                     |\n| \u003Cp>KEYLET_AMENDMENTS\u003Cbr />KEYLET_FEES\u003Cbr />KEYLET_NEGATIVE_UNL\u003Cbr />KEYLET_EMITTED_DIR\u003C/p> | `a`, `b`, `c`, `d`, `e`, `f` must all be zero                                                                                                                                                                                                                                                                                                                                |\n| KEYLET_SKIP                                                                         | \u003Cp>Either:\u003Cbr />\u003Ccode>a\u003C/code>, \u003Ccode>b\u003C/code>, \u003Ccode>c\u003C/code>, \u003Ccode>d\u003C/code>, \u003Ccode>e\u003C/code>, \u003Ccode>f\u003C/code> all zero\u003Cbr />Or:\u003Cbr />\u003Ccode>a\u003C/code> is a \u003Ccode>LedgerIndex\u003C/code>\u003Cbr />\u003Ccode>b\u003C/code> is 1\u003Cbr />\u003Ccode>c\u003C/code>, \u003Ccode>d\u003C/code>, \u003Ccode>e\u003C/code>, \u003Ccode>f\u003C/code> must all ​be zero\u003C/p>                                                                                  |\n| KEYLET_LINE                                                                         | \u003Cp>\u003Ccode>a\u003C/code> points to the High Account ID\u003Cbr />\u003Ccode>b\u003C/code> is the length of the above (should be 20)\u003Cbr />\u003Ccode>c\u003C/code> points to the Low Account ID\u003Cbr />\u003Ccode>d\u003C/code> is the length of the above (should be 20)\u003Cbr />\u003Ccode>e\u003C/code> points to the Currency Code\u003Cbr />\u003Ccode>f\u003C/code> is the length of the above (should be 20)\u003C/p>                                         |\n| KEYLET_QUALITY                                                                      | \u003Cp>\u003Ccode>a\u003C/code> points to a serialized keylet\u003Cbr />\u003Ccode>b\u003C/code> is the length of the above (should be 34)\u003Cbr />\u003Ccode>c\u003C/code> is the high 32 bits of the uint64 to pass\u003Cbr />\u003Ccode>d\u003C/code> is the low 32 bits of the uint64 to pass\u003Cbr />\u003Ccode>e\u003C/code>, \u003Ccode>f\u003C/code> must all be zero\u003C/p>                                                                                    |\n| KEYLET_DEPOSIT_PREAUTH                                                             | \u003Cp>\u003Ccode>a\u003C/code> points to an Account ID\u003Cbr />\u003Ccode>b\u003C/code> is the length (should be 20)\u003Cbr />\u003Ccode>c\u003C/code> points to an Account ID\u003Cbr />\u003Ccode>d\u003C/code> is the length (should be 20)\u003Cbr />\u003Ccode>e\u003C/code>, \u003Ccode>f\u003C/code> must all be zero\u003C/p>                                                                                                                                     |\n| \u003Cp>KEYLET_UNCHECKED\u003Cbr />KEYLET_CHILD\u003Cbr />KEYLET_EMITTED_TXN\u003C/p>                        | \u003Cp>\u003Ccode>a\u003C/code> points to a key.\u003Cbr />\u003Ccode>b\u003C/code> is the length of the key (should be 32.)\u003Cbr />\u003Ccode>c\u003C/code>, \u003Ccode>d\u003C/code>, \u003Ccode>e\u003C/code>, \u003Ccode>f\u003C/code> must both ​be zero\u003C/p>                                                                                                                                                                                       |\n| \u003Cp>KEYLET_OWNER_DIR\u003Cbr />KEYLET_SIGNERS\u003Cbr />KEYLET_ACCOUNT\u003Cbr />KEYLET_HOOK\u003C/p>           | \u003Cp>\u003Ccode>a\u003C/code> points to an Account ID.\u003Cbr />\u003Ccode>b\u003C/code> is the length (should be 20.)\u003Cbr />\u003Ccode>c\u003C/code>, \u003Ccode>d\u003C/code>, \u003Ccode>e\u003C/code>, \u003Ccode>f\u003C/code> must all be zero.\u003C/p>                                                                                                                                                                                           |\n| KEYLET_PAGE                                                                         | \u003Cp>\u003Ccode>a\u003C/code> points to a key.\u003Cbr />\u003Ccode>b\u003C/code> is the length of the key (should be 32.)\u003Cbr />\u003Ccode>c\u003C/code> is the high 32 bits of the uint64 to pass\u003Cbr />\u003Ccode>d\u003C/code> is the low 32 bits of the uint64 to pass\u003Cbr />\u003Ccode>e\u003C/code>, \u003Ccode>f\u003C/code> must both ​be zero\u003C/p>                                                                                                |\n| \u003Cp>KEYLET_OFFER\u003Cbr />KEYLET_CHECK\u003Cbr />KEYLET_ESCROW\u003Cbr />KEYLET_NFT_OFFER\u003C/p>             | \u003Cp>\u003Ccode>a\u003C/code> points to an Account ID.\u003Cbr />\u003Ccode>b\u003C/code> is the length (should be 20.)\u003Cbr />And Either:\u003Cbr />\u003Ccode>c\u003C/code> is a 32bit unsigned integer (sequence)\u003Cbr />\u003Ccode>d\u003C/code> is 0\u003Cbr />Or:\u003Cbr />\u003Ccode>c\u003C/code> points to a 32 byte key\u003Cbr />\u003Ccode>d\u003C/code> is the length of the key (32).\u003Cbr />In both cases:\u003Cbr />\u003Ccode>e\u003C/code> and \u003Ccode>f\u003C/code> must be 0.\u003C/p>            |\n| KEYLET_PAYCHAN                                                                      | \u003Cp>\u003Ccode>a\u003C/code> points to an Account ID\u003Cbr />\u003Ccode>b\u003C/code> is the length (should be 20)\u003Cbr />\u003Ccode>c\u003C/code> points to an Account ID\u003Cbr />\u003Ccode>d\u003C/code> is the length (should be 20)\u003Cbr />And Either:\u003Cbr />\u003Ccode>e\u003C/code> 32bit unsigned int to pass\u003Cbr />\u003Ccode>f\u003C/code> is zero\u003Cbr />Or:\u003Cbr />\u003Ccode>e\u003C/code> points to a 32 byte key\u003Cbr />\u003Ccode>f\u003C/code> is the length of the key (32)\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                  |\n| -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written, should always be 34.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- Call didn't comply with the above table.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- Writing buffer was smaller than 34 bytes.\u003C/p> |\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n| Type   | Description                                                                                                           |\n| ------ | --------------------------------------------------------------------------------------------------------------------- |\n| number | ErrorCode if there is an error in creating the keylet, otherwise returns the generated keylet as an array of numbers. |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/utilities/util_keylet.mdx","c7480438f29387c2","docs/hooks/functions/utilities/util_raddr",{"id":1572,"data":1574,"body":1580,"filePath":1581,"digest":1582,"deferredRender":14},{"title":1575,"description":1576,"editUrl":14,"head":1577,"template":16,"sidebar":1578,"pagefind":14,"draft":18},"util_raddr","Convert a 20 byte Account ID to an r-address",[],{"hidden":18,"attrs":1579},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Read a 20 byte  Account ID from the `read_ptr`\n* Write the equivalent r-address for that Account ID to `write_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Read a 20 byte Account ID from the `accountid`\n* Return the equivalent r-address for that Account ID\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t util_raddr (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction util_raddr(accountid: ByteArray | HexString): ErrorCode | string\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t raddr_out[40];\nuint8_t acc_id[20] =\n{\n    0x2dU, 0xd8U, 0xaaU, 0xdbU, 0x4eU, 0x15U,               \n    0xebU, 0xeaU,  0xeU, 0xfdU, 0x78U, 0xd1U, 0xb0U,\n    0x35U, 0x91U,  0x4U, 0x7bU, 0xfaU, 0x1eU,  0xeU\n};\nint64_t bytes_written = \n    util_raddr(raddr_out, sizeof(raddr_out), acc_id, 20);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nconst raddr = util_raddr('8D329C03074A98EF0488AB6ABBF5883F68CCFD4E')\n// or\nconst raddr = util_raddr([\n    0x8D, 0x32, 0x9C, 0x03, 0x07, 0x4A, 0x98, 0xEF, 0x04, 0x88,\n    0xAB, 0x6A, 0xBB, 0xF5, 0x88, 0x3F, 0x68, 0xCC, 0xFD, 0x4E\n])\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"82\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>write_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to a buffer of a suitable size to store the output r-address. Recommend at least 35 bytes.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>write_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Length of the output buffer.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to the Account ID.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>The length of the input. Always 20.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"82\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>accountid\u003C/td>\u003Ctd>number[]/string\u003C/td>\u003Ctd>The HEX account ID to return as r-address, can be provided as an array of numbers or a string.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n| Type     | Description                                                                                                                                                                                                                                                                                                                                                                             |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| int64_t | \u003Cp>The number of bytes written (the length of the output r-address).\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>INVALID_ARGUMENT\u003C/code>\u003Cbr />- \u003Ccode>read_len\u003C/code> was not 20.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- \u003Ccode>write_len\u003C/code> was not large enough to store produced r-address in.\u003C/p> |\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n| Type          | Description                                                                               |\n| ------------- | ----------------------------------------------------------------------------------------- |\n| string/number | ErrorCode if there is an error in formatting, otherwise returns the r-address as a string |\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/utilities/util_raddr.mdx","b04c887fe9492e57","docs/hooks/functions/utilities/util_sha512h",{"id":1583,"data":1585,"body":1591,"filePath":1592,"digest":1593,"deferredRender":14},{"title":1586,"description":1587,"editUrl":14,"head":1588,"template":16,"sidebar":1589,"pagefind":14,"draft":18},"util_sha512h","Compute an sha512-half over some data",[],{"hidden":18,"attrs":1590},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n* Compute an `SHA512` hash over the data pointed to by `read_ptr`\n* Write the first half of the hash to `write_ptr`\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n* Compute an `SHA512` hash over the data pointed to by `data`\n* Return the first half of the hash\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t util_sha512h (\n    uint32_t write_ptr,\n    uint32_t write_len,\n    uint32_t read_ptr,\n    uint32_t read_len\n);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction util_sha512h(data: ByteArray | HexString): ErrorCode | ByteArray\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n### Example\n\nC\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nuint8_t hash_out[32];\nif (util_sha512h(hash_out, 32, data_in_ptr, data_in_len) \u003C 0)\n\trollback(\"Could not generate Hash\", 23, 1);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nif (util_sha512h(data) \u003C 0)\n    rollback(\"Could not generate Hash\", 1)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"114\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>write_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to a buffer the hash will be written to\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>write_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Length of output buffer, should be at least 32.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to the buffer data will be read from (to compute the hash over)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>read_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Length of input data\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"114\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>data\u003C/td>\u003Ctd>ByteArray or HexString\u003C/td>\u003Ctd>The data to compute the hash over, can be provided as an array of numbers or a string.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"137\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>The number of bytes written, should always be 32.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003Cbr />\u003Cbr />\u003Ccode>TOO_SMALL\u003C/code>\u003Cbr />- Output buffer isn't large enough\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"137\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>ByteArray\u003C/td>\u003Ctd>ErrorCode if there is an error in computing the hash, otherwise returns the SHA512-half hash as an array of numbers.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/utilities/util_sha512h.mdx","783a93e1ae3be580","docs/hooks/functions/websocket-apis/account_info",{"id":1594,"data":1596,"body":1601,"filePath":1602,"digest":1603,"deferredRender":14},{"title":1597,"editUrl":14,"head":1598,"template":16,"sidebar":1599,"pagefind":14,"draft":18},"account_info",[],{"hidden":18,"attrs":1600},{},"### New features\n\nThe `account_info` API will now provide, in addition to its regular behaviour:\n\n* A list of namespaces currently in use by at least one Hook State Object\n* A total count of all Hook State Objects the account has\n\nExample query:\n\nJSON\n\n```json\n{\n  \"command\": \"account_info\",\n  \"account\": \"raaFre81618XegCrzTzVotAmarBcqNSAvK\"\n}\n```\n\nE.g.\n\nJSON\n\n```json\n{\n  \"result\": {\n    \"account_data\": {\n      \"Account\": \"raaFre81618XegCrzTzVotAmarBcqNSAvK\",\n      ...,\n      \"HookNamespaces\": [\n        \"01EAF09326B4911554384121FF56FA8FECC215FDDE2EC35D9E59F2C53EC665A0\"\n      ],\n      \"HookStateCount\": 49,\n      ...\n    },\n    \"ledger_current_index\": 5555046,\n    \"validated\": false\n  },\n  \"status\": \"success\",\n  \"type\": \"response\"\n}\n```","src/content/docs/docs/hooks/functions/websocket-apis/account_info.mdx","40240ada0f95b352","docs/hooks/functions/utilities/util_verify",{"id":1604,"data":1606,"body":1612,"filePath":1613,"digest":1614,"deferredRender":14},{"title":1607,"description":1608,"editUrl":14,"head":1609,"template":16,"sidebar":1610,"pagefind":14,"draft":18},"util_verify","Verify a cryptographic signature",[],{"hidden":18,"attrs":1611},{},"import { Tabs, TabItem } from '@astrojs/starlight/components';\n\n### Behaviour\n\nVerify a cryptographic signature\n\n* If the public key is prefixed with `0xED` then use `ED25519`\n* Otherwise assume `SECP256k1`\n\n### Definition\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nint64_t util_verify (\n    uint32_t dread_ptr,\n    uint32_t dread_len,\n    uint32_t sread_ptr,\n    uint32_t sread_len,\n    uint32_t kread_ptr,\n    uint32_t kread_len\n);\n```\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nfunction util_verify(\n    signedData: ByteArray | HexString,\n    signature: ByteArray | HexString,\n    pubkey: ByteArray | HexString\n  ): 0 | 1\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Example\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n```c\nif (!util_verify(payload_ptr,    payload_len,\n                 signature_ptr,  signature_len,\n                 publickey_ptr,  publickey_len))\n\trollback(\"Invalid Signature\", 17, 60);\n```\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n```javascript\nif (util_verify(signedData,signature,pubkey))\n    rollback(\"Invalid Signature\", 60)\n```\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Parameters\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"117\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>dread_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to the signed data\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>dread_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Length of the signed data\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>sread_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to the signature\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>sread_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Length of the signature\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>kread_ptr\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Pointer to the public key\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>kread_len\u003C/td>\u003Ctd>uint32_t\u003C/td>\u003Ctd>Length of the public key\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Name\u003C/th>\u003Cth width=\"117\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>signedData\u003C/td>\u003Ctd>number / string\u003C/td>\u003Ctd>The signed data to verify, can be provided as an array of numbers or a string.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>signature\u003C/td>\u003Ctd>number / string\u003C/td>\u003Ctd>The signature to verify, can be provided as an array of numbers or a string.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>pubkey\u003C/td>\u003Ctd>number / string\u003C/td>\u003Ctd>The public key responsible for the signature, can be provided as an array of numbers or a string.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n\n### Return Code\n\n\u003CTabs>\n\u003CTabItem label=\"C\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"126\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>int64_t\u003C/td>\u003Ctd>\u003Ccode>0\u003C/code> - validation failed, the signature is invalid.\u003Cbr />\u003Ccode>1\u003C/code> - validation succeeded, the signature is valid.\u003Cbr />\u003Cbr />If negative, an error:\u003Cbr />\u003Ccode>OUT_OF_BOUNDS\u003C/code>\u003Cbr />- pointers/lengths specified outside of hook memory.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"JavaScript\">\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"126\">Type\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>number\u003C/td>\u003Ctd>\u003Ccode>0\u003C/code> - validation failed, the signature is invalid.\u003Cbr />\u003Ccode>1\u003C/code> - validation succeeded, the signature is valid.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003C/TabItem>\n\u003C/Tabs>","src/content/docs/docs/hooks/functions/utilities/util_verify.mdx","8d25e87942500f84","docs/protocol-reference/ledger-data/ledger-objects-types/accountroot",{"id":1615,"data":1617,"body":1622,"filePath":1623,"digest":1624,"deferredRender":14},{"title":1618,"editUrl":14,"head":1619,"template":16,"sidebar":1620,"pagefind":14,"draft":18},"AccountRoot",[],{"hidden":18,"attrs":1621},{},"[\\[Source\\]](https://github.com/Xahau/xahaud/blob/264280edd79b7f764536e02459f33f66a59c0531/src/ripple/protocol/impl/LedgerFormats.cpp#L36-L60)\n\nAn `AccountRoot` ledger entry type describes a single account, its settings, and XAH balance.\n\n### Example JSON\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"AccountTxnID\": \"0D5FB50FA65C9FE1538FD7E398FFFE9D1908DFA4576D8D7A020040686F93C77D\",\n    \"AccountIndex\": \"59\",\n    \"Balance\": \"148446663\",\n    \"Domain\": \"6D64756F31332E636F6D\",\n    \"EmailHash\": \"98B4375E1D753E5B91627516F6D70977\",\n    \"Flags\": 8388608,\n    \"LedgerEntryType\": \"AccountRoot\",\n    \"MessageKey\": \"0000000000000000000000070000000300\",\n    \"OwnerCount\": 3,\n    \"PreviousTxnID\": \"0D5FB50FA65C9FE1538FD7E398FFFE9D1908DFA4576D8D7A020040686F93C77D\",\n    \"PreviousTxnLgrSeq\": 14091160,\n    \"Sequence\": 336,\n    \"TransferRate\": 1004999999,\n    \"index\": \"13F1A95D7AAB7108D5CE7EEAF504B2894B8C674E6D68499076441C4837282BF8\"\n}\n```\n\n### Fields\n\nAn `AccountRoot` object has the following fields:\n\n| Field                  | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                                            |\n| ---------------------- | --------- | ------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Account`              | String    | AccountID           | Yes       | The identifying (classic) address of this account.                                                                                                                                                                                                                                     |\n| `Sequence`             | Number    | UInt32              | Yes       | The sequence number of the next valid transaction for this account.                                                                                                                                                                                                                    |\n| `Balance`              | String    | Amount              | No        | The account's current \\[XAH balance in drops]\\[XAH, in drops], represented as a string.                                                                                                                                                                                                |\n| `OwnerCount`           | Number    | UInt32              | Yes       | The number of objects this account owns in the ledger, which contributes to its owner reserve.                                                                                                                                                                                         |\n| `PreviousTxnID`        | String    | Hash256             | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                                                                                                                       |\n| `PreviousTxnLgrSeq`    | Number    | UInt32              | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                                                                                                                       |\n| `AccountTxnID`         | String    | Hash256             | No        | The identifying hash of the transaction most recently sent by this account. This field must be enabled to use the `AccountTxnID` transaction field. To enable it, send an AccountSet transaction with the `asfAccountTxnID` flag enabled.                                              |\n| `RegularKey`           | String    | AccountID           | No        | The address of a key pair that can be used to sign transactions for this account instead of the master key. Use a \\[SetRegularKey transaction]\\[] to change this value.                                                                                                                |\n| `EmailHash`            | String    | Hash128             | No        | The md5 hash of an email address. Clients can use this to look up an avatar through services such as [Gravatar](https://en.gravatar.com/).                                                                                                                                             |\n| `WalletLocator`        | String    | Hash256             | No        | An arbitrary 256-bit value that users can set.                                                                                                                                                                                                                                         |\n| `WalletSize`           | Number    | UInt32              | No        | Unused. (The code supports this field but there is no way to set it.)                                                                                                                                                                                                                  |\n| `MessageKey`           | String    | Blob                | No        | A public key that may be used to send encrypted messages to this account. In JSON, uses hexadecimal. Must be exactly 33 bytes, with the first byte indicating the key type: `0x02` or `0x03` for secp256k1 keys, `0xED` for Ed25519 keys.                                              |\n| `TransferRate`         | Number    | UInt32              | No        | A transfer fee to charge other users for sending currency issued by this account to each other.                                                                                                                                                                                        |\n| `Domain`               | String    | Blob                | No        | A domain associated with this account. In JSON, this is the hexadecimal for the ASCII representation of the domain. [Cannot be more than 256 bytes in length.](https://github.com/Xahau/xahaud/blob/55dc7a252e08a0b02cd5aa39e9b4777af3eafe77/src/ripple/app/tx/impl/SetAccount.h#L34) |\n| `TickSize`             | Number    | UInt8               | No        | How many significant digits to use for exchange rates of Offers involving currencies issued by this address. Valid values are `3` to `15`, inclusive. _(Added by the \\[TickSize amendment]\\[].)_                                                                                       |\n| `TicketCount`          | Number    | UInt32              | No        | How many Tickets this account owns in the ledger. This is updated automatically to ensure that the account stays within the hard limit of 250 Tickets at a time. This field is omitted if the account has zero Tickets. _(Added by the \\[TicketBatch amendment]\\[].)_                  |\n| `NFTokenMinter`        | String    | AccountID           | No        | Another account that can mint non-fungible tokens on behalf of this account. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[])_                                                                                                                                                   |\n| `MintedNFTokens`       | Number    | UInt32              | No        | How many total non-fungible tokens have been minted by and on behalf of this account. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[])_                                                                                                                                          |\n| `BurnedNFTokens`       | Number    | UInt32              | No        | How many total of this account's issued non-fungible tokens have been burned. This number is always equal or less than `MintedNFTokens`.                                                                                                                                               |\n| `HookStateCount`       | Number    | UInt32              | No        | The number of states on the Hook.                                                                                                                                                                                                                                                      |\n| `HookNamespaces`       | Array     | Vector256           | No        | A unique value to prevent state conflicts between multiple Hooks installed on the same XAHL account.                                                                                                                                                                                   |\n| `RewardLgrFirst`       | Number    | UInt32              | No        | The ledger number of the last ClaimReward transaction.                                                                                                                                                                                                                                 |\n| `RewardLgrLast`        | Number    | UInt32              | No        | The ledger sequence number of the last transaction in or out of your account.                                                                                                                                                                                                          |\n| `RewardTime`           | Number    | UInt32              | No        | The ledger time the last reward was claimed.                                                                                                                                                                                                                                           |\n| `RewardAccumulator`    | String    | UInt64              | No        | The area under of the balance-time graph for your account since last ClaimReward transaction.                                                                                                                                                                                          |\n| `FirstNFTokenSequence` | Number    | UInt32              | No        | The account's \\[Sequence Number]\\[] at the time it minted its first non-fungible-token. _(Added by the \\[fixNFTokenRemint amendment]\\[] :not_enabled:)_                                                                                                                               |\n| `ImportSequence`       | Number    | UInt32              | No        | The current sequence number from the importing account on the XAHL Ledger.                                                                                                                                                                                                             |\n| `GovernanceFlags`      | String    | Hash256             | No        |                                                                                                                                                                                                                                                                                        |\n| `GovernanceMarks`      | String    | Hash256             | No        |                                                                                                                                                                                                                                                                                        |\n| `AccountIndex`         | String    | UInt64              | No        | The account's \\[Index Number]\\[]. _(Added by the \\[xahauGenesis amendment]\\[] :enabled:)_                                                                                                                                                                                              |\n| `TouchCount`           | String    | UInt64              | No        | An incrementing counter for every time the ledger entry is \"touched\".                                                                                                                                                                                                                  |\n\n### AccountRoot Flags\n\nThere are several options which can be either enabled or disabled for an account. These options can be changed with an \\[AccountSet transaction]\\[]. In the ledger, flags are represented as binary values that can be combined with bitwise-or operations. The bit values for the flags in the ledger are different than the values used to enable or disable those flags in a transaction. Ledger flags have names that begin with **`lsf`**.\n\nfAccountRoot objects can have the following flag values:\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"174\">Flag Name\u003C/th>\u003Cth>Hex Value\u003C/th>\u003Cth width=\"129\">Decimal Value\u003C/th>\u003Cth width=\"118\">Corresponding AccountSet Flag\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ccode>lsfDefaultRipple\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00800000\u003C/code>\u003C/td>\u003Ctd>8388608\u003C/td>\u003Ctd>\u003Ccode>asfDefaultRipple\u003C/code>\u003C/td>\u003Ctd>Enable rippling on this addresses's trust lines by default. Required for issuing addresses; discouraged for others.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfDepositAuth\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x01000000\u003C/code>\u003C/td>\u003Ctd>16777216\u003C/td>\u003Ctd>\u003Ccode>asfDepositAuth\u003C/code>\u003C/td>\u003Ctd>This account has DepositAuth enabled, meaning it can only receive funds from transactions it sends, and from preauthorized accounts. \u003Cem>(Added by the [DepositAuth amendment][])\u003C/em>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfDisableMaster\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00100000\u003C/code>\u003C/td>\u003Ctd>1048576\u003C/td>\u003Ctd>\u003Ccode>asfDisableMaster\u003C/code>\u003C/td>\u003Ctd>Disallows use of the master key to sign transactions for this account.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfDisallowIncomingCheck\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x08000000\u003C/code>\u003C/td>\u003Ctd>134217728\u003C/td>\u003Ctd>\u003Ccode>asfDisallowIncomingCheck\u003C/code>\u003C/td>\u003Ctd>This account blocks incoming Checks. \u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfDisallowIncomingNFTokenOffer\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x04000000\u003C/code>\u003C/td>\u003Ctd>67108864\u003C/td>\u003Ctd>\u003Ccode>asfDisallowIncomingNFTokenOffer\u003C/code>\u003C/td>\u003Ctd>This account blocks incoming NFTokenOffers. \u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfDisallowIncomingPayChan\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x10000000\u003C/code>\u003C/td>\u003Ctd>268435456\u003C/td>\u003Ctd>\u003Ccode>asfDisallowIncomingPayChan\u003C/code>\u003C/td>\u003Ctd>This account blocks incoming Payment Channels. \u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfDisallowIncomingTrustline\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x20000000\u003C/code>\u003C/td>\u003Ctd>536870912\u003C/td>\u003Ctd>\u003Ccode>asfDisallowIncomingTrustline\u003C/code>\u003C/td>\u003Ctd>This account blocks incoming trust lines. \u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfDisallowIncomingRemit\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x80000000\u003C/code>\u003C/td>\u003Ctd>2147483648\u003C/td>\u003Ctd>\u003Ccode>asfDisallowIncomingRemit\u003C/code>\u003C/td>\u003Ctd>This account blocks incoming remit transactions. \u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfDisallowXRP\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00080000\u003C/code>\u003C/td>\u003Ctd>524288\u003C/td>\u003Ctd>\u003Ccode>asfDisallowXRP\u003C/code>\u003C/td>\u003Ctd>Client applications should not send XAH to this account. (Advisory; not enforced by the protocol.)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfGlobalFreeze\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00400000\u003C/code>\u003C/td>\u003Ctd>4194304\u003C/td>\u003Ctd>\u003Ccode>asfGlobalFreeze\u003C/code>\u003C/td>\u003Ctd>All assets issued by this account are frozen.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfNoFreeze\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00200000\u003C/code>\u003C/td>\u003Ctd>2097152\u003C/td>\u003Ctd>\u003Ccode>asfNoFreeze\u003C/code>\u003C/td>\u003Ctd>This account cannot freeze trust lines connected to it. Once enabled, cannot be disabled.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfPasswordSpent\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00010000\u003C/code>\u003C/td>\u003Ctd>65536\u003C/td>\u003Ctd>(None)\u003C/td>\u003Ctd>This account has used its free SetRegularKey transaction.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfRequireAuth\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00040000\u003C/code>\u003C/td>\u003Ctd>262144\u003C/td>\u003Ctd>\u003Ccode>asfRequireAuth\u003C/code>\u003C/td>\u003Ctd>This account must individually approve other users for those users to hold this account's tokens.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfRequireDestTag\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00020000\u003C/code>\u003C/td>\u003Ctd>131072\u003C/td>\u003Ctd>\u003Ccode>asfRequireDest\u003C/code>\u003C/td>\u003Ctd>Requires incoming payments to specify a Destination Tag.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfTshCollect\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x02000000\u003C/code>\u003C/td>\u003Ctd>33554432\u003C/td>\u003Ctd>\u003Ccode>asfTshCollect\u003C/code>\u003C/td>\u003Ctd>The TSH pays for the execution of their own Hook Chain.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfURITokenIssuer\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x04000000\u003C/code>\u003C/td>\u003Ctd>67108864\u003C/td>\u003Ctd>\u003Ccode>asfURITokenIssuer\u003C/code>\u003C/td>\u003Ctd>This account cannot be deleted after it has issued a URIToken.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n### AccountRoot ID Format\n\nThe ID of an AccountRoot object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The Account space key (`0x0061`)\n* The AccountID of the account","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/accountroot.mdx","9d4c5512c8be0e22","docs/hooks/functions/websocket-apis/account_namespace",{"id":1625,"data":1627,"body":1632,"filePath":1633,"digest":1634,"deferredRender":14},{"title":1628,"editUrl":14,"head":1629,"template":16,"sidebar":1630,"pagefind":14,"draft":18},"account_namespace",[],{"hidden":18,"attrs":1631},{},"Use the `account_namespace` websocket API to query the Hook State Objects on a particular account in a particular namespace.\n\nUsage:\n\nJSON\n\n```json\n{\n  \"command\": \"account_namespace\",\n  \"account\": \"\u003Cr Address>\",\n  \"namespace_id\": \"\u003CNamespace HEX>\"\n}\n```\n\nExample query:\n\nJSON\n\n```json\n{\n  \"command\": \"account_namespace\",\n  \"account\": \"raaFre81618XegCrzTzVotAmarBcqNSAvK\",\n  \"namespace_id\": \"01EAF09326B4911554384121FF56FA8FECC215FDDE2EC35D9E59F2C53EC665A0\"\n}\n```\n\nExample result:\n\nJSON\n\n```json\n{\n  \"result\": {\n    \"account\": \"raaFre81618XegCrzTzVotAmarBcqNSAvK\",\n    \"ledger_current_index\": 5554739,\n    \"namespace_entries\": [\n      {\n        \"Flags\": 0,\n        \"HookStateData\": \"CE66D3EBD1A91E9D6F47ADCF8890C92C3EE65A42313174682047656E20496E74656C28522920436F726528544D292069372D31313635473720322E3800080AF0000C3500000009C400000FA0\",\n        \"HookStateKey\": \"4556520237F1F3A48DFAED331FDB8F894522B5CE634C86A0258BA1B300000018\",\n        \"LedgerEntryType\": \"HookState\",\n        \"OwnerNode\": \"0\",\n        \"index\": \"065E103AC0838155A392DECA99D77FAE768EC822BFEC6BC999268ECBD16C8FAF\"\n      },\n      {\n        \"Flags\": 0,\n        \"HookStateData\": \"00000000044E8000\",\n        \"HookStateKey\": \"4556520100000000000000000000000000000000000000000000000000000004\",\n        \"LedgerEntryType\": \"HookState\",\n        \"OwnerNode\": \"0\",\n        \"index\": \"0890BE9EE8CD129D21728FC3C2423CC0AB99D325A269A8A749C840F712989E5B\"\n      },\n      ... \n    ],\n    \"namespace_id\": \"01EAF09326B4911554384121FF56FA8FECC215FDDE2EC35D9E59F2C53EC665A0\",\n    \"validated\": false\n  },\n  \"status\": \"success\",\n  \"type\": \"response\"\n}\n```","src/content/docs/docs/hooks/functions/websocket-apis/account_namespace.mdx","30934b2a54e06df1","docs/protocol-reference/ledger-data/ledger-objects-types/check",{"id":1635,"data":1637,"body":1641,"filePath":1642,"digest":1643,"deferredRender":14},{"title":316,"editUrl":14,"head":1638,"template":16,"sidebar":1639,"pagefind":14,"draft":18},[],{"hidden":18,"attrs":1640},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L157-L170)\n\n_(Added by the \\[Checks amendment]\\[].)_\n\nA `Check` object describes a check, similar to a paper personal check, which can be cashed by its destination to get money from its sender. (The potential payment has already been approved by its sender, but no money moves until it is cashed. Unlike an Escrow, the money for a Check is not set aside, so cashing the Check could fail due to lack of funds.)\n\n### Example JSON\n\n```json\n{\n  \"Account\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\",\n  \"Destination\": \"rfkE1aSy9G8Upk4JssnwBxhEv5p4mn2KTy\",\n  \"DestinationNode\": \"0000000000000000\",\n  \"DestinationTag\": 1,\n  \"Expiration\": 570113521,\n  \"Flags\": 0,\n  \"InvoiceID\": \"46060241FABCF692D4D934BA2A6C4427CD4279083E38C77CBE642243E43BE291\",\n  \"LedgerEntryType\": \"Check\",\n  \"OwnerNode\": \"0000000000000000\",\n  \"PreviousTxnID\": \"5463C6E08862A1FAE5EDAC12D70ADB16546A1F674930521295BC082494B62924\",\n  \"PreviousTxnLgrSeq\": 6,\n  \"SendMax\": \"100000000\",\n  \"Sequence\": 2,\n  \"index\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\"\n}\n```\n\n### Fields\n\nA `Check` object has the following fields:\n\n| Field               | JSON Type        | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                                        |\n| ------------------- | ---------------- | ------------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Account`           | String           | Account             | Yes       | The sender of the Check. Cashing the Check debits this address's balance.                                                                                                                                                                                                          |\n| `Destination`       | String           | Account             | Yes       | The intended recipient of the Check. Only this address can cash the Check, using a \\[CheckCash transaction]\\[].                                                                                                                                                                    |\n| `DestinationNode`   | String           | UInt64              | No        | A hint indicating which page of the destination's owner directory links to this object, in case the directory consists of multiple pages.                                                                                                                                          |\n| `DestinationTag`    | Number           | UInt32              | No        | An arbitrary tag to further specify the destination for this Check, such as a hosted recipient at the destination address.                                                                                                                                                         |\n| `Expiration`        | Number           | UInt32              | No        | Indicates the time after which this Check is considered expired. See \\[Specifying Time]\\[] for details.                                                                                                                                                                            |\n| `Flags`             | Number           | UInt32              | Yes       | A bit-map of boolean flags enabled for this object. Currently, the protocol defines no flags for `Check` objects. The value is always `0`.                                                                                                                                         |\n| `InvoiceID`         | String           | Hash256             | No        | Arbitrary 256-bit hash provided by the sender as a specific reason or identifier for this Check.                                                                                                                                                                                   |\n| `LedgerEntryType`   | String           | UInt16              | Yes       | The value `0x0043`, mapped to the string `Check`, indicates that this object is a Check object.                                                                                                                                                                                    |\n| `OwnerNode`         | String           | UInt64              | Yes       | A hint indicating which page of the sender's owner directory links to this object, in case the directory consists of multiple pages. **Note:** The object does not contain a direct link to the owner directory containing it, since that value can be derived from the `Account`. |\n| `PreviousTxnID`     | String           | Hash256             | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                                                                                                                   |\n| `PreviousTxnLgrSeq` | Number           | UInt32              | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                                                                                                                   |\n| `SendMax`           | String or Object | Amount              | Yes       | The maximum amount of currency this Check can debit the sender. If the Check is successfully cashed, the destination is credited in the same currency for up to this amount.                                                                                                       |\n| `Sequence`          | Number           | UInt32              | Yes       | The sequence number of the \\[CheckCreate transaction]\\[] that created this check.                                                                                                                                                                                                  |\n| `SourceTag`         | Number           | UInt32              | No        | An arbitrary tag to further specify the source for this Check, such as a hosted recipient at the sender's address.                                                                                                                                                                 |\n\n### Check ID Format\n\nThe ID of a `Check` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The Check space key (`0x0043`)\n* The AccountID of the sender of the \\[CheckCreate transaction]\\[] that created the `Check` object\n* The `Sequence` number of the \\[CheckCreate transaction]\\[] that created the `Check` object. If the CheckCreate transaction used a Ticket, use the `TicketSequence` value instead.","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/check.mdx","bf52ef0f201c165c","docs/protocol-reference/ledger-data/ledger-objects-types/amendments",{"id":1644,"data":1646,"body":1650,"filePath":1651,"digest":1652,"deferredRender":14},{"title":37,"editUrl":14,"head":1647,"template":16,"sidebar":1648,"pagefind":14,"draft":18},[],{"hidden":18,"attrs":1649},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L138-L144)\n\nThe `Amendments` object type contains a list of Amendments that are currently active. Each ledger version contains **at most one** `Amendments` object.\n\n### Example JSON\n\n```json\n{\n    \"Majorities\": [\n        {\n            \"Majority\": {\n                \"Amendment\": \"1562511F573A19AE9BD103B5D6B9E01B3B46805AEC5D3C4805C902B514399146\",\n                \"CloseTime\": 535589001\n            }\n        }\n    ],\n    \"Amendments\": [\n        \"42426C4D4F1009EE67080A9B7965B44656D7714D104A72F9B4369F97ABF044EE\",\n        \"4C97EBA926031A7CF7D7B36FDE3ED66DDA5421192D63DE53FFB46E43B9DC8373\",\n        \"6781F8368C4771B83E8B821D88F580202BCB4228075297B19E4FDC5233F1EFDC\",\n        \"740352F2412A9909880C23A559FCECEDA3BE2126FED62FC7660D628A06927F11\"\n    ],\n    \"Flags\": 0,\n    \"LedgerEntryType\": \"Amendments\",\n    \"index\": \"7DB0788C020F02780A673DC74757F23823FA3014C1866E72CC4CD8B226CD6EF4\"\n}\n```\n\n### Fields\n\n| Name              | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                 |\n| ----------------- | --------- | ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Amendments`      | Array     | Vector256           | No        | Array of 256-bit amendment IDs for all currently enabled amendments. If omitted, there are no enabled amendments.                                                           |\n| `Flags`           | Number    | UInt32              | Yes       | A bit-map of boolean flags enabled for this object. Currently, the protocol defines no flags for `Amendments` objects. The value is always `0`.                             |\n| `LedgerEntryType` | String    | UInt16              | Yes       | The value `0x0066`, mapped to the string `Amendments`, indicates that this object describes the status of amendments to Xahau.                                              |\n| `Majorities`      | Array     | STArray             | No        | Array of objects describing the status of amendments that have majority support but are not yet enabled. If omitted, there are no pending amendments with majority support. |\n\nEach member of the `Majorities` field, if it is present, is an object with one field, `Majority`, whose contents are a nested object with the following fields:\n\n| Name        | JSON Type | \\[Internal Type]\\[] | Description                                                                                        |\n| ----------- | --------- | ------------------- | -------------------------------------------------------------------------------------------------- |\n| `Amendment` | String    | Hash256             | The Amendment ID of the pending amendment.                                                         |\n| `CloseTime` | Number    | UInt32              | The `close_time` field of the ledger version where this amendment most recently gained a majority. |\n\nIn the amendment process, a consensus of validators adds a new amendment to the `Majorities` field using an \\[EnableAmendment]\\[] pseudo-transaction with the `tfGotMajority` flag when 80% or more of validators support it. If support for a pending amendment goes below 80%, an \\[EnableAmendment]\\[] pseudo-transaction with the `tfLostMajority` flag removes the amendment from the `Majorities` array. If an amendment remains in the `Majorities` field for at least 2 weeks, an \\[EnableAmendment]\\[] pseudo-transaction with no flags removes it from `Majorities` and permanently adds it to the `Amendments` field.\n\n**Note:** Technically, all transactions in a ledger are processed based on which amendments are enabled in the ledger version immediately before it. While applying transactions to a ledger version where an amendment becomes enabled, the rules don't change mid-ledger. After the ledger is closed, the next ledger uses the new rules as defined by any new amendments that apply.\n\n### Amendments ID Format\n\nThe `Amendments` object ID is the hash of the `Amendments` space key (`0x0066`) only. This means that the ID of the `Amendments` object in a ledger is always:\n\n```\n7DB0788C020F02780A673DC74757F23823FA3014C1866E72CC4CD8B226CD6EF4\n```\n\n(Don't mix up the ID of the `Amendments` ledger object type with the Amendment ID of an individual amendment.)","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/amendments.mdx","9b309469e9b65ef0","docs/protocol-reference/ledger-data/ledger-objects-types/deposit-pre-auth",{"id":1653,"data":1655,"body":1660,"filePath":1661,"digest":1662,"deferredRender":14},{"title":1656,"editUrl":14,"head":1657,"template":16,"sidebar":1658,"pagefind":14,"draft":18},"Deposit Pre Auth",[],{"hidden":18,"attrs":1659},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L172-L178)\n\nA `DepositPreauth` object tracks a preauthorization from one account to another. \\[DepositPreauth transactions]\\[] create these objects.\n\nThis has no effect on the processing of transactions unless the account that provided the preauthorization requires Deposit Authorization. In that case, the account that was preauthorized can send payments and other transactions directly to the account that provided the preauthorization. Preauthorizations are one-directional and have no effect on payments going the opposite direction.\n\n### Example JSON\n\n```json\n{\n  \"LedgerEntryType\": \"DepositPreauth\",\n  \"Account\": \"rsUiUMpnrgxQp24dJYZDhmV4bE3aBtQyt8\",\n  \"Authorize\": \"rEhxGqkqPPSxQ3P25J66ft5TwpzV14k2de\",\n  \"Flags\": 0,\n  \"OwnerNode\": \"0000000000000000\",\n  \"PreviousTxnID\": \"3E8964D5A86B3CD6B9ECB33310D4E073D64C865A5B866200AD2B7E29F8326702\",\n  \"PreviousTxnLgrSeq\": 7,\n  \"index\": \"4A255038CC3ADCC1A9C91509279B59908251728D0DAADB248FFE297D0F7E068C\"\n}\n```\n\n### Fields\n\nA `DepositPreauth` object has the following fields:\n\n| Field               | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                                        |\n| ------------------- | --------- | ------------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Account`           | String    | Account             | Yes       | The account that granted the preauthorization. (The destination of the preauthorized payments.)                                                                                                                                                                                    |\n| `Authorize`         | String    | Account             | Yes       | The account that received the preauthorization. (The sender of the preauthorized payments.)                                                                                                                                                                                        |\n| `Flags`             | Number    | UInt32              | Yes       | A bit-map of boolean flags enabled for this object. Currently, the protocol defines no flags for `DepositPreauth` objects. The value is always `0`.                                                                                                                                |\n| `LedgerEntryType`   | String    | UInt16              | Yes       | The value `0x0070`, mapped to the string `DepositPreauth`, indicates that this is a DepositPreauth object.                                                                                                                                                                         |\n| `OwnerNode`         | String    | UInt64              | Yes       | A hint indicating which page of the sender's owner directory links to this object, in case the directory consists of multiple pages. **Note:** The object does not contain a direct link to the owner directory containing it, since that value can be derived from the `Account`. |\n| `PreviousTxnID`     | String    | Hash256             | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                                                                                                                   |\n| `PreviousTxnLgrSeq` | Number    | UInt32              | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                                                                                                                   |\n\n### DepositPreauth ID Format\n\nThe ID of a `DepositPreauth` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The DepositPreauth space key (`0x0070`)\n* The AccountID of the owner of this object (the sender of the \\[DepositPreauth transaction]\\[] that created this object; in other words, the one that granted the preauthorization)\n* The AccountID of the preauthorized account (the `Authorized` field of the \\[DepositPreauth transaction]\\[] that created this object; in other words, the one that received the preauthorization)","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/deposit-pre-auth.mdx","0f0cb4efc8df9ef2","docs/protocol-reference/ledger-data/ledger-objects-types/directory-node",{"id":1663,"data":1665,"body":1670,"filePath":1671,"digest":1672,"deferredRender":14},{"title":1666,"editUrl":14,"head":1667,"template":16,"sidebar":1668,"pagefind":14,"draft":18},"Directory Node",[],{"hidden":18,"attrs":1669},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/5d2d88209f1732a0f8d592012094e345cbe3e675/src/ripple/protocol/impl/LedgerFormats.cpp#L44)\n\nThe `DirectoryNode` object type provides a list of links to other objects in the ledger's state tree. A single conceptual _Directory_　takes the form of a doubly linked list, with one or more DirectoryNode objects each containing up to 32 IDs of other objects. The first object is called the root of the directory, and all objects other than the root object can be added or deleted as necessary.\n\nThere are two kinds of Directories:\n\n* **Owner directories** list other objects owned by an account, such as `RippleState` (trust line) or `Offer` objects.\n* **Offer directories** list the offers available in the decentralized exchange. A single Offer directory contains all the offers that have the same exchange rate for the same token (currency code and issuer).\n\n### Example JSON\n\n_Offer Directory_\n\n```json\n{\n    \"ExchangeRate\": \"4F069BA8FF484000\",\n    \"Flags\": 0,\n    \"Indexes\": [\n        \"AD7EAE148287EF12D213A251015F86E6D4BD34B3C4A0A1ED9A17198373F908AD\"\n    ],\n    \"LedgerEntryType\": \"DirectoryNode\",\n    \"RootIndex\": \"1BBEF97EDE88D40CEE2ADE6FEF121166AFE80D99EBADB01A4F069BA8FF484000\",\n    \"TakerGetsCurrency\": \"0000000000000000000000000000000000000000\",\n    \"TakerGetsIssuer\": \"0000000000000000000000000000000000000000\",\n    \"TakerPaysCurrency\": \"0000000000000000000000004A50590000000000\",\n    \"TakerPaysIssuer\": \"5BBC0F22F61D9224A110650CFE21CC0C4BE13098\",\n    \"index\": \"1BBEF97EDE88D40CEE2ADE6FEF121166AFE80D99EBADB01A4F069BA8FF484000\"\n}\n```\n\n_Owner Directory_\n\n```json\n{\n    \"Flags\": 0,\n    \"Indexes\": [\n        \"AD7EAE148287EF12D213A251015F86E6D4BD34B3C4A0A1ED9A17198373F908AD\",\n        \"E83BBB58949A8303DF07172B16FB8EFBA66B9191F3836EC27A4568ED5997BAC5\"\n    ],\n    \"ReferenceCount\": \"1\",\n    \"LedgerEntryType\": \"DirectoryNode\",\n    \"Owner\": \"rpR95n1iFkTqpoy1e878f4Z1pVHVtWKMNQ\",\n    \"RootIndex\": \"193C591BF62482468422313F9D3274B5927CA80B4DD3707E42015DD609E39C94\",\n    \"index\": \"193C591BF62482468422313F9D3274B5927CA80B4DD3707E42015DD609E39C94\"\n}\n```\n\n### Fields\n\n| Name                | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                |\n| ------------------- | --------- | ------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Owner`             | String    | AccountID           | No        | (Owner Directories only) The address of the account that owns the objects in this directory.                                                                                                                               |\n| `TakerGetsCurrency` | String    | Hash160             | No        | (Offer Directories only) The currency code of the `TakerGets` amount from the offers in this directory.                                                                                                                    |\n| `TakerGetsIssuer`   | String    | Hash160             | No        | (Offer Directories only) The issuer of the `TakerGets` amount from the offers in this directory.                                                                                                                           |\n| `TakerPaysCurrency` | String    | Hash160             | No        | (Offer Directories only) The currency code of the `TakerPays` amount from the offers in this directory.                                                                                                                    |\n| `TakerPaysIssuer`   | String    | Hash160             | No        | (Offer Directories only) The issuer of the `TakerPays` amount from the offers in this directory.                                                                                                                           |\n| `ExchangeRate`      | String    | UInt64              | No        | (Offer Directories only) **DEPRECATED**. Do not use.                                                                                                                                                                       |\n| `ReferenceCount`    | String    | UInt64              | No        | Reference counting in the ledger reduces storage burden and fees by allowing multiple installations of the same Hook to point to the same object on the ledger, only removing it when no accounts have the Hook installed. |\n| `Indexes`           | Array     | Vector256           | Yes       | The contents of this Directory: an array of IDs of other objects.                                                                                                                                                          |\n| `IndexNext`         | Number    | UInt64              | No        | If this Directory consists of multiple pages, this ID links to the next object in the chain, wrapping around at the end.                                                                                                   |\n| `IndexPrevious`     | Number    | UInt64              | No        | If this Directory consists of multiple pages, this ID links to the previous object in the chain, wrapping around at the beginning.                                                                                         |\n| `NFTokenID`         | String    | Hash256             | No        | Unused                                                                                                                                                                                                                     |\n\n### Directory ID Formats\n\nThere are three different formulas for creating the ID of a DirectoryNode, depending on which of the following the DirectoryNode represents:\n\n* The first page (also called the root) of an Owner Directory\n* The first page of an Offer Directory\n* Later pages of either type\n\n**The first page of an Owner Directory** has an ID that is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The Owner Directory space key (`0x004F`)\n* The AccountID from the `Owner` field.\n\n**The first page of an Offer Directory** has a special ID: the higher 192 bits define the order book, and the remaining 64 bits define the exchange rate of the offers in that directory. (The ID is big-endian, so the book is in the more significant bits, which come first, and the quality is in the less significant bits which come last.)&#x20;\n\nThis provides a way to iterate through an order book from best offers to worst. Specifically: the first 192 bits are the first 192 bits of the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The Book Directory space key (`0x0042`)\n* The 160-bit currency code from the `TakerPaysCurrency`\n* The 160-bit currency code from the `TakerGetsCurrency`\n* The AccountID from the `TakerPaysIssuer`\n* The AccountID from the `TakerGetsIssuer`\n\nThe lower 64 bits of an Offer Directory's ID represent the `TakerPays` amount divided by `TakerGets` amount from the offer(s) in that directory as a 64-bit number in Xahau's internal amount format.\n\n**If the DirectoryNode is not the first page in the Directory** (regardless of whether it is an Owner Directory or an Offer Directory), then it has an ID that is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The DirectoryNode space key (`0x0064`)\n* The ID of the root DirectoryNode\n* The page number of this object. (Since 0 is the root DirectoryNode, this value is an integer 1 or higher.)","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/directory-node.mdx","4f4b40197e7f0e1d","docs/protocol-reference/ledger-data/ledger-objects-types/emitted-txn",{"id":1673,"data":1675,"body":1680,"filePath":1681,"digest":1682,"deferredRender":14},{"title":1676,"editUrl":14,"head":1677,"template":16,"sidebar":1678,"pagefind":14,"draft":18},"Emitted Txn",[],{"hidden":18,"attrs":1679},{},"_(Added by the \\[Hooks amendment]\\[].)_\n\nAn `EmittedTxn` object describes a transaction that has been emitted by a hook. The object contains all the fields of the original transaction, along with additional details about the emission.\n\n### Example JSON\n\n```json\n{\n  \"Account\": \"rMPwD1b8dJUaqZHaBgEvFx4ENhtpPVvDsv\",\n  \"Amount\": \"999999\",\n  \"Destination\": \"rfCarbonVNTuXckX6x2qTMFmFSnm6dEWGX\",\n  \"DestinationTag\": 0,\n  \"EmitDetails\": {\n    \"EmitBurden\": \"1\",\n    \"EmitCallback\": \"rMPwD1b8dJUaqZHaBgEvFx4ENhtpPVvDsv\",\n    \"EmitGeneration\": 1,\n    \"EmitHookHash\": \"A9B5411F4A4368008B4736EEE47A34B0EFCBE74016B9B94CC6208FBC0BF5C0C2\",\n    \"EmitNonce\": \"6B2A27D6864903A479614581A79D18E8C8ADCE01E3440C6E993BE07298ADC2A4\",\n    \"EmitParentTxnID\": \"9763EB6B74AEF0F55F642243AD51F48490594434439002A6142E545E47318D56\"\n  },\n  \"Fee\": \"31\",\n  \"FirstLedgerSequence\": 7186113,\n  \"Flags\": 2147483648,\n  \"LastLedgerSequence\": 7186117,\n  \"Sequence\": 0,\n  \"SigningPubKey\": \"000000000000000000000000000000000000000000000000000000000000000000\",\n  \"SourceTag\": 0,\n  \"TransactionType\": \"Payment\"\n}\n```\n\n### Fields\n\nAn `EmittedTxn` object has the following fields:\n\n| Field             | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                              |\n| ----------------- | --------- | ------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `EmitDetails`     | Object    | Object              | Yes       | Contains details about the emission. This includes the generation of the emission, the burden of the emission, the callback address, the hash of the hook that emitted the transaction, the nonce of the emission, and the ID of the parent transaction. |\n| `TransactionType` | String    | UInt16              | Yes       | The type of the transaction that was emitted.                                                                                                                                                                                                            |\n| `Account`         | String    | Account             | Yes       | The account that emitted the transaction.                                                                                                                                                                                                                |\n| `Fee`             | String    | Amount              | Yes       | The fee paid for the transaction.                                                                                                                                                                                                                        |\n| `Sequence`        | Number    | UInt32              | Yes       | The sequence number of the transaction.                                                                                                                                                                                                                  |\n| `SigningPubKey`   | String    | Blob                | Yes       | The public key that signs the transaction.                                                                                                                                                                                                               |\n\nThe `EmittedTxn` object also contains all the fields of the original transaction.\n\n### EmitDetails Fields\n\nAn `EmitDetails` object has the following fields:\n\n| Field             | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                                     |\n| ----------------- | --------- | ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `EmitGeneration`  | Number    | UInt32              | Yes       | This field keeps track of a chain of emitted transactions that in turn cause other transactions to be emitted.                                                                                                                                                                  |\n| `EmitBurden`      | String    | UInt64              | Yes       | This field is a heuristic for detecting forkbombs. Fees are based on burden and will increase exponentially when a chain reaction is started to prevent the network becoming overun by self-reinforcing emitted transactions.                                                   |\n| `EmitParentTxnID` | String    | Hash256             | Yes       | The Hook Execution that emitted the transaction is connected to the Originating Transaction. Therefore this field is always required for the efficient tracing of behaviour.                                                                                                    |\n| `EmitNonce`       | String    | Hash256             | Yes       | Emitted Transactions would be identical with the same fields and therefore have identical transaction hashes if a nonce were not used. However every node on the network needs to agree on the nonce, so a special Hook API to produce a deterministic nonce is made available. |\n| `EmitCallback`    | String    | AccountID           | No        | This field is used by xahld when it needs to intitate a callback, such that it knows which Hook and account to initate the callback on. Callbacks happen when an emitted transaction is accepted into a ledger.                                                                 |\n| `EmitHookHash`    | String    | Hash256             | Yes       | The SHA512H of the Hook at the time it was executed.                                                                                                                                                                                                                            |","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/emitted-txn.mdx","42c224459935e87c","docs/protocol-reference/ledger-data/ledger-objects-types/fee-settings",{"id":1683,"data":1685,"body":1690,"filePath":1691,"digest":1692,"deferredRender":14},{"title":1686,"editUrl":14,"head":1687,"template":16,"sidebar":1688,"pagefind":14,"draft":18},"Fee Settings",[],{"hidden":18,"attrs":1689},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L115-L120)\n\nThe `FeeSettings` object type contains the current base transaction cost and reserve amounts as determined by fee voting. Each ledger version contains **at most one** `FeeSettings` object.\n\n### Example JSON\n\nExample `FeeSettings` object:\n\n```json\n{\n   \"BaseFee\": \"000000000000000A\",\n   \"Flags\": 0,\n   \"LedgerEntryType\": \"FeeSettings\",\n   \"ReferenceFeeUnits\": 10,\n   \"ReserveBase\": 20000000,\n   \"ReserveIncrement\": 5000000,\n   \"XahauActivationLgrSeq\": 0,\n   \"NetworkID\": 21337,\n   \"AccountCount\": 0,\n   \"index\": \"4BC50C9B0D8515D3EAAE1E74B29A95804346C491EE1A95BF25E4AAB854A6A651\"\n}\n```\n\n### Fields\n\nThe `FeeSettings` object has the following fields:\n\n| Name                    | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                      |\n| ----------------------- | --------- | ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `BaseFee`               | String    | UInt64              | Yes       | The transaction cost of the \"reference transaction\" in drops of XAH as hexadecimal.                                                              |\n| `Flags`                 | Number    | UInt32              | Yes       | A bit-map of boolean flags enabled for this object. Currently, the protocol defines no flags for `FeeSettings` objects. The value is always `0`. |\n| `LedgerEntryType`       | String    | UInt16              | Yes       | The value `0x0073`, mapped to the string `FeeSettings`, indicates that this object contains the ledger's fee settings.                           |\n| `ReferenceFeeUnits`     | Number    | UInt32              | Yes       | The `BaseFee` translated into \"fee units\".                                                                                                       |\n| `ReserveBase`           | Number    | UInt32              | Yes       | The base reserve for an account in Xahau, as drops of XAH.                                                                                       |\n| `ReserveIncrement`      | Number    | UInt32              | Yes       | The incremental owner reserve for owning objects, as drops of XAH.                                                                               |\n| `XahauActivationLgrSeq` | Number    | UInt32              | No        | The ledger index where Xahau genesis was activated.                                                                                              |\n| `AccountCount`          | Number    | UInt32              | No        | The number of accounts created on the Xahau network.                                                                                             |\n| `NetworkID`             | Number    | UInt32              | No        | The ID of the network                                                                                                                            |\n\n**Warning:** The JSON format for this ledger object type is unusual. The `BaseFee`, `ReserveBase`, and `ReserveIncrement` indicate drops of XAH but _**not**_ in the usual format for \\[specifying XAH]\\[Currency Amount].\n\nIf the _\\[XAHFees amendment]\\[]_ is enabled, the `FeeSettings` object has these fields instead:\n\n| Name                    | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                     |\n| ----------------------- | --------- | ------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| `BaseFeeDrops`          | String    | Amount              | Yes       | The transaction cost of the \"reference transaction\" in drops of XAH.                                                                            |\n| `Flags`                 | Number    | UInt32              | Yes       | A bitmap of boolean flags enabled for this object. Currently, the protocol defines no flags for `FeeSettings` objects. The value is always `0`. |\n| `LedgerEntryType`       | String    | UInt16              | Yes       | The value `0x0073`, mapped to the string `FeeSettings`, indicates that this object contains the ledger's fee settings.                          |\n| `ReserveBaseDrops`      | String    | Amount              | Yes       | The base reserve for an account in the XAH Ledger, as drops of XAH.                                                                             |\n| `ReserveIncrementDrops` | String    | Amount              | Yes       | The incremental owner reserve for owning objects, as drops of XAH.                                                                              |\n| `XahauActivationLgrSeq` | Number    | UInt32              | No        | The ledger index where Xahau genesis was activated.                                                                                             |\n| `AccountCount`          | Number    | UInt32              | No        | The number of accounts created on the Xahau network.                                                                                            |\n| `NetworkID`             | Number    | UInt32              | No        |                                                                                                                                                 |\n\n### FeeSettings ID Format\n\nThe `FeeSettings` object ID is the hash of the `FeeSettings` space key (`0x0065`) only. This means that the ID of the `FeeSettings` object in a ledger is always:\n\n```\n4BC50C9B0D8515D3EAAE1E74B29A95804346C491EE1A95BF25E4AAB854A6A651\n```","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/fee-settings.mdx","bd34fac28eb37102","docs/protocol-reference/ledger-data/ledger-objects-types/escrow",{"id":1693,"data":1695,"body":1699,"filePath":1700,"digest":1701,"deferredRender":14},{"title":365,"editUrl":14,"head":1696,"template":16,"sidebar":1697,"pagefind":14,"draft":18},[],{"hidden":18,"attrs":1698},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/c6b6d82a754fe449cc533e18659df483c10a5c98/src/ripple/protocol/impl/LedgerFormats.cpp#L90-L101)\n\n_(Added by the \\[Escrow amendment]\\[].)_\n\nThe `Escrow` object type represents a held payment of XAH or IOU waiting to be executed or canceled. An \\[EscrowCreate transaction]\\[] creates an `Escrow` object in the ledger. A successful \\[EscrowFinish]\\[] or \\[EscrowCancel]\\[] transaction deletes the object.&#x20;\n\nIf the `Escrow` object has a [_crypto-condition_](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02), the payment can only succeed if an EscrowFinish transaction provides the corresponding _fulfillment_ that satisfies the condition. (The only supported crypto-condition type is [PREIMAGE-SHA-256](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02#section-8.1).) If the `Escrow` object has a `FinishAfter` time, the held payment can only execute after that time.\n\nAn `Escrow` object is associated with two addresses:\n\n* The owner, who provides the XAH or IOU when creating the `Escrow` object. If the held payment is canceled, the XAH or IOU returns to the owner.\n* The destination, where the XAH or IOU is paid when the held payment succeeds. The destination can be the same as the owner.\n\n### Example JSON\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"Amount\": \"10000\",\n    \"CancelAfter\": 545440232,\n    \"Condition\": \"A0258020A82A88B2DF843A54F58772E4A3861866ECDB4157645DD9AE528C1D3AEEDABAB6810120\",\n    \"Destination\": \"ra5nK24KXen9AHvsdFTKHSANinZseWnPcX\",\n    \"DestinationTag\": 23480,\n    \"FinishAfter\": 545354132,\n    \"Flags\": 0,\n    \"LedgerEntryType\": \"Escrow\",\n    \"OwnerNode\": \"0000000000000000\",\n    \"DestinationNode\": \"0000000000000000\",\n    \"PreviousTxnID\": \"C44F2EB84196B9AD820313DBEBA6316A15C9A2D35787579ED172B87A30131DA7\",\n    \"PreviousTxnLgrSeq\": 28991004,\n    \"SourceTag\": 11747,\n    \"index\": \"DC5F3851D8A1AB622F957761E5963BC5BD439D5C24AC6AD7AC4523F0640244AC\"\n}\n```\n\n### Fields\n\nAn `Escrow` object has the following fields:\n\n| Name                | JSON Type        | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                                     |\n| ------------------- | ---------------- | ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Account`           | String           | AccountID           | Yes       | The address of the owner (sender) of this held payment. This is the account that provided the amount, and gets it back if the held payment is canceled.                                                                                                                         |\n| `Amount`            | String or Object | Amount              | Yes       | The amount to be delivered by the held payment.                                                                                                                                                                                                                                 |\n| `CancelAfter`       | Number           | UInt32              | No        | The held payment can be canceled if and only if this field is present _and_ the time it specifies has passed. Specifically, this is specified as \\[seconds since the Ripple Epoch]\\[] and it \"has passed\" if it's earlier than the close time of the previous validated ledger. |\n| `Condition`         | String           | Blob                | No        | A [PREIMAGE-SHA-256 crypto-condition](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02#section-8.1), as hexadecimal. If present, the \\[EscrowFinish transaction]\\[] must contain a fulfillment that satisfies this condition.                                      |\n| `Destination`       | String           | AccountID           | Yes       | The destination address where the amount is paid if the held payment is successful.                                                                                                                                                                                             |\n| `DestinationNode`   | String           | UInt64              | No        | A hint indicating which page of the destination's owner directory links to this object, in case the directory consists of multiple pages. Omitted on escrows created before enabling the \\[fix1523 amendment]\\[].                                                               |\n| `DestinationTag`    | Number           | UInt32              | No        | An arbitrary tag to further specify the destination for this held payment, such as a hosted recipient at the destination address.                                                                                                                                               |\n| `FinishAfter`       | Number           | UInt32              | No        | The time, in \\[seconds since the Ripple Epoch]\\[], after which this held payment can be finished. Any \\[EscrowFinish transaction]\\[] before this time fails. (Specifically, this is compared with the close time of the previous validated ledger.)                             |\n| `Flags`             | Number           | UInt32              | Yes       | A bit-map of boolean flags enabled for this object. Currently, the protocol defines no flags for `Escrow` objects. The value is always `0`.                                                                                                                                     |\n| `LedgerEntryType`   | String           | UInt16              | Yes       | The value `0x0075`, mapped to the string `Escrow`, indicates that this object is an `Escrow` object.                                                                                                                                                                            |\n| `OwnerNode`         | String           | UInt64              | Yes       | A hint indicating which page of the owner directory links to this object, in case the directory consists of multiple pages. **Note:** The object does not contain a direct link to the owner directory containing it, since that value can be derived from the `Account`.       |\n| `PreviousTxnID`     | String           | Hash256             | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                                                                                                                |\n| `PreviousTxnLgrSeq` | Number           | UInt32              | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                                                                                                                |\n| `SourceTag`         | Number           | UInt32              | No        | An arbitrary tag to further specify the source for this held payment, such as a hosted recipient at the owner's address.                                                                                                                                                        |\n| `TransferRate`      | Number           | UInt32              | No        |                                                                                                                                                                                                                                                                                 |\n\n### Escrow ID Format\n\nThe ID of an `Escrow` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The Escrow space key (`0x0075`)\n* The AccountID of the sender of the \\[EscrowCreate transaction]\\[] that created the `Escrow` object\n* The Sequence number of the \\[EscrowCreate transaction]\\[] that created the `Escrow` object If the EscrowCreate transaction used a Ticket, use the `TicketSequence` value instead.","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/escrow.mdx","763228c8f11d3d5f","docs/protocol-reference/ledger-data/ledger-objects-types/hook-definition",{"id":1702,"data":1704,"body":1709,"filePath":1710,"digest":1711,"deferredRender":14},{"title":1705,"editUrl":14,"head":1706,"template":16,"sidebar":1707,"pagefind":14,"draft":18},"Hook Definition",[],{"hidden":18,"attrs":1708},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L157-L170)\n\n_(Added by the \\[Hooks amendment]\\[].)_\n\nA `HookDefinition` object describes a hook, which is a piece of code that is executed in response to certain transactions. The hook can modify the transaction, emit new transactions, or perform other actions.\n\n### Example JSON\n\n```json\n{\n  \"HookHash\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\",\n  \"HookOn\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n  \"HookNamespace\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n  \"HookParameters\": {\n    \"HookParameter\": {\n      \"HookParameterName\": \"DEADBEEF\",\n      \"HookParameterValue\": \"DEADBEEF\",\n    }\n  },\n  \"HookApiVersion\": 1,\n  \"CreateCode\": \"5463C6E08862A1FAE5EDAC12D70ADB16546A1F674930521295BC082494B62924\",\n  \"HookSetTxnID\": \"0000000000000000\",\n  \"ReferenceCount\": \"6\",\n  \"Fee\": \"100000000\",\n  \"HookCallbackFee\": \"200000000\",\n  \"LedgerEntryType\": \"HookDefinition\",\n  \"index\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\"\n}\n```\n\n### Fields\n\nA `HookDefinition` object has the following fields:\n\n| Field             | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                       |\n| ----------------- | --------- | ------------------- | --------- | ----------------------------------------------------------------------------------------------------------------- |\n| `HookHash`        | String    | Hash256             | Yes       | The unique identifier of the hook.                                                                                |\n| `HookOn`          | String    | Hash256             | Yes       | The transaction/s on which the hook is triggered.                                                                 |\n| `HookCanEmit`     | String    | Hash256             | No        | The transaction/s which the hook can emit.                                                                        |\n| `HookNamespace`   | String    | Hash256             | Yes       | The namespace of the hook.                                                                                        |\n| `HookParameters`  | String    | Vector              | Yes       | The parameters that the hook accepts.                                                                             |\n| `HookApiVersion`  | Number    | UInt16              | Yes       | The version of the hook API that the hook uses.                                                                   |\n| `CreateCode`      | String    | VL                  | Yes       | The code that is executed when the hook is created.                                                               |\n| `HookSetTxnID`    | String    | Hash256             | Yes       | The ID of the transaction that set the hook.                                                                      |\n| `ReferenceCount`  | String    | UInt64              | Yes       | The number of references to the hook.                                                                             |\n| `Fee`             | String    | Amount              | Yes       | The fee for executing the hook.                                                                                   |\n| `HookCallbackFee` | String    | Amount              | No        | The fee for executing the hook's callback function.                                                               |\n| `LedgerEntryType` | String    | UInt16              | Yes       | The value `0x0043`, mapped to the string `HookDefinition`, indicates that this object is a HookDefinition object. |\n\n#### Hook Definition ID Format\n\nThe ID of a `HookDefinition` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The HookDefinition space key (`0x0044`)\n* The `HookHash` of the hook","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/hook-definition.mdx","0a7475c2881b468c","docs/protocol-reference/ledger-data/ledger-objects-types/hook-state",{"id":1712,"data":1714,"body":1719,"filePath":1720,"digest":1721,"deferredRender":14},{"title":1715,"editUrl":14,"head":1716,"template":16,"sidebar":1717,"pagefind":14,"draft":18},"Hook State",[],{"hidden":18,"attrs":1718},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L157-L170)\n\n_(Added by the \\[Hooks amendment]\\[].)_\n\nA `HookState` object describes the state of a hook, which is a piece of code running on Xahau that can interact with transactions. The `HookState` object stores the state of the hook, which can be modified by the hook's code.\n\n### Example JSON\n\n```json\n{\n  \"OwnerNode\": \"0000000000000000\",\n  \"HookStateKey\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\",\n  \"HookStateData\": \"46060241FABCF692D4D934BA2A6C4427CD4279083E38C77CBE642243E43BE291\",\n  \"LedgerEntryType\": \"HookState\",\n  \"index\": \"5463C6E08862A1FAE5EDAC12D70ADB16546A1F674930521295BC082494B62924\"\n}\n```\n\n### Fields\n\nA `HookState` object has the following fields:\n\n| Field             | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                   |\n| ----------------- | --------- | ------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `OwnerNode`       | String    | UInt64              | Yes       | A hint indicating which page of the owner's directory links to this object, in case the directory consists of multiple pages. |\n| `HookStateKey`    | String    | Hash256             | Yes       | The key that uniquely identifies this hook state.                                                                             |\n| `HookStateData`   | String    | VL                  | Yes       | The data stored by the hook. This can be any data that the hook's code decides to store.                                      |\n| `LedgerEntryType` | String    | UInt16              | Yes       | The value `0x0043`, mapped to the string `HookState`, indicates that this object is a HookState object.                       |\n\n#### HookState ID Format\n\n[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/Indexes.cpp#L193-L200)\n\nThe ID of a `HookState` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The HookState space key (`0x0076`)\n* The AccountID of the account that owns the hook\n* The `HookStateKey` of the `HookState` object\n* The `HookNamespace` of the hook.","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/hook-state.mdx","48d8e02f8c2af8a0","docs/protocol-reference/ledger-data/ledger-objects-types/hook",{"id":1722,"data":1724,"body":1729,"filePath":1730,"digest":1731,"deferredRender":14},{"title":1725,"editUrl":14,"head":1726,"template":16,"sidebar":1727,"pagefind":14,"draft":18},"Hook",[],{"hidden":18,"attrs":1728},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L157-L170)\n\n_(Added by the \\[Hooks amendment]\\[].)_\n\nA `Hook` object describes a smart contract, which can be triggered by a transaction to perform predefined operations. The operations are defined by the `Hook` creator and can interact with the ledger and transactions.\n\n### Example JSON\n\n```json\n{\n  \"Account\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\",\n  \"OwnerNode\": \"0000000000000000\",\n  \"PreviousTxnID\": \"5463C6E08862A1FAE5EDAC12D70ADB16546A1F674930521295BC082494B62924\",\n  \"PreviousTxnLgrSeq\": 6,\n  \"Hooks\": [\n    {\n      \"HookHash\": \"46060241FABCF692D4D934BA2A6C4427CD4279083E38C77CBE642243E43BE291\",\n      \"HookParameters\": []\n    }\n  ],\n  \"LedgerEntryType\": \"Hook\",\n  \"index\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\"\n}\n```\n\n### Fields\n\nA `Hook` object has the following fields:\n\n| Field               | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                     |\n| ------------------- | --------- | ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Account`           | String    | Account             | Yes       | The account that created the Hook.                                                                                                                                              |\n| `OwnerNode`         | String    | UInt64              | Yes       | A hint indicating which page of the owner's directory links to this object, in case the directory consists of multiple pages.                                                   |\n| `PreviousTxnID`     | String    | Hash256             | Yes       | The ID of the transaction that most recently modified this object.                                                                                                              |\n| `PreviousTxnLgrSeq` | Number    | UInt32              | Yes       | The \\[ledger index]\\[] of the ledger that contains the transaction that most recently modified this object.                                                                     |\n| `Hooks`             | Array     | Array               | Yes       | An array of hook objects. Each object has the following fields: `HookHash`, `CreateCode`, `HookGrants`, `HookNamespace`, `HookParameters`, `HookOn`, `HookApiVersion`, `Flags`. |\n| `LedgerEntryType`   | String    | UInt16              | Yes       | The value `0x0043`, mapped to the string `Hook`, indicates that this object is a Hook object.                                                                                   |\n\n### Hook Fields\n\nThe following fields are used in the hook object:\n\n| Field            | JSON Type | Internal Type | Description                    |\n| ---------------- | --------- | ------------- | ------------------------------ |\n| `HookHash`       | String    | Hash256       | The hash of the hook.          |\n| `HookParameters` | Array     | Array         | The parameters of the hook.    |\n| `Flags`          | Number    | UInt32        | Additional flags for the hook. |\n\n#### Hook ID Format\n\nThe ID of a `Hook` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The Hook space key (`0x0048`)\n* The AccountID of the sender of the \\[SetHook transaction]\\[] that created the `Hook` object","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/hook.mdx","0475e29d6dec3c45","docs/protocol-reference/ledger-data/ledger-objects-types/ledger-hashes",{"id":1732,"data":1734,"body":1739,"filePath":1740,"digest":1741,"deferredRender":14},{"title":1735,"editUrl":14,"head":1736,"template":16,"sidebar":1737,"pagefind":14,"draft":18},"Ledger Hashes",[],{"hidden":18,"attrs":1738},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L104-L108)\n\n(Not to be confused with the \\[\"ledger hash\" string data type]\\[Hash], which uniquely identifies a ledger version. This section describes the `LedgerHashes` ledger object type.)\n\nThe `LedgerHashes` object type contains a history of prior ledgers that led up to this ledger version, in the form of their hashes. Objects of this ledger type are modified automatically when closing a ledger. (This is one of the only times a ledger's state data is modified without a transaction or pseudo-transaction.) The `LedgerHashes` objects exist to make it possible to look up a previous ledger's hash with only the current ledger version and at most one lookup of a previous ledger version.\n\nThere are two kinds of `LedgerHashes` object. Both types have the same fields. Each ledger version contains:\n\n* Exactly one \"recent history\" `LedgerHashes` object\n* A number of \"previous history\" `LedgerHashes` objects based on the current ledger index (that is, the length of the ledger history). Specifically, Xahau adds a new \"previous history\" object every 65536 ledger versions.\n\n**Note:** As an exception, a new genesis ledger has no `LedgerHashes` objects at all, because it has no ledger history.\n\nExample `LedgerHashes` object (trimmed for length):\n\n```json\n{\n  \"LedgerEntryType\": \"LedgerHashes\",\n  \"Flags\": 0,\n  \"FirstLedgerSequence\": 2,\n  \"LastLedgerSequence\": 33872029,\n  \"Hashes\": [\n    \"D638208ADBD04CBB10DE7B645D3AB4BA31489379411A3A347151702B6401AA78\",\n    \"254D690864E418DDD9BCAC93F41B1F53B1AE693FC5FE667CE40205C322D1BE3B\",\n    \"A2B31D28905E2DEF926362822BC412B12ABF6942B73B72A32D46ED2ABB7ACCFA\",\n    \"AB4014846DF818A4B43D6B1686D0DE0644FE711577C5AB6F0B2A21CCEE280140\",\n    \"3383784E82A8BA45F4DD5EF4EE90A1B2D3B4571317DBAC37B859836ADDE644C1\",\n    ... (up to 256 ledger hashes) ...\n  ],\n  \"index\": \"B4979A36CDC7F3D3D5C31A4EAE2AC7D7209DDA877588B9AFC66799692AB0D66B\"\n}\n```\n\nA `LedgerHashes` object has the following fields:\n\n| Name                  | JSON Type        | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                                                                                                                                                        |\n| --------------------- | ---------------- | ------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `FirstLedgerSequence` | Number           | UInt32              | Yes       | **DEPRECATED** Do not use. (The \"recent hashes\" object of the production Xahau has the value `2` in this field as a result of a previous `rippled` software. That value gets carried forward as the \"recent hashes\" object is updated. New \"previous history\" objects do not have this field, nor do \"recent hashes\" objects in parallel networks started with more recent versions of `rippled`.) |\n| `Flags`               | Number           | UInt32              | Yes       | A bit-map of boolean flags enabled for this object. Currently, the protocol defines no flags for `LedgerHashes` objects. The value is always `0`.                                                                                                                                                                                                                                                  |\n| `Hashes`              | Array of Strings | Vector256           | Yes       | An array of up to 256 ledger hashes. The contents depend on which sub-type of `LedgerHashes` object this is.                                                                                                                                                                                                                                                                                       |\n| `LastLedgerSequence`  | Number           | UInt32              | Yes       | The \\[Ledger Index]\\[] of the last entry in this object's `Hashes` array.                                                                                                                                                                                                                                                                                                                          |\n| `LedgerEntryType`     | String           | UInt16              | Yes       | The value `0x0068`, mapped to the string `LedgerHashes`, indicates that this object is a list of ledger hashes.                                                                                                                                                                                                                                                                                    |\n\n### Recent History LedgerHashes\n\nThere is exactly one `LedgerHashes` object of the \"recent history\" sub-type in every ledger after the genesis ledger. This object contains the identifying hashes of the most recent 256 ledger versions (or fewer, if the ledger history has less than 256 ledgers total) in the `Hashes` array. Whenever a new ledger is closed, part of the process of closing it involves updating the \"recent history\" object with the hash of the previous ledger version this ledger version is derived from (also known as this ledger version's _parent ledger_). When there are more than 256 hashes, the oldest one is removed.\n\nUsing the \"recent history\" `LedgerHashes` object of a given ledger, you can get the hash of any ledger index within the 256 ledger versions before the given ledger version.\n\n### Previous History LedgerHashes\n\nThe \"previous history\" `LedgerHashes` entries collectively contain the hash of every 256th ledger version (also called \"flag ledgers\") in the full history of the ledger. When the child of a flag ledger closes, the flag ledger's hash is added to the `Hashes` array of the newest \"previous history\" `LedgerHashes` object. Every 65536 ledgers, `rippled` creates a new `LedgerHashes` object, so that each \"previous history\" object has the hashes of 256 flag ledgers.\n\n**Note:** The oldest \"previous history\" `LedgerHashes` object contains only 255 entries because the genesis ledger has a ledger index of 1, not 0.\n\nThe \"previous history\" `LedgerHashes` objects act as a [skip list](https://en.wikipedia.org/wiki/Skip_list) so you can get the hash of any historical flag ledger from its index. From there, you can use that flag ledger's \"recent history\" object to get the hash of any other ledger.\n\n### LedgerHashes ID Formats\n\nThere are two formats for `LedgerHashes` object IDs, depending on whether the object is a \"recent history\" sub-type or a \"previous history\" sub-type.\n\nThe **\"recent history\"** `LedgerHashes` object has an ID that is the \\[SHA-512Half]\\[] of the `LedgerHashes` space key (`0x0073`). In other words, the \"recent history\" always has the ID `B4979A36CDC7F3D3D5C31A4EAE2AC7D7209DDA877588B9AFC66799692AB0D66B`.\n\nThe **\"previous history\"** `LedgerHashes` objects have an ID that is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The `LedgerHashes` space key (`0x0073`)\n*   The 32-bit \\[Ledger Index]\\[] of a flag ledger in the object's `Hashes` array, divided by 65536.\n\n    **Tip:** Dividing by 65536 keeps the most significant 16 bits, which are the same for all the flag ledgers listed in a \"previous history\" object, and only those ledgers. You can use this fact to look up the `LedgerHashes` object that contains the hash of any flag ledger.","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/ledger-hashes.mdx","485b1747fb88971f","docs/protocol-reference/ledger-data/ledger-objects-types/negative-unl",{"id":1742,"data":1744,"body":1749,"filePath":1750,"digest":1751,"deferredRender":14},{"title":1745,"editUrl":14,"head":1746,"template":16,"sidebar":1747,"pagefind":14,"draft":18},"Negative UNL",[],{"hidden":18,"attrs":1748},{},"_(Added by the \\[NegativeUNL amendment]\\[].)_\n\nThe `NegativeUNL` object type contains the current status of the Negative UNL, a list of trusted validators currently believed to be offline.\n\nEach ledger version contains **at most one** `NegativeUNL` object. If no validators are currently disabled or scheduled to be disabled, there is no `NegativeUNL` object in the ledger.\n\n### Example JSON\n\n```json\n{\n  \"DisabledValidators\": [\n    {\n      \"DisabledValidator\": {\n        \"FirstLedgerSequence\": 1609728,\n        \"PublicKey\": \"ED6629D456285AE3613B285F65BBFF168D695BA3921F309949AFCD2CA7AFEC16FE\"\n      }\n    }\n  ],\n  \"Flags\": 0,\n  \"LedgerEntryType\": \"NegativeUNL\",\n  \"index\": \"2E8A59AA9D3B5B186B0B9E0F62E6C02587CA74A4D778938E957B6357D364B244\"\n}\n```\n\nA `NegativeUNL` object has the following fields:\n\n| Name                  | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                           |\n| --------------------- | --------- | ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------- |\n| `DisabledValidators`  | Array     | Array               | No        | A list of `DisabledValidator` objects (see below), each representing a trusted validator that is currently disabled.  |\n| `Flags`               | Number    | UInt32              | Yes       | A bit-map of boolean flags. No flags are defined for the NegativeUNL object type, so this value is always `0`.        |\n| `LedgerEntryType`     | String    | UInt16              | Yes       | The value `0x004E`, mapped to the string `NegativeUNL`, indicates that this object is the Negative UNL.               |\n| `ValidatorToDisable`  | String    | Blob                | No        | The public key of a trusted validator that is scheduled to be disabled in the next flag ledger.                       |\n| `ValidatorToReEnable` | String    | Blob                | No        | The public key of a trusted validator in the Negative UNL that is scheduled to be re-enabled in the next flag ledger. |\n\n### DisabledValidator Objects\n\nEach `DisabledValidator` object represents one disabled validator. In JSON, a `DisabledValidator` object has one field, `DisabledValidator`, which in turn contains another object with the following fields:\n\n| Name                  | JSON Type | \\[Internal Type]\\[] | Description                                                              |\n| --------------------- | --------- | ------------------- | ------------------------------------------------------------------------ |\n| `FirstLedgerSequence` | Number    | UInt32              | The \\[ledger index]\\[] when the validator was added to the Negative UNL. |\n| `PublicKey`           | String    | Blob                | The master public key of the validator, in hexadecimal.                  |\n\n### NegativeUNL ID Format\n\nThe `NegativeUNL` object ID is the hash of the `NegativeUNL` space key (`0x004E`) only. This means that the ID of the `NegativeUNL` object in a ledger is always:\n\n```\n2E8A59AA9D3B5B186B0B9E0F62E6C02587CA74A4D778938E957B6357D364B244\n```","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/negative-unl.mdx","da73121d884a4794","docs/protocol-reference/ledger-data/ledger-objects-types/offer",{"id":1752,"data":1754,"body":1758,"filePath":1759,"digest":1760,"deferredRender":14},{"title":335,"editUrl":14,"head":1755,"template":16,"sidebar":1756,"pagefind":14,"draft":18},[],{"hidden":18,"attrs":1757},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/5d2d88209f1732a0f8d592012094e345cbe3e675/src/ripple/protocol/impl/LedgerFormats.cpp#L57)\n\nThe `Offer` ledger entry describes an Offer to exchange currencies in Xahau's decentralized exchange. (In finance, this is more traditionally known as an _order_.) An \\[OfferCreate transaction]\\[] only creates an `Offer` entry in the ledger when the Offer cannot be fully executed immediately by consuming other Offers already in the ledger.\n\nAn Offer can become unfunded through other activities in the network while remaining in the ledger. When processing transactions, the network automatically prunes any unfunded Offers that those transactions come across. (Otherwise, unfunded Offers remain because _only_ transactions can change the ledger state.)\n\n### Example JSON\n\n```json\n{\n    \"Account\": \"rBqb89MRQJnMPq8wTwEbtz4kvxrEDfcYvt\",\n    \"BookDirectory\": \"ACC27DE91DBA86FC509069EAF4BC511D73128B780F2E54BF5E07A369E2446000\",\n    \"BookNode\": \"0000000000000000\",\n    \"Flags\": 131072,\n    \"LedgerEntryType\": \"Offer\",\n    \"OwnerNode\": \"0000000000000000\",\n    \"PreviousTxnID\": \"F0AB71E777B2DA54B86231E19B82554EF1F8211F92ECA473121C655BFC5329BF\",\n    \"PreviousTxnLgrSeq\": 14524914,\n    \"Sequence\": 866,\n    \"TakerGets\": {\n        \"currency\": \"XAG\",\n        \"issuer\": \"r9Dr5xwkeLegBeXq6ujinjSBLQzQ1zQGjH\",\n        \"value\": \"37\"\n    },\n    \"TakerPays\": \"79550000000\",\n    \"index\": \"96F76F27D8A327FC48753167EC04A46AA0E382E6F57F32FD12274144D00F1797\"\n}\n```\n\n### Fields\n\nAn `Offer` object has the following fields:\n\n| Name                | JSON Type        | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                              |\n| ------------------- | ---------------- | ------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `Account`           | String           | AccountID           | Yes       | The address of the account that owns this Offer.                                                                                                                                                                                                                         |\n| `BookDirectory`     | String           | Hash256             | Yes       | The ID of the Offer Directory that links to this Offer.                                                                                                                                                                                                                  |\n| `BookNode`          | String           | UInt64              | Yes       | A hint indicating which page of the offer directory links to this object, in case the directory consists of multiple pages.                                                                                                                                              |\n| `Expiration`        | Number           | UInt32              | No        | Indicates the time after which this Offer is considered unfunded. See \\[Specifying Time]\\[] for details.                                                                                                                                                                 |\n| `Flags`             | Number           | UInt32              | Yes       | A bit-map of boolean flags enabled for this offer.                                                                                                                                                                                                                       |\n| `LedgerEntryType`   | String           | UInt16              | Yes       | The value `0x006F`, mapped to the string `Offer`, indicates that this object describes an Offer.                                                                                                                                                                         |\n| `OwnerNode`         | String           | UInt64              | Yes       | A hint indicating which page of the owner directory links to this object, in case the directory consists of multiple pages. **Note:** The offer does not contain a direct link to the owner directory containing it, since that value can be derived from the `Account`. |\n| `PreviousTxnID`     | String           | Hash256             | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                                                                                                         |\n| `PreviousTxnLgrSeq` | Number           | UInt32              | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                                                                                                         |\n| `Sequence`          | Number           | UInt32              | Yes       | The `Sequence` value of the \\[OfferCreate]\\[] transaction that created this `Offer` object. Used in combination with the `Account` to identify this Offer.                                                                                                               |\n| `TakerPays`         | String or Object | Amount              | Yes       | The remaining amount and type of currency requested by the Offer creator.                                                                                                                                                                                                |\n| `TakerGets`         | String or Object | Amount              | Yes       | The remaining amount and type of currency being provided by the Offer creator.                                                                                                                                                                                           |\n\n### Offer Flags\n\nThere are several options that can be either enabled or disabled when an \\[OfferCreate transaction]\\[] creates an offer object. In the ledger, flags are represented as binary values that can be combined with bitwise-or operations. The bit values for the flags in the ledger are different than the values used to enable or disable those flags in a transaction. Ledger flags have names that begin with **`lsf`**.\n\n`Offer` objects can have the following flag values:\n\n\u003Ctable data-header-hidden>\u003Cthead>\u003Ctr>\u003Cth width=\"135\">\u003C/th>\u003Cth>\u003C/th>\u003Cth>\u003C/th>\u003Cth>\u003C/th>\u003Cth>\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Flag Name\u003C/td>\u003Ctd>Hex Value\u003C/td>\u003Ctd>Decimal Value\u003C/td>\u003Ctd>Corresponding OfferCreate Flag\u003C/td>\u003Ctd>Description\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfPassive\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00010000\u003C/code>\u003C/td>\u003Ctd>65536\u003C/td>\u003Ctd>\u003Ccode>tfPassive\u003C/code>\u003C/td>\u003Ctd>The object was placed as a passive Offer. This has no effect on the object in the ledger.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>lsfSell\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00020000\u003C/code>\u003C/td>\u003Ctd>131072\u003C/td>\u003Ctd>\u003Ccode>tfSell\u003C/code>\u003C/td>\u003Ctd>The object was placed as a sell Offer. This has no effect on the object in the ledger (because \u003Ccode>tfSell\u003C/code> only matters if you get a better rate than you asked for, which cannot happen after the object enters the ledger).\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n### Offer ID Format\n\nThe ID of an `Offer` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The Offer space key (`0x006F`)\n* The AccountID of the account placing the Offer\n*   The Sequence number of the \\[OfferCreate transaction]\\[] that created the Offer.\n\n    If the OfferCreate transaction used a Ticket, use the `TicketSequence` value instead.","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/offer.mdx","db9959290310c3f4","docs/protocol-reference/ledger-data/ledger-objects-types/import-vl-sequence",{"id":1761,"data":1763,"body":1768,"filePath":1769,"digest":1770,"deferredRender":14},{"title":1764,"editUrl":14,"head":1765,"template":16,"sidebar":1766,"pagefind":14,"draft":18},"Import VL Sequence",[],{"hidden":18,"attrs":1767},{},"_(Added by the \\[Import amendment]\\[].)_\n\nThe `ImportVLSequence` helps track and validate the order of operations during the import process. It is used to ensure that the correct sequence of events occurs and to handle any discrepancies or updates to the dUNL on the \"burning\" ledger.\n\n### Example JSON\n\n```json\n{\n  \"LedgerEntryType\": \"ImportVLSequence\",\n  \"Flags\": 0,\n  \"ImportSequence\": 2023102101,\n  \"PublicKey\": \"n9LigbVAi4pQc6pU2KJvQZV5wqJ8C3sVvZvBZUopchH8vqa6PEKy\",\n  \"index\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\"\n}\n```\n\n### Fields\n\nA `ImportVLSequence` object has the following fields:\n\n| Field             | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                           |\n| ----------------- | --------- | ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------- |\n| `LedgerEntryType` | String    | UInt16              | Yes       | The value `0x0049`, mapped to the string `ImportVLSequence`, indicates that this object is a ImportVLSequence object. |\n| `Flags`           | Number    | UInt32              | Yes       | A bit-map of boolean flags. No flags are defined for the `ImportVLSequence` object type, so this value is always `0`. |\n| `ImportSequence`  | Number    | UInt32              | Yes       | The current sequence number of the dUNL list on the \"burning\"  ledger.                                                |\n| `PublicKey`       | String    | Blob                | Yes       | The `PublicKey` of the dUNL list from the \"burning\" ledger.                                                           |\n\n#### Import VL Sequence ID Format\n\nThe ID of a `ImportVLSequence` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The Import VL Sequence space key (`0x0049`)\n* The Public Key of the Import Validator List","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/import-vl-sequence.mdx","87c1b9d3a2ce5a03","docs/protocol-reference/ledger-data/ledger-objects-types",{"id":1771,"data":1773,"body":1778,"filePath":1779,"digest":1780,"deferredRender":14},{"title":1774,"editUrl":14,"head":1775,"template":16,"sidebar":1776,"pagefind":14,"draft":18},"Ledger Objects Types",[],{"hidden":18,"attrs":1777},{},"import { Aside } from '@astrojs/starlight/components';\n\n## Ledger Entry Common Fields \u003Ca href=\"#ledger-entry-common-fields\" id=\"ledger-entry-common-fields\">\u003C/a>\n\n[\\[Source\\]](https://github.com/Xahau/xahaud/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp)\n\nEvery entry in a ledger's state data has the same set of common fields, plus additional fields based on the ledger entry type. Field names are case-sensitive. The common fields for all ledger entries are:\n\n| Field                    | JSON Type | Internal Type | Required? | Description                                                                                                                                                                                                                                                                                                    |\n| ------------------------ | --------- | ------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `index` or `LedgerIndex` | String    | Hash256       | No        | The unique ID for this ledger entry. In JSON, this field is represented with different names depending on the context and API method. (Note, even though this is specified as \"optional\" in the code, every ledger entry should have one unless it's legacy data from very early in the XRP Ledger's history.) |\n| `LedgerEntryType`        | String    | UInt16        | Yes       | The type of ledger entry. Valid ledger entry types include `AccountRoot`, `Offer`, `RippleState`, and others.                                                                                                                                                                                                  |\n| `Flags`                  | Number    | UInt32        | Yes       | Set of bit-flags for this ledger entry.                                                                                                                                                                                                                                                                        |\n| `Remarks`                | Array     | STArray       | No        | Array of remark objects to set, update, or delete (see Remarks Format)                                                                                                                                                                                                                                         |\n\n\u003CAside type=\"caution\">\nCautionIn JSON, the ledger entry ID is in the `index` or `LedgerIndex` field. This is not the same as a ledger index in the `ledger_index` field.\n\u003C/Aside>","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/index.mdx","c172d0cb39ae00d7","docs/protocol-reference/ledger-data/ledger-objects-types/ripple-state",{"id":1781,"data":1783,"body":1788,"filePath":1789,"digest":1790,"deferredRender":14},{"title":1784,"editUrl":14,"head":1785,"template":16,"sidebar":1786,"pagefind":14,"draft":18},"Ripple State",[],{"hidden":18,"attrs":1787},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/5d2d88209f1732a0f8d592012094e345cbe3e675/src/ripple/protocol/impl/LedgerFormats.cpp#L70)\n\nThe `RippleState` object type connects two accounts in a single currency. Conceptually, a `RippleState` object represents two trust lines between the accounts, one from each side. Each account can change the settings for its side of the `RippleState` object, but the balance is a single shared value. A trust line that is entirely in its default state is considered the same as a trust line that does not exist, so `rippled` deletes `RippleState` objects when their properties are entirely default.\n\n### High vs. Low Account\n\nThere can only be one `RippleState` object per currency for any given pair of accounts. Since no account is privileged in Xahau, a `RippleState` object sorts account addresses numerically, to ensure a canonical form. Whichever address is numerically lower when decoded is deemed the \"low account\" and the other is the \"high account\". The net balance of the trust line is stored from the low account's perspective.\n\nThe \"issuer\" for the balance in a trust line depends on whether the balance is positive or negative. If a `RippleState` object shows a positive balance, the high account is the issuer. If the balance is negative, the low account is the issuer. Often, the issuer has its limit set to 0 and the other account has a positive limit, but this is not reliable because limits can change without affecting an existing balance.\n\n### Example JSON\n\n```json\n{\n    \"Balance\": {\n        \"currency\": \"USD\",\n        \"issuer\": \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n        \"value\": \"-10\"\n    },\n    \"Flags\": 393216,\n    \"HighLimit\": {\n        \"currency\": \"USD\",\n        \"issuer\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n        \"value\": \"110\"\n    },\n    \"HighNode\": \"0000000000000000\",\n    \"LedgerEntryType\": \"RippleState\",\n    \"LowLimit\": {\n        \"currency\": \"USD\",\n        \"issuer\": \"rsA2LpzuawewSBQXkiju3YQTMzW13pAAdW\",\n        \"value\": \"0\"\n    },\n    \"LowNode\": \"0000000000000000\",\n    \"PreviousTxnID\": \"E3FE6EA3D48F0C2B639448020EA4F03D4F4F8FFDB243A852A0F59177921B4879\",\n    \"PreviousTxnLgrSeq\": 14090896,\n    \"LockCount\": 1,\n    \"LockedBalance\": {\n        \"currency\": \"USD\",\n        \"issuer\": \"rsA2LpzuawewSBQXkiju3YQTMzW13pAAdW\",\n        \"value\": \"10\"\n    }\n    \"index\": \"9CA88CDEDFF9252B3DE183CE35B038F57282BC9503CDFA1923EF9A95DF0D6F7B\"\n}\n```\n\n### Fields\n\nA `RippleState` object has the following fields:\n\n| Name                | JSON Type | Internal Type | Required? | Description                                                                                                                                                                                                                            |\n| ------------------- | --------- | ------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Balance`           | Object    | Amount        | Yes       | The balance of the trust line, from the perspective of the low account. A negative balance indicates that the high account holds tokens issued by the low account. The issuer in this is always set to the neutral value ACCOUNT_ONE. |\n| `Flags`             | Number    | UInt32        | Yes       | A bit-map of boolean options enabled for this object.                                                                                                                                                                                  |\n| `HighLimit`         | Object    | Amount        | Yes       | The limit that the high account has set on the trust line. The `issuer` is the address of the high account that set this limit.                                                                                                        |\n| `HighNode`          | String    | UInt64        | Yes       | (Omitted in some historical ledgers) A hint indicating which page of the high account's owner directory links to this object, in case the directory consists of multiple pages.                                                        |\n| `HighQualityIn`     | Number    | UInt32        | No        | The inbound quality set by the high account, as an integer in the implied ratio `HighQualityIn`:1,000,000,000. As a special case, the value 0 is equivalent to 1 billion, or face value.                                               |\n| `HighQualityOut`    | Number    | UInt32        | No        | The outbound quality set by the high account, as an integer in the implied ratio `HighQualityOut`:1,000,000,000. As a special case, the value 0 is equivalent to 1 billion, or face value.                                             |\n| `LedgerEntryType`   | String    | UInt16        | Yes       | The value `0x0072`, mapped to the string `RippleState`, indicates that this object is a RippleState object.                                                                                                                            |\n| `LowLimit`          | Object    | Amount        | Yes       | The limit that the low account has set on the trust line. The `issuer` is the address of the low account that set this limit.                                                                                                          |\n| `LowNode`           | String    | UInt64        | Yes       | (Omitted in some historical ledgers) A hint indicating which page of the low account's owner directory links to this object, in case the directory consists of multiple pages.                                                         |\n| `LowQualityIn`      | Number    | UInt32        | No        | The inbound quality set by the low account, as an integer in the implied ratio `LowQualityIn`:1,000,000,000. As a special case, the value 0 is equivalent to 1 billion, or face value.                                                 |\n| `LowQualityOut`     | Number    | UInt32        | No        | The outbound quality set by the low account, as an integer in the implied ratio `LowQualityOut`:1,000,000,000. As a special case, the value 0 is equivalent to 1 billion, or face value.                                               |\n| `PreviousTxnID`     | String    | Hash256       | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                                                                       |\n| `PreviousTxnLgrSeq` | Number    | UInt32        | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                                                                       |\n| `LockCount`         | Number    | UInt32        | No        | The total number of lock balances on a RippleState ledger object                                                                                                                                                                       |\n| `LockedBalance`     | Object    | Amount        | No        | The current amount of locked tokens for a specific trustline                                                                                                                                                                           |\n\n### RippleState Flags\n\nThere are several options which can be either enabled or disabled for a trust line. These options can be changed with a \\[TrustSet transaction]\\[]. In the ledger, flags are represented as binary values that can be combined with bitwise-or operations. The bit values for the flags in the ledger are different than the values used to enable or disable those flags in a transaction. Ledger flags have names that begin with **`lsf`**.\n\nRippleState objects can have the following flag values:\n\n| Flag Name         | Hex Value    | Decimal Value | Corresponding TrustSet Flag | Description                                                                                         |\n| ----------------- | ------------ | ------------- | --------------------------- | --------------------------------------------------------------------------------------------------- |\n| `lsfLowReserve`   | `0x00010000` | 65536         | (None)                      | This RippleState object contributes to the low account's owner reserve.                             |\n| `lsfHighReserve`  | `0x00020000` | 131072        | (None)                      | This RippleState object contributes to the high account's owner reserve.                            |\n| `lsfLowAuth`      | `0x00040000` | 262144        | `tfSetAuth`                 | The low account has authorized the high account to hold tokens issued by the low account.           |\n| `lsfHighAuth`     | `0x00080000` | 524288        | `tfSetAuth`                 | The high account has authorized the low account to hold tokens issued by the high account.          |\n| `lsfLowNoRipple`  | `0x00100000` | 1048576       | `tfSetNoRipple`             | The low account has disabled rippling from this trust line.                                         |\n| `lsfHighNoRipple` | `0x00200000` | 2097152       | `tfSetNoRipple`             | The high account has disabled rippling from this trust line.                                        |\n| `lsfLowFreeze`    | `0x00400000` | 4194304       | `tfSetFreeze`               | The low account has frozen the trust line, preventing the high account from transferring the asset. |\n| `lsfHighFreeze`   | `0x00800000` | 8388608       | `tfSetFreeze`               | The high account has frozen the trust line, preventing the low account from transferring the asset. |\n\n### Contributing to the Owner Reserve\n\nIf an account modifies a trust line to put it in a non-default state, then that trust line counts towards the account's owner reserve. In a RippleState object, the `lsfLowReserve` and `lsfHighReserve` flags indicate which account(s) are responsible for the owner reserve. The `rippled` server automatically sets these flags when it modifies a trust line.\n\nThe values that count towards a trust line's non-default state are as follows:\n\n| High account responsible if...                          | Low account responsible if...                          |\n| ------------------------------------------------------- | ------------------------------------------------------ |\n| `Balance` is negative (the high account holds currency) | `Balance` is positive (the low account holds currency) |\n| `HighLimit` is not `0`                                  | `LowLimit` is not `0`                                  |\n| `LowQualityIn` is not `0` and not `1000000000`          | `HighQualityIn` is not `0` and not `1000000000`        |\n| `LowQualityOut` is not `0` and not `1000000000`         | `HighQualityOut` is not `0` and not `1000000000`       |\n| `lsfHighNoRipple` flag is not in its default state      | `lsfLowNoRipple` flag is not in its default state      |\n| `lsfHighFreeze` flag is enabled                         | `lsfLowFreeze` flag is enabled                         |\n\nThe **`lsfLowAuth`** and **`lsfHighAuth`** flags do not count against the default state, because they cannot be disabled.\n\nThe default state of the two No Ripple flags depends on the state of the `lsfDefaultRipple` flag in their corresponding AccountRoot objects. If Default Ripple is disabled (the default), then the default state of the `lsfNoRipple` flag is _enabled_ for all of an account's trust lines. If an account enables Default Ripple, then the `lsfNoRipple` flag is _disabled_ (rippling is enabled) for an account's trust lines by default.\n\n**Note:** Prior to the introduction of the Default Ripple flag in `rippled` version 0.27.3 (March 10, 2015), the default state for all trust lines was with both No Ripple flags disabled (rippling enabled).\n\nFortunately, `rippled` uses lazy evaluation to calculate the owner reserve. This means that even if an account changes the default state of all its trust lines by changing the Default Ripple flag, that account's reserve stays the same initially. If an account modifies a trust line, `rippled` re-evaluates whether that individual trust line is in its default state and should contribute to the owner reserve.\n\n### RippleState ID Format\n\nThe ID of a RippleState object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The RippleState space key (`0x0072`)\n* The AccountID of the low account\n* The AccountID of the high account\n* The 160-bit currency code of the trust line(s)","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/ripple-state.mdx","b8929025e0637453","docs/protocol-reference/ledger-data/ledger-objects-types/pay-channel",{"id":1791,"data":1793,"body":1798,"filePath":1799,"digest":1800,"deferredRender":14},{"title":1794,"editUrl":14,"head":1795,"template":16,"sidebar":1796,"pagefind":14,"draft":18},"Pay Channel",[],{"hidden":18,"attrs":1797},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/c0a0b79d2d483b318ce1d82e526bd53df83a4a2c/src/ripple/protocol/impl/LedgerFormats.cpp#L180-L198)\n\n_(Added by the \\[PayChan amendment]\\[].)_\n\nThe `PayChannel` object type represents a payment channel. Payment channels enable small, rapid off-ledger payments of XAH or IOU that can be later reconciled with the consensus ledger. A payment channel holds a balance of XAH or IOU that can only be paid out to a specific destination address until the channel is closed. Any unspent XAH or IOU is returned to the channel's owner (the source address that created and funded it) when the channel closes.\n\nThe \\[PaymentChannelCreate transaction]\\[] type creates a `PayChannel` object. The \\[PaymentChannelFund]\\[] and \\[PaymentChannelClaim transaction]\\[] types modify existing `PayChannel` objects.\n\nWhen a payment channel expires, at first it remains on the ledger, because only new transactions can modify ledger contents. Transaction processing automatically closes a payment channel when any transaction accesses it after the expiration. To close an expired channel and return the unspent XAH or IOU to the owner, some addresses must send a new PaymentChannelClaim or PaymentChannelFund transaction accessing the channel.\n\nFor an example of using payment channels, see the Payment Channels Tutorial.\n\n### Example JSON\n\n```json\n{\n    \"Account\": \"rBqb89MRQJnMPq8wTwEbtz4kvxrEDfcYvt\",\n    \"Destination\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"Amount\": \"4325800\",\n    \"Balance\": \"2323423\",\n    \"PublicKey\": \"32D2471DB72B27E3310F355BB33E339BF26F8392D5A93D3BC0FC3B566612DA0F0A\",\n    \"SettleDelay\": 3600,\n    \"Expiration\": 536027313,\n    \"CancelAfter\": 536891313,\n    \"SourceTag\": 0,\n    \"DestinationTag\": 1002341,\n    \"DestinationNode\": \"0000000000000000\",\n    \"Flags\": 0,\n    \"LedgerEntryType\": \"PayChannel\",\n    \"OwnerNode\": \"0000000000000000\",\n    \"PreviousTxnID\": \"F0AB71E777B2DA54B86231E19B82554EF1F8211F92ECA473121C655BFC5329BF\",\n    \"PreviousTxnLgrSeq\": 14524914,\n    \"index\": \"96F76F27D8A327FC48753167EC04A46AA0E382E6F57F32FD12274144D00F1797\"\n}\n```\n\n### Fields\n\nA `PayChannel` object has the following fields:\n\n| Name                | JSON Type        | \\[Internal Type]\\[] | Required? | Description                                                                                                                                                                                                                                                                                                                                                                                     |\n| ------------------- | ---------------- | ------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Account`           | String           | AccountID           | Yes       | The source address that owns this payment channel. This comes from the sending address of the transaction that created the channel.                                                                                                                                                                                                                                                             |\n| `Amount`            | String or Object | Amount              | Yes       | Total amount, that has been allocated to this channel. This includes amounts that has been paid to the destination address. This is initially set by the transaction that created the channel and can be increased if the source address sends a PaymentChannelFund transaction.                                                                                                                |\n| `Balance`           | String or Object | Amount              | Yes       | Total amount already paid out by the channel. The difference between this value and the `Amount` field is how much amount can still be paid to the destination address with PaymentChannelClaim transactions. If the channel closes, the remaining difference is returned to the source address.                                                                                                |\n| `CancelAfter`       | Number           | UInt32              | No        | The immutable expiration time for this payment channel, in \\[seconds since the Ripple Epoch]\\[]. This channel is expired if this value is present and smaller than the previous ledger's `close_time` field. This is optionally set by the transaction that created the channel, and cannot be changed.                                                                                         |\n| `Destination`       | String           | AccountID           | Yes       | The destination address for this payment channel. While the payment channel is open, this address is the only one that can receive the amount from the channel. This comes from the `Destination` field of the transaction that created the channel.                                                                                                                                            |\n| `DestinationTag`    | Number           | UInt32              | No        | An arbitrary tag to further specify the destination for this payment channel, such as a hosted recipient at the destination address.                                                                                                                                                                                                                                                            |\n| `DestinationNode`   | String           | UInt64              | No        | A hint indicating which page of the destination's owner directory links to this object, in case the directory consists of multiple pages. Omitted on payment channels created before enabling the \\[fixPayChanRecipientOwnerDir amendment]\\[].                                                                                                                                                  |\n| `Expiration`        | Number           | UInt32              | No        | The mutable expiration time for this payment channel, in \\[seconds since the Ripple Epoch]\\[]. The channel is expired if this value is present and smaller than the previous ledger's `close_time` field. See Setting Channel Expiration for more details.                                                                                                                                      |\n| `Flags`             | Number           | UInt32              | Yes       | A bit-map of boolean flags enabled for this object. Currently, the protocol defines no flags for `PayChannel` objects. The value is always `0`.                                                                                                                                                                                                                                                 |\n| `LedgerEntryType`   | String           | UInt16              | Yes       | The value `0x0078`, mapped to the string `PayChannel`, indicates that this object is a payment channel object.                                                                                                                                                                                                                                                                                  |\n| `OwnerNode`         | String           | UInt64              | Yes       | A hint indicating which page of the source address's owner directory links to this object, in case the directory consists of multiple pages.                                                                                                                                                                                                                                                    |\n| `PreviousTxnID`     | String           | Hash256             | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                                                                                                                                                                                                                                |\n| `PreviousTxnLgrSeq` | Number           | UInt32              | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                                                                                                                                                                                                                                |\n| `PublicKey`         | String           | Blob                | Yes       | Public key, in hexadecimal, of the key pair that can be used to sign claims against this channel. This can be any valid secp256k1 or Ed25519 public key. This is set by the transaction that created the channel and must match the public key used in claims against the channel. The channel source address can also send amounts from this channel to the destination without signed claims. |\n| `SettleDelay`       | Number           | UInt32              | Yes       | Number of seconds the source address must wait to close the channel if it still has any amount in it. Smaller values mean that the destination address has less time to redeem any outstanding claims after the source address requests to close the channel. Can be any value that fits in a 32-bit unsigned integer (0 to 2^32-1). This is set by the transaction that creates the channel.   |\n| `SourceTag`         | Number           | UInt32              | No        | An arbitrary tag to further specify the source for this payment channel, such as a hosted recipient at the owner's address.                                                                                                                                                                                                                                                                     |\n| `TransferRate`      | Number           | UInt32              | No        |                                                                                                                                                                                                                                                                                                                                                                                                 |\n\n### Setting Channel Expiration\n\nThe `Expiration` field of a payment channel is the mutable expiration time, in contrast to the immutable expiration time represented by the `CancelAfter` field. The expiration of a channel is always considered relative to the `close_time` field of the previous ledger. The `Expiration` field is omitted when a `PayChannel` object is created. There are several ways the `Expiration` field of a `PayChannel` object can be updated, which can be summarized as follows: a channel's source address can set the `Expiration` of the channel freely as long as the channel always remains open at least `SettleDelay` seconds after the first attempt to close it.\n\n#### Source Address\n\nThe source address can set the `Expiration` directly with the PaymentChannelFund transaction type. The new value must not be earlier than whichever of the following values is earliest:\n\n* The current `Expiration` value (if one is set)\n* The previous ledger's close time plus the `SettleDelay` of the channel\n\nIn other words, the source address can always make the `Expiration` later if an expiration is already set. The source can make an `Expiration` value earlier or set an `Expiration` if one isn't currently set, as long as the new value is at least `SettleDelay` seconds in the future. If the source address attempts to set an invalid `Expiration` date, the transaction fails with the `temBAD_EXPIRATION` error code.\n\nThe source address can also set the `Expiration` with the `tfClose` flag of the PaymentChannelClaim transaction type. If the flag is enabled, the ledger automatically sets the `Expiration` to whichever of the following values is earlier:\n\n* The current `Expiration` value (if one is set)\n* The previous ledger's close time plus the `SettleDelay` of the channel\n\nThe source address can remove the `Expiration` with the `tfRenew` flag of the PaymentChannelClaim transaction type.\n\n#### Destination Address\n\nThe destination address cannot set the `Expiration` field. However, the destination address can use the PaymentChannelClaim's `tfClose` flag to close a channel immediately.\n\n#### Other Addresses\n\nIf any other address attempts to set an `Expiration` field, the transaction fails with the `tecNO_PERMISSION` error code. However, if the channel is already expired, the transaction causes the channel to close and results in `tesSUCCESS` instead.\n\n### PayChannel ID Format\n\nThe ID of a `PayChannel` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The PayChannel space key (`0x0078`)\n* The AccountID of the source account\n* The AccountID of the destination account\n* The Sequence number of the \\[PaymentChannelCreate transaction]\\[] that created the channel If the PaymentChannelCreate transaction used a Ticket, use the `TicketSequence` value instead.","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/pay-channel.mdx","88b809bd3e9304b2","docs/protocol-reference/ledger-data/ledger-objects-types/signers-list",{"id":1801,"data":1803,"body":1808,"filePath":1809,"digest":1810,"deferredRender":14},{"title":1804,"editUrl":14,"head":1805,"template":16,"sidebar":1806,"pagefind":14,"draft":18},"Signers List",[],{"hidden":18,"attrs":1807},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/6d2e3da30696bd10e3bb11a5ff6d45d2c4dae90f/src/ripple/protocol/impl/LedgerFormats.cpp#L127)\n\n_(Added by the \\[MultiSign amendment]\\[].)_\n\nThe `SignerList` object type represents a list of parties that, as a group, are authorized to sign a transaction in place of an individual account. You can create, replace, or remove a signer list using a \\[SignerListSet transaction]\\[].\n\n### Example JSON\n\n```json\n{\n    \"Flags\": 0,\n    \"LedgerEntryType\": \"SignerList\",\n    \"OwnerNode\": \"0000000000000000\",\n    \"PreviousTxnID\": \"5904C0DC72C58A83AEFED2FFC5386356AA83FCA6A88C89D00646E51E687CDBE4\",\n    \"PreviousTxnLgrSeq\": 16061435,\n    \"SignerEntries\": [\n        {\n            \"SignerEntry\": {\n                \"Account\": \"rsA2LpzuawewSBQXkiju3YQTMzW13pAAdW\",\n                \"SignerWeight\": 2\n            }\n        },\n        {\n            \"SignerEntry\": {\n                \"Account\": \"raKEEVSGnKSD9Zyvxu4z6Pqpm4ABH8FS6n\",\n                \"SignerWeight\": 1\n            }\n        },\n        {\n            \"SignerEntry\": {\n                \"Account\": \"rUpy3eEg8rqjqfUoLeBnZkscbKbFsKXC3v\",\n                \"SignerWeight\": 1\n            }\n        }\n    ],\n    \"SignerListID\": 0,\n    \"SignerQuorum\": 3,\n    \"index\": \"A9C28A28B85CD533217F5C0A0C7767666B093FA58A0F2D80026FCC4CD932DDC7\"\n}\n```\n\n### Fields\n\nA `SignerList` object has the following fields:\n\n| Name                | JSON Type | Internal Type | Required? | Description                                                                                                                                                                           |\n| ------------------- | --------- | ------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Flags`             | Number    | UInt32        | Yes       | A bit-map of Boolean flags enabled for this signer list. For more information, see SignerList Flags.                                                                                  |\n| `LedgerEntryType`   | String    | UInt16        | Yes       | The value `0x0053`, mapped to the string `SignerList`, indicates that this object is a SignerList object.                                                                             |\n| `OwnerNode`         | String    | UInt64        | Yes       | A hint indicating which page of the owner directory links to this object, in case the directory consists of multiple pages.                                                           |\n| `PreviousTxnID`     | String    | Hash256       | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                      |\n| `PreviousTxnLgrSeq` | Number    | UInt32        | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                      |\n| `SignerEntries`     | Array     | Array         | Yes       | An array of Signer Entry objects representing the parties who are part of this signer list.                                                                                           |\n| `SignerListID`      | Number    | UInt32        | Yes       | An ID for this signer list. Currently always set to `0`. If a future amendment allows multiple signer lists for an account, this may change.                                          |\n| `SignerQuorum`      | Number    | UInt32        | Yes       | A target number for signer weights. To produce a valid signature for the owner of this SignerList, the signers must provide valid signatures whose weights sum to this value or more. |\n\nThe `SignerEntries` may be any combination of funded and unfunded addresses that use either secp256k1 or ed25519 keys.\n\n#### Signer Entry Object\n\nEach member of the `SignerEntries` field is an object that describes that signer in the list. A Signer Entry has the following fields:\n\n| Name            | JSON Type | Internal Type | Description                                                                                                                                                                       |\n| --------------- | --------- | ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Account`       | String    | AccountID     | A Xahau address whose signature contributes to the multi-signature. It does not need to be a funded address in the ledger.                                                        |\n| `SignerWeight`  | Number    | UInt16        | The weight of a signature from this signer. A multi-signature is only valid if the sum weight of the signatures provided meets or exceeds the signer list's `SignerQuorum` value. |\n| `WalletLocator` | String    | Hash256       | _(Optional)_ Arbitrary hexadecimal data. This can be used to identify the signer or for other, related purposes. _(Added by the \\[ExpandedSignerList amendment]\\[].)_             |\n\nWhen processing a multi-signed transaction, the server looks up the `Account` values with respect to the ledger at the time of transaction execution. If the address _does not_ correspond to a funded AccountRoot object, then only the master private key associated with that address can be used to produce a valid signature. If the account _does_ exist in the ledger, then it depends on the state of that account. If the account has a Regular Key configured, the Regular Key can be used. The account's master key can only be used if it is not disabled. A multi-signature cannot be used as part of another multi-signature.\n\n### SignerList Flags\n\n_(Added by the \\[MultiSignReserve amendment]\\[].)_\n\nSignerList objects can have the following flag value:\n\n| Flag Name          | Hex Value    | Decimal Value | Description                                                                                                                                                                                                                                                                                                         |\n| ------------------ | ------------ | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `lsfOneOwnerCount` | `0x00010000` | 65536         | If this flag is enabled, this SignerList counts as one item for purposes of the owner reserve. Otherwise, this list counts as N+2 items, where N is the number of signers it contains. This flag is automatically enabled if you add or update a signer list after the \\[MultiSignReserve amendment]\\[] is enabled. |\n\n### Signer Lists and Reserves\n\nA signer list contributes to its owner's reserve requirement.\n\nThe \\[MultiSignReserve amendment]\\[] (enabled 2019-04-17) made it so each signer list counts as one object, regardless of how many members it has. As a result, the owner reserve associated with a new signer list is 2 XAH.\n\nA signer list created before the \\[MultiSignReserve amendment]\\[] itself counts as two objects, and each member of the list counts as one. As a result, the total owner reserve associated with the signer list is anywhere from 3 times to 10 times the reserve required by a single trust line (RippleState) or Offer object in the ledger. To update a signer list to use the new, reduced reserve, update the signer list by sending a \\[SignerListSet transaction]\\[].\n\n### SignerList ID Format\n\nThe ID of a signer list object is the SHA-512Half of the following values, concatenated in order:\n\n* The RippleState space key (`0x0053`)\n* The AccountID of the owner of the signer list\n* The `SignerListID` (currently always `0`)","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/signers-list.mdx","90f1b579fd392fe7","docs/protocol-reference/ledger-data/ledger-objects-types/ticket",{"id":1811,"data":1813,"body":1818,"filePath":1819,"digest":1820,"deferredRender":14},{"title":1814,"editUrl":14,"head":1815,"template":16,"sidebar":1816,"pagefind":14,"draft":18},"Ticket",[],{"hidden":18,"attrs":1817},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/76a6956138c4ecd156c5c408f136ed3d6ab7d0c1/src/ripple/protocol/impl/LedgerFormats.cpp#L155-L164)\n\n_(Added by the \\[TicketBatch amendment]\\[].)_\n\nThe `Ticket` object type represents a Ticket, which tracks an account \\[sequence number]\\[Sequence Number] that has been set aside for future use. You can create new tickets with a \\[TicketCreate transaction]\\[]. \\[New in: rippled 1.7.0]\\[]\n\n### Example JSON\n\n```json\n{\n  \"Account\": \"rEhxGqkqPPSxQ3P25J66ft5TwpzV14k2de\",\n  \"Flags\": 0,\n  \"LedgerEntryType\": \"Ticket\",\n  \"OwnerNode\": \"0000000000000000\",\n  \"PreviousTxnID\": \"F19AD4577212D3BEACA0F75FE1BA1644F2E854D46E8D62E9C95D18E9708CBFB1\",\n  \"PreviousTxnLgrSeq\": 4,\n  \"TicketSequence\": 3\n}\n```\n\n### Fields\n\nA `Ticket` object has the following fields:\n\n| Name                | JSON Type | Internal Type | Required? | Description                                                                                                                                                                                                                                                               |\n| ------------------- | --------- | ------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Account`           | String    | AccountID     | Yes       | The account that owns this Ticket.                                                                                                                                                                                                                                        |\n| `Flags`             | Number    | UInt32        | Yes       | A bit-map of boolean flags enabled for this object. Currently, the protocol defines no flags for `Ticket` objects. The value is always `0`.                                                                                                                               |\n| `LedgerEntryType`   | String    | UInt16        | Yes       | The value `0x0054`, mapped to the string `Ticket`, indicates that this object is a Ticket object.                                                                                                                                                         |\n| `OwnerNode`         | String    | UInt64        | Yes       | A hint indicating which page of the owner directory links to this object, in case the directory consists of multiple pages. **Note:** The object does not contain a direct link to the owner directory containing it, since that value can be derived from the `Account`. |\n| `PreviousTxnID`     | String    | Hash256       | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                                                                                                                                          |\n| `PreviousTxnLgrSeq` | Number    | UInt32        | Yes       | The \\[index of the ledger]\\[Ledger Index] that contains the transaction that most recently modified this object.                                                                                                                                                          |\n| `TicketSequence`    | Number    | UInt32        | Yes       | The \\[Sequence Number]\\[] this Ticket sets aside.                                                                                                                                                                                                                         |\n\n### Ticket ID Format\n\nThe ID of a Ticket object is the SHA-512Half of the following values, concatenated in order:\n\n* The Ticket space key (`0x0054`)\n* The AccountID of the owner of the Ticket\n* The `TicketSequence` number of the Ticket","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/ticket.mdx","cbd1398efbfff032","docs/protocol-reference/ledger-data/ledger-objects-types/unl-report",{"id":1821,"data":1823,"body":1828,"filePath":1829,"digest":1830,"deferredRender":14},{"title":1824,"editUrl":14,"head":1825,"template":16,"sidebar":1826,"pagefind":14,"draft":18},"UNL Report",[],{"hidden":18,"attrs":1827},{},"_(Added by the \\[Hooks amendment]\\[].)_\n\nA `UNLReport` object describes a report of the Unique Node List (UNL) which is a list of validator nodes that are trusted by the network to validate transactions.\n\n### Example JSON\n\n```json\n{\n  \"LedgerEntryType\": \"UNLReport\",\n  \"PreviousTxnID\": \"5463C6E08862A1FAE5EDAC12D70ADB16546A1F674930521295BC082494B62924\",\n  \"PreviousTxnLgrSeq\": 6,\n  \"ImportVLKeys\": [\n    {\n      \"PublicKey\": \"n9LigbVAi4pQc6pU2KJvQZV5wqJ8C3sVvZvBZUopchH8vqa6PEKy\",\n      \"Account\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\"\n    }\n  ],\n  \"ActiveValidators\": [\n    {\n      \"PublicKey\": \"n9LigbVAi4pQc6pU2KJvQZV5wqJ8C3sVvZvBZUopchH8vqa6PEKy\",\n      \"Account\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\"\n    }\n  ],\n  \"index\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\"\n}\n```\n\n### Fields\n\nA `UNLReport` object has the following fields:\n\n| Field               | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                                                                                         |\n| ------------------- | --------- | ------------------- | --------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `LedgerEntryType`   | String    | UInt16              | Yes       | The value `0x0073`, mapped to the string `UNLReport`, indicates that this object is a UNLReport object.                                             |\n| `PreviousTxnID`     | String    | Hash256             | Yes       | The identifying hash of the transaction that most recently modified this object.                                                                    |\n| `PreviousTxnLgrSeq` | Number    | UInt32              | Yes       | The index of the ledger that contains the transaction that most recently modified this object.                                                      |\n| `ImportVLKeys`      | Array     | Array               | No        | An array of objects, each representing a validator key that has been imported. Each object has a `PublicKey` field and an optional `Account` field. |\n| `ActiveValidators`  | Array     | Array               | No        | An array of objects, each representing an active validator. Each object has a `PublicKey` field and an optional `Account` field.                    |\n\n### ImportVLKey Fields\n\n| Field       | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                                     |\n| ----------- | --------- | ------------------- | --------- | ------------------------------------------------------------------------------- |\n| `PublicKey` | String    | VL                  | Yes       | The public key of the imported validator.                                       |\n| `Account`   | String    | Account             | No        | The account associated with the imported validator key. This field is optional. |\n\n### ActiveValidator Fields\n\n| Field       | JSON Type | \\[Internal Type]\\[] | Required? | Description                                                               |\n| ----------- | --------- | ------------------- | --------- | ------------------------------------------------------------------------- |\n| `PublicKey` | String    | VL                  | Yes       | The public key of the active validator.                                   |\n| `Account`   | String    | Account             | No        | The account associated with the active validator. This field is optional. |\n\n### UNLReport ID Format\n\nThe `UNLReport` object ID is the hash of the `UNLReport` space key (`0x0052`) only. This means that the ID of the `UNLReport` object in a ledger is always:\n\n```\n61E32E7A24A238F1C619D5F9DDCC41A94B33B66C0163F7EFCC8A19C9FD6F28DC\n```","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/unl-report.mdx","8985bcbddc26a3de","docs/protocol-reference/ledger-data/ledger-objects-types/uritoken",{"id":1831,"data":1833,"body":1837,"filePath":1838,"digest":1839,"deferredRender":14},{"title":345,"editUrl":14,"head":1834,"template":16,"sidebar":1835,"pagefind":14,"draft":18},[],{"hidden":18,"attrs":1836},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/impl/LedgerFormats.cpp#L157-L170)\n\n_(Added by the \\[URI Token amendment]\\[].)_\n\nA `URIToken` object describes a URI token, which can be used to represent a unique resource identifier in the ledger.\n\n### Example JSON\n\n```json\n{\n  \"Owner\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\",\n  \"OwnerNode\": \"0000000000000000\",\n  \"Issuer\": \"rfkE1aSy9G8Upk4JssnwBxhEv5p4mn2KTy\",\n  \"URI\": \"DEADBEEF\",\n  \"Digest\": \"46060241FABCF692D4D934BA2A6C4427CD4279083E38C77CBE642243E43BE291\",\n  \"Amount\": \"100000000\",\n  \"Destination\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\",\n  \"PreviousTxnID\": \"5463C6E08862A1FAE5EDAC12D70ADB16546A1F674930521295BC082494B62924\",\n  \"PreviousTxnLgrSeq\": 6,\n  \"LedgerEntryType\": \"URIToken\",\n  \"index\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\"\n}\n```\n\n### Fields\n\nA `URIToken` object has the following fields:\n\n| Field               | JSON Type        | \\[Internal Type]\\[] | Required? | Description                                                                                                                   |\n| ------------------- | ---------------- | ------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `Owner`             | String           | Account             | Yes       | The owner of the URI Token.                                                                                                   |\n| `OwnerNode`         | String           | UInt64              | Yes       | A hint indicating which page of the owner's directory links to this object, in case the directory consists of multiple pages. |\n| `Issuer`            | String           | Account             | Yes       | The issuer of the URI Token.                                                                                                  |\n| `URI`               | String           | VL                  | Yes       | The URI represented by this token.                                                                                            |\n| `Digest`            | String           | Hash256             | No        | Arbitrary 256-bit hash provided by the owner as a specific identifier for this URI Token.                                     |\n| `Amount`            | String or Object | Amount              | No        | The amount of the URI Token.                                                                                                  |\n| `Destination`       | String           | Account             | No        | The intended recipient of the URI Token.                                                                                      |\n| `PreviousTxnID`     | String           | Hash256             | Yes       | The identifying hash of the transaction that most recently modified this object.                                              |\n| `PreviousTxnLgrSeq` | Number           | UInt32              | Yes       | The index of the ledger that contains the transaction that most recently modified this object.                                |\n| `LedgerEntryType`   | String           | UInt16              | Yes       | The value `0x0073`, mapped to the string `URIToken`, indicates that this object is a URI Token object.                        |\n\n### URIToken Flags\n\n`URIToken` objects can have the following flag values:\n\n| Flag Name     | Hex Value    | Decimal Value | Corresponding URITokenMint Flag | Description                                                                                                                       |\n| ------------- | ------------ | ------------- | ------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| `lsfBurnable` | `0x00000001` | 1             | `tfBurnable`                    | The issuer (or an entity authorized by the issuer) to destroy the minted `URIToken`. (The `URIToken`'s owner can _always_ do so.) |\n\n### URIToken ID Format\n\nThe ID of a `URIToken` object is the \\[SHA-512Half]\\[] of the following values, concatenated in order:\n\n* The URI Token space key (`0x0055`)\n* The AccountID of the issuer of the URI Token\n* The URI represented by the URI Token","src/content/docs/docs/protocol-reference/ledger-data/ledger-objects-types/uritoken.mdx","55a406b44b1cd839","docs/hooks/concepts/introduction",{"id":1840,"data":1842,"body":1847,"filePath":1848,"digest":1849,"deferredRender":14},{"title":1843,"editUrl":14,"head":1844,"template":16,"sidebar":1845,"pagefind":14,"draft":18},"Introduction",[],{"hidden":18,"attrs":1846},{},"import { Aside } from '@astrojs/starlight/components';\n\nHooks add smart contract functionality to the Xahau: _layer one_ custom code to influence the behaviour and flow of transactions. Hooks are small, efficient pieces of code being defined on an Xahau account, allowing logic to be executed before and/or after Xahau transactions.\n\n\u003CAside type=\"note\">\nPlease note: you're reading the **technical documentation** of Hooks. This documentation is highly technical & assumes prior knowledge of programming and the Xahau Ledger. If you are looking for examples on what Hooks are, will bring to the Xahau Ledger and what they could do, please [check this page](example-usage).\n\u003C/Aside>\n\nXahau is known and is being appreciated for its transaction throughput, speed and the low fees. Combined with available advanced transaction types like multi sign, escrows, payment channels and even a decentralized exchange (all on ledger, out of the box, without requiring smart contracts) Xahau has a lot to offer businesses and (creative) developers.\n\nHooks add smart contract functionality to Xahau: _layer one_ custom code to influence the behaviour and flow of transactions. Hooks are small, efficient pieces of code being defined on an Xahau account, allowing logic to be executed before and/or after Xahau transactions. These Hooks can be really simple, like: “reject payments \u003C 10 XAH”, or “for all outgoing payments, send 10% to my savings account” or more advanced.\n\n\u003Cfigure>\n![Hooks high level concept](../../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_sEBiInWuRskTqxB29Xgd_7359187-Hooks_High_Level2x_1.png)\n\u003Cfigcaption>*Hooks high level concept*\u003C/figcaption>\n\u003C/figure>\n\nBy allowing Hooks to not only execute efficient logic but also to store small, simple data objects, one could define a Hook like: “for incoming payments transactions, check if the sending account is in a list maintained by another Hook, and if present: reject the transaction”.\n\nHooks are deliberately not Turing-Complete. While often touted as the holy grail of smart contracts, Turing-Completeness is actually inappropriate for smart contracts. (See [Blog 2](https://dev.to/wietse/hooked-2-hooks-security-smart-contracts-on-the-xrp-ledger-83e).)\n\nHooks are currently live on a public testnet. It's time for testing, coding, having fun & breaking things, so a future amendment to add Hooks to Xahau livenet can be drafted with confidence.\n\n### Resources\n\n* [Xahau Testnet](https://xahau-test.net/)\n* [Xahau Testnet Explorer](https://explorer.xahau-test.net/)\n* [Examples (source code)](https://github.com/XRPL-Labs/xrpld-hooks/tree/hooks-ssvm/hook-api-examples)\n* [Blogs (concepts)](https://dev.to/t/xrplhooks/top/infinity)","src/content/docs/docs/hooks/concepts/introduction/index.mdx","5f9098c5793d62da","docs/protocol-reference/transactions/pseudo-transaction-types/emitfailure",{"id":1850,"data":1852,"body":1857,"filePath":1858,"digest":1859,"deferredRender":14},{"title":1853,"editUrl":14,"head":1854,"template":16,"sidebar":1855,"pagefind":14,"draft":18},"EmitFailure",[],{"hidden":18,"attrs":1856},{},"TBD","src/content/docs/docs/protocol-reference/transactions/pseudo-transaction-types/emitfailure.mdx","e4eda1c36b0c614d","docs/hooks/concepts/introduction/example-usage",{"id":1860,"data":1862,"body":1867,"filePath":1868,"digest":1869,"deferredRender":14},{"title":1863,"editUrl":14,"head":1864,"template":16,"sidebar":1865,"pagefind":14,"draft":18},"Example Usage",[],{"hidden":18,"attrs":1866},{},"Please read [the introduction of Hooks in this blog](https://coil.com/p/XUMM/XRPL-Labs-is-working-on-the-transaction-HOOKS-amendment-for-the-XRP-Ledger-Supporting-business-logic/kEmqhoqMW).\n\nWhile working on Hooks we published a number of blogs on our progress, insights & Hooks concepts. You can [read all about that in our blogs on Dev.to](https://dev.to/t/xrplhooks/top/infinity)\n\n### Examples (scenarios)\n\n#### 1. Receiving Hook executes additional logic\n\n![](../../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_XJgZhbZv8VsmtWVy9H73_d404753-1.png)\n\n#### 2. Receiving Hook blocks incoming transaction\n\n![](../../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_VXmzY1NcJIEjMtFsdj5y_08dee14-2.png)\n\n#### 3. Sending Hook blocks outgoing transaction\n\n![](../../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_FvVVFLYOs9skdbzL2PbX_468e0b5-3.png)\n\n#### 4. Hook controls an institutional account\n\n![](../../../assets/spaces_m6f29os4wP16vCS4lHNh_uploads_6S9mLMliCrlQ5JqjDld6_909b3a9-4.png)","src/content/docs/docs/hooks/concepts/introduction/example-usage.mdx","5ecf7696eff1d2a7","docs/protocol-reference/transactions/pseudo-transaction-types/enableamendment",{"id":1870,"data":1872,"body":1877,"filePath":1878,"digest":1879,"deferredRender":14},{"title":1873,"editUrl":14,"head":1874,"template":16,"sidebar":1875,"pagefind":14,"draft":18},"EnableAmendment",[],{"hidden":18,"attrs":1876},{},"An `EnableAmendment` pseudo-transaction marks a change in the status of a proposed amendment when it:\n\n* Gains supermajority approval from validators.\n* Loses supermajority approval.\n* Is enabled on Xahau protocol.\n\n### Example JSON\n\n```json\n{\n  \"Account\": \"rrrrrrrrrrrrrrrrrrrrrhoLvTp\",\n  \"Amendment\": \"42426C4D4F1009EE67080A9B7965B44656D7714D104A72F9B4369F97ABF044EE\",\n  \"Fee\": \"0\",\n  \"LedgerSequence\": 21225473,\n  \"Sequence\": 0,\n  \"SigningPubKey\": \"\",\n  \"TransactionType\": \"EnableAmendment\"\n}  \n```\n\n| Field            | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                        |\n| ---------------- | --------- | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Amendment`      | String    | Hash256             | A unique identifier for the amendment. This is not intended to be a human-readable name. See Amendments for a list of known amendments.            |\n| `LedgerSequence` | Number    | UInt32              | The \\[ledger index]\\[] where this pseudo-transaction appears. This distinguishes the pseudo-transaction from other occurrences of the same change. |\n\n### EnableAmendment Flags\n\nThe `Flags` value of the EnableAmendment pseudo-transaction indicates the status of the amendment at the time of the ledger including the pseudo-transaction.\n\nA `Flags` value of `0` (no flags) or an omitted `Flags` field indicates that the amendment has been enabled, and applies to all ledgers afterward. Other `Flags` values are as follows:\n\n| Flag Name        | Hex Value    | Decimal Value | Description                                                                                                    |\n| ---------------- | ------------ | ------------- | -------------------------------------------------------------------------------------------------------------- |\n| `tfGotMajority`  | `0x00010000` | 65536         | Support for this amendment increased to at least 80% of trusted validators starting with this ledger version.  |\n| `tfLostMajority` | `0x00020000` | 131072        | Support for this amendment decreased to less than 80% of trusted validators starting with this ledger version. |","src/content/docs/docs/protocol-reference/transactions/pseudo-transaction-types/enableamendment.mdx","f656da6f0a86421d","docs/protocol-reference/transactions/pseudo-transaction-types/setfee",{"id":1880,"data":1882,"body":1887,"filePath":1888,"digest":1889,"deferredRender":14},{"title":1883,"editUrl":14,"head":1884,"template":16,"sidebar":1885,"pagefind":14,"draft":18},"SetFee",[],{"hidden":18,"attrs":1886},{},"A `SetFee` pseudo-transaction marks a change in transaction cost or reserve requirements as a result of Fee Voting.\n\n**Note:** You cannot send a pseudo-transaction, but you may find one when processing ledgers.\n\n### Example JSON\n\n```json\n{\n    \"Account\": \"rrrrrrrrrrrrrrrrrrrrrhoLvTp\",\n    \"BaseFee\": \"000000000000000A\",\n    \"Fee\": \"0\",\n    \"ReferenceFeeUnits\": 10,\n    \"ReserveBase\": 20000000,\n    \"ReserveIncrement\": 5000000,\n    \"Sequence\": 0,\n    \"SigningPubKey\": \"\",\n    \"TransactionType\": \"SetFee\",\n    \"date\": 439578860,\n    \"hash\": \"1C15FEA3E1D50F96B6598607FC773FF1F6E0125F30160144BE0C5CBC52F5151B\",\n    \"ledger_index\": 3721729,\n}\n```\n\n| Field               | JSON Type        | \\[Internal Type]\\[] | Description                                                                                                                                                                                                              |\n| ------------------- | ---------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `BaseFee`           | String           | UInt64              | The charge, in drops of XAH, for the reference transaction, as hex. (This is the transaction cost before scaling for load.)                                                                                              |\n| `ReferenceFeeUnits` | Unsigned Integer | UInt32              | The cost, in fee units, of the reference transaction                                                                                                                                                                     |\n| `ReserveBase`       | Unsigned Integer | UInt32              | The base reserve, in drops                                                                                                                                                                                               |\n| `ReserveIncrement`  | Unsigned Integer | UInt32              | The incremental reserve, in drops                                                                                                                                                                                        |\n| `LedgerSequence`    | Number           | UInt32              | _(Omitted for some historical `SetFee` pseudo-transactions)_ The index of the ledger version where this pseudo-transaction appears. This distinguishes the pseudo-transaction from other occurrences of the same change. |\n\nIf the _\\[XAHFees amendment]\\[]_ is enabled, `SetFee` pseudo-transactions use these fields instead:\n\n| Field                   | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                                                              |\n| ----------------------- | --------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `BaseFeeDrops`          | String    | Amount              | The charge, in drops of XAH, for the reference transaction. (This is the transaction cost before scaling for load.)                                                                                                      |\n| `ReserveBaseDrops`      | String    | Amount              | The base reserve, in drops                                                                                                                                                                                               |\n| `ReserveIncrementDrops` | String    | Amount              | The incremental reserve, in drops                                                                                                                                                                                        |\n| `LedgerSequence`        | Number    | UInt32              | _(Omitted for some historical `SetFee` pseudo-transactions)_ The index of the ledger version where this pseudo-transaction appears. This distinguishes the pseudo-transaction from other occurrences of the same change. |","src/content/docs/docs/protocol-reference/transactions/pseudo-transaction-types/setfee.mdx","b38a7b11ce5052b9","docs/protocol-reference/transactions/pseudo-transaction-types",{"id":1890,"data":1892,"body":1897,"filePath":1898,"digest":1899,"deferredRender":14},{"title":1893,"editUrl":14,"head":1894,"template":16,"sidebar":1895,"pagefind":14,"draft":18},"Pseudo Transaction Types",[],{"hidden":18,"attrs":1896},{},"Pseudo-transactions are never submitted by users, nor propagated through the network. Instead, a server may choose to inject pseudo-transactions in a proposed ledger directly according to specific protocol rules. If enough servers propose the exact same pseudo-transaction, the consensus process approves it, and the pseudo-transaction is included in that ledger's transaction data.\n\n### Special Values for Common Fields\n\nSome of the required \\[common fields]\\[] for normal transactions do not make sense for pseudo-transactions. Pseudo-transactions use following special values for these common fields:\n\n| Field           | JSON Type | \\[Internal Type]\\[] | Value               |\n| --------------- | --------- | ------------------- | ------------------- |\n| `Account`       | String    | AccountID           | ACCOUNT_ZERO       |\n| `Fee`           | String    | Amount              | `0`                 |\n| `Sequence`      | Number    | UInt32              | `0`                 |\n| `SigningPubKey` | String    | Blob                | `\"\"` (Empty string) |\n| `TxnSignature`  | String    | Blob                | `\"\"` (Empty string) |\n\nPseudo-transactions use the following common fields as normal:\n\n* `TransactionType`\n* `Flags`\n\n| Field             | JSON Type | \\[Internal Type]\\[] | Description                                                                                                               |\n| ----------------- | --------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------- |\n| `TransactionType` | String    | UInt16              | _(Required)_ The type of transaction.                                                                                     |\n| `Flags`           | Number    | UInt32              | _(Optional)_ A set of bit-flags for this transaction. The meaning of specific flags varies based on the transaction type. |","src/content/docs/docs/protocol-reference/transactions/pseudo-transaction-types/index.mdx","4852c9dddbf07acb","docs/protocol-reference/transactions/pseudo-transaction-types/unlmodify",{"id":1900,"data":1902,"body":1907,"filePath":1908,"digest":1909,"deferredRender":14},{"title":1903,"editUrl":14,"head":1904,"template":16,"sidebar":1905,"pagefind":14,"draft":18},"UNLModify",[],{"hidden":18,"attrs":1906},{},"_(Added by the \\[NegativeUNL amendment]\\[].)_\n\nA `UNLModify` pseudo-transaction marks a change to the Negative UNL, indicating that a trusted validator has gone offline or come back online.\n\n**Note:** You cannot send a pseudo-transaction, but you may find one when processing ledgers.\n\n### Example JSON\n\n```json\n{\n  \"Account\": \"\",\n  \"Fee\": \"0\",\n  \"LedgerSequence\": 1600000,\n  \"Sequence\": 0,\n  \"SigningPubKey\": \"\",\n  \"TransactionType\": \"UNLModify\",\n  \"UNLModifyDisabling\": 1,\n  \"UNLModifyValidator\": \"ED6629D456285AE3613B285F65BBFF168D695BA3921F309949AFCD2CA7AFEC16FE\",\n}\n```\n\n| Name                 | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                      |\n| -------------------- | --------- | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `TransactionType`    | String    | UInt16              | The value `0x0066`, mapped to the string `UNLModify`, indicates that this object is an `UNLModify` pseudo-transaction.                                                           |\n| `LedgerSequence`     | Number    | UInt32              | The \\[ledger index]\\[] where this pseudo-transaction appears. This distinguishes the pseudo-transaction from other occurrences of the same change.                               |\n| `UNLModifyDisabling` | Number    | UInt8               | If `1`, this change represents adding a validator to the Negative UNL. If `0`, this change represents removing a validator from the Negative UNL. (No other values are allowed.) |\n| `UNLModifyValidator` | String    | Blob                | The validator to add or remove, as identified by its master public key.                                                                                                          |","src/content/docs/docs/protocol-reference/transactions/pseudo-transaction-types/unlmodify.mdx","029d4be53181ee3c","docs/protocol-reference/transactions/pseudo-transaction-types/unlreport",{"id":1910,"data":1912,"body":1857,"filePath":1917,"digest":1918,"deferredRender":14},{"title":1913,"editUrl":14,"head":1914,"template":16,"sidebar":1915,"pagefind":14,"draft":18},"UNLReport",[],{"hidden":18,"attrs":1916},{},"src/content/docs/docs/protocol-reference/transactions/pseudo-transaction-types/unlreport.mdx","2e2482641c25005f","docs/protocol-reference/transactions/transaction-results",{"id":1919,"data":1921,"body":1926,"filePath":1927,"digest":1928,"deferredRender":14},{"title":1922,"editUrl":14,"head":1923,"template":16,"sidebar":1924,"pagefind":14,"draft":18},"Transaction Results",[],{"hidden":18,"attrs":1925},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/TER.h)\n\nThe `rippled` server summarizes transaction results with result codes, which appear in fields such as `engine_result` and `meta.TransactionResult`. These codes are grouped into several categories with different prefixes:\n\n| Category              | Prefix | Description                                                                                                                                                                                                   |\n| --------------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Claimed cost only     | `tec`  | The transaction did not achieve its intended purpose, but the transaction cost was destroyed. This result is only final in a validated ledger.                                                                |\n| Failure               | `tef`  | The transaction cannot be applied to the server's current (in-progress) ledger or any later one. It may have already been applied, or the condition of the ledger makes it impossible to apply in the future. |\n| Local error           | `tel`  | The `rippled` server had an error due to local conditions, such as high load. You may get a different response if you resubmit to a different server or at a different time.                                  |\n| Malformed transaction | `tem`  | The transaction was not valid, due to improper syntax, conflicting options, a bad signature, or something else.                                                                                               |\n| Retry                 | `ter`  | The transaction could not be applied, but it could apply successfully in a future ledger.                                                                                                                     |\n| Success               | `tes`  | (Not an error) The transaction succeeded. This result only final in a validated ledger.                                                                                                                       |\n\nThe `rippled` server automatically retries failed transactions. It is important not to assume that a transaction has completely failed based on a tentative failure result. A transaction may later succeed unless its success or failure is final.\n\n**Warning:** Transactions' provisional result codes may differ from their final result. Transactions that provisionally succeeded may eventually fail and transactions that provisionally failed may eventually succeed. Transactions that provisionally failed may also eventually fail with a different code. See the finality of results for how to know when a transaction's result is final.\n\nThe distinction between a local error (`tel`) and a malformed transaction (`tem`) is a matter of protocol-level rules. For example, the protocol sets no limit on the maximum number of paths that can be included in a transaction. However, a server may define a finite limit of paths it can process. If two different servers are configured differently, then one of them may return a `tel` error for a transaction with many paths, while the other server could successfully process the transaction. If enough servers are able to process the transaction so that it survives consensus, then it can still be included in a validated ledger.\n\nBy contrast, a `tem` error implies that no server anywhere can apply the transaction, regardless of settings. Either the transaction breaks the rules of the protocol, it is unacceptably ambiguous, or it is completely nonsensical. The only way a malformed transaction could become valid is through changes in the protocol; for example, if a new feature is adopted, then transactions using that feature could be considered malformed by servers that are running older software which predates that feature.\n\n### Immediate Response\n\nThe response from the \\[submit method]\\[] contains a provisional result from the `rippled` server indicating what happened during the local processing of the transaction.\n\nThe response from `submit` contains the following fields:\n\n| Field                   | Value          | Description                                                                                                                                               |\n| ----------------------- | -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `engine_result`         | String         | A code indicating the outcome of the transaction, such as `tecPATH_DRY`.                                                                                  |\n| `engine_result_code`    | Signed Integer | A number that corresponds to the `engine_result`. The exact values are subject to change without notice.                                                  |\n| `engine_result_message` | String         | A human-readable message explaining what happened. This message is intended for developers to diagnose problems, and is subject to change without notice. |\n\nIf nothing went wrong when submitting and applying the transaction locally, the response looks like this:\n\n```js\n    \"engine_result\": \"tesSUCCESS\",\n    \"engine_result_code\": 0,\n    \"engine_result_message\": \"The transaction was applied. Only final in a validated ledger.\"\n```\n\n**Note:** A successful result at this stage does not indicate that the transaction has completely succeeded; only that it was successfully applied to the provisional version of the ledger kept by the local server. Failed results at this stage are also provisional and may change. See Finality of Results for details.","src/content/docs/docs/protocol-reference/transactions/transaction-results/index.mdx","f627153d2feb8af1","docs/protocol-reference/transactions/transaction-results/tec-codes",{"id":1929,"data":1931,"body":1936,"filePath":1937,"digest":1938,"deferredRender":14},{"title":1932,"editUrl":14,"head":1933,"template":16,"sidebar":1934,"pagefind":14,"draft":18},"TEC Codes",[],{"hidden":18,"attrs":1935},{},"These codes indicate that the transaction failed, but it was applied to a ledger to apply the transaction cost. They have numerical values in the range 100 to 199. It is recommended to use the text code, not the numeric value.\n\nTransactions with `tec` codes destroy the XAH paid as a transaction cost and consume a sequence number. For the most part, the transactions take no other action, but there are some exceptions. For example, a transaction that results in `tecOVERSIZE` still cleans up some unfunded offers. Always look at the transaction metadata to see precisely what a transaction did.\n\n**Caution:** A transaction that provisionally failed with a `tec` code may still succeed or fail with a different code after being reapplied. The result is final when it appears in a validated ledger version. For more information, see Finality of Results and Reliable Transaction Submission.\n\n| Code                               | Value | Explanation|\n| ---------------------------------- | ----- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tecCANT_ACCEPT_OWN_NFTOKEN_OFFER` | 157   | The transaction tried to accept an offer that was placed by the same account to buy or sell a non-fungible token. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                                                                                                                                                                                                         |\n| `tecCLAIM`                         | 100   | Unspecified failure, with transaction cost destroyed.                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| `tecCRYPTOCONDITION_ERROR`         | 146   | This \\[EscrowCreate]\\[] or \\[EscrowFinish]\\[] transaction contained a malformed or mismatched crypto-condition.                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `tecDIR_FULL`                      | 121   | The transaction tried to add an object (such as a trust line, Check, Escrow, or Payment Channel) to an account's owner directory, but that account cannot own any more objects in the ledger.                                                                                                                                                                                                                                                                                                                                      |\n| `tecDUPLICATE`                     | 149   | The transaction tried to create an object (such as a \\[DepositPreauth]\\[] authorization) that already exists.                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| `tecDST_TAG_NEEDED`                | 143   | The \\[Payment transaction]\\[] omitted a destination tag, but the destination account has the `lsfRequireDestTag` flag enabled. \\[New in: rippled 0.28.0]\\[]                                                                                                                                                                                                                                                                                                                                                                        |\n| `tecEXPIRED`                       | 148   | The transaction tried to create an object (such as an Offer or a Check) whose provided Expiration time has already passed.                                                                                                                                                                                                                                                                                                                                                                                                         |\n| `tecFAILED_PROCESSING`             | 105   | An unspecified error occurred when processing the transaction.                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `tecFROZEN`                        | 137   | The \\[OfferCreate transaction]\\[] failed because one or both of the assets involved are subject to a global freeze.                                                                                                                                                                                                                                                                                                                                                                                                                |\n| `tecHAS_OBLIGATIONS`               | 151   | The \\[AccountDelete transaction]\\[] failed because the account to be deleted owns objects that cannot be deleted. See Deletion of Accounts for details.                                                                                                                                                                                                                                                                                                                                                                            |\n| `tecINSUF_RESERVE_LINE`            | 122   | The transaction failed because the sending account does not have enough XAH to create a new trust line. (See: Reserves) This error occurs when the counterparty already has a trust line in a non-default state to the sending account for the same currency. (See `tecNO_LINE_INSUF_RESERVE` for the other case.)                                                                                                                                                                                                                 |\n| `tecINSUF_RESERVE_OFFER`           | 123   | The transaction failed because the sending account does not have enough XAH to create a new Offer. (See: Reserves)                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| `tecINSUFF_FEE`                    | 136   | The transaction failed because the sending account does not have enough XAH to pay the transaction cost that it specified. (In this case, the transaction processing destroys all of the sender's XAH even though that amount is lower than the specified transaction cost.) This result only occurs if the account's balance decreases _after_ this transaction has been distributed to enough of the network to be included in a consensus set. Otherwise, the transaction fails with `terINSUF_FEE_B` before being distributed. |\n| `tecINSUFFICIENT_FUNDS`            | 158   | One of the accounts involved does not hold enough of a necessary asset. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `tecINSUFFICIENT_PAYMENT`          | 161   | The amount specified is not enough to pay all fees involved in the transaction. For example, when trading a non-fungible token, the buy amount may not be enough to pay both the broker fee and the sell amount. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                                                                                                          |\n| `tecINSUFFICIENT_RESERVE`          | 141   | The transaction would increase the reserve requirement higher than the sending account's balance. \\[SignerListSet]\\[], \\[PaymentChannelCreate]\\[], \\[PaymentChannelFund]\\[], and \\[EscrowCreate]\\[] can return this error code. See Signer Lists and Reserves for more information.                                                                                                                                                                                                                                                |\n| `tecINTERNAL`                      | 144   | Unspecified internal error, with transaction cost applied. This error code should not normally be returned. If you can reproduce this error, please [report an issue](https://github.com/ripple/rippled/issues).                                                                                                                                                                                                                                                                                                                   |\n| `tecINVARIANT_FAILED`              | 147   | An invariant check failed when trying to execute this transaction. Added by the \\[EnforceInvariants amendment]\\[]. If you can reproduce this error, please [report an issue](https://github.com/ripple/rippled/issues).                                                                                                                                                                                                                                                                                                            |\n| `tecKILLED`                        | 150   | The \\[OfferCreate transaction]\\[] specified the `tfFillOrKill` flag and could not be filled, so it was killed. _(Added by the \\[fix1578 amendment]\\[].)_                                                                                                                                                                                                                                                                                                                                                                           |\n| `tecMAX_SEQUENCE_REACHED`          | 153   | A sequence number field is already at its maximum. This includes the `MintedNFTokens` field. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                                                                                                                                                                                                                              |\n| `tecNEED_MASTER_KEY`               | 142   | This transaction tried to cause changes that require the master key, such as disabling the master key or giving up the ability to freeze balances. \\[New in: rippled 0.28.0]\\[]                                                                                                                                                                                                                                                                                                                                                    |\n| `tecNFTOKEN_BUY_SELL_MISMATCH`     | 155   | The \\[NFTokenAcceptOffer transaction]\\[] attempted to match incompatible offers to buy and sell a non-fungible token. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                                                                                                                                                                                                     |\n| `tecNFTOKEN_OFFER_TYPE_MISMATCH`   | 156   | One or more of the offers specified in the transaction was not the right type of offer. (For example, a buy offer was specified in the `NFTokenSellOffer` field.) _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                                                                                                                                                         |\n| `tecNO_ALTERNATIVE_KEY`            | 130   | The transaction tried to remove the only available method of authorizing transactions. This could be a \\[SetRegularKey transaction]\\[] to remove the regular key, a \\[SignerListSet transaction]\\[] to delete a SignerList, or an \\[AccountSet transaction]\\[] to disable the master key. (Prior to `rippled` 0.30.0, this was called `tecMASTER_DISABLED`.)                                                                                                                                                                       |\n| `tecNO_AUTH`                       | 134   | The transaction failed because it needs to add a balance on a trust line to an account with the `lsfRequireAuth` flag enabled, and that trust line has not been authorized. If the trust line does not exist at all, `tecNO_LINE` occurs instead.                                                                                                                                                                                                                                                                                  |\n| `tecNO_DST`                        | 124   | The account on the receiving end of the transaction does not exist. This includes Payment and TrustSet transaction types. (It could be created if it received enough XAH.)                                                                                                                                                                                                                                                                                                                                                         |\n| `tecNO_DST_INSUF_NATIVE`           | 125   | The account on the receiving end of the transaction does not exist, and the transaction is not sending enough XAH to create it.                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `tecNO_ENTRY`                      | 140   | The transaction tried to modify a ledger object, such as a Check, Payment Channel, or Deposit Preauthorization, but the specified object does not exist. It may have already been deleted by a previous transaction or the transaction may have an incorrect value in an ID field such as `CheckID`, `Channel`, `Unauthorize`.                                                                                                                                                                                                     |\n| `tecNO_ISSUER`                     | 133   | The account specified in the `issuer` field of a currency amount does not exist.                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `tecNO_LINE`                       | 135   | The `TakerPays` field of the \\[OfferCreate transaction]\\[] specifies an asset whose issuer has `lsfRequireAuth` enabled, and the account making the offer does not have a trust line for that asset. (Normally, making an offer implicitly creates a trust line if necessary, but in this case it does not bother because you cannot hold the asset without authorization.) If the trust line exists, but is not authorized, `tecNO_AUTH` occurs instead.                                                                          |\n| `tecNO_LINE_INSUF_RESERVE`         | 126   | The transaction failed because the sending account does not have enough XAH to create a new trust line. (See: Reserves) This error occurs when the counterparty does not have a trust line to this account for the same currency. (See `tecINSUF_RESERVE_LINE` for the other case.)                                                                                                                                                                                                                                                |\n| `tecNO_LINE_REDUNDANT`             | 127   | The transaction failed because it tried to set a trust line to its default state, but the trust line did not exist.                                                                                                                                                                                                                                                                                                                                                                                                                |\n| `tecNO_PERMISSION`                 | 139   | The sender does not have permission to do this operation. For example, the \\[EscrowFinish transaction]\\[] tried to release a held payment before its `FinishAfter` time, someone tried to use \\[PaymentChannelFund]\\[] on a channel the sender does not own, or a \\[Payment]\\[] tried to deliver funds to an account with the \"DepositAuth\" flag enabled.                                                                                                                                                                          |\n| `tecNO_REGULAR_KEY`                | 131   | The \\[AccountSet transaction]\\[] tried to disable the master key, but the account does not have another way to authorize transactions. If multi-signing is enabled, this code is deprecated and `tecNO_ALTERNATIVE_KEY` is used instead.                                                                                                                                                                                                                                                                                           |\n| `tecNO_SUITABLE_NFTOKEN_PAGE`      | 154   | The transaction tried to mint or acquire a non-fungible token but the account receiving the `NFToken` does not have a directory page that can hold it. This situation is rare. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                                                                                                                                            |\n| `tecNO_TARGET`                     | 138   | The transaction referenced an Escrow or PayChannel ledger object that doesn't exist, either because it never existed or it has already been deleted. (For example, another \\[EscrowFinish transaction]\\[] has already executed the held payment.) Alternatively, the destination account has `asfDisallowXAH` set so it cannot be the destination of this \\[PaymentChannelCreate]\\[] or \\[EscrowCreate]\\[] transaction.                                                                                                            |\n| `tecOBJECT_NOT_FOUND`              | 160   | One of the objects specified by this transaction did not exist in the ledger. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                                                                                                                                                                                                                                             |\n| `tecOVERSIZE`                      | 145   | This transaction could not be processed, because the server created an excessively large amount of metadata when it tried to apply the transaction. \\[New in: rippled 0.29.0-hf1]\\[]                                                                                                                                                                                                                                                                                                                                               |\n| `tecOWNERS`                        | 132   | The transaction cannot succeed because the sender already owns objects in the ledger. For example, an account cannot enable the `lsfRequireAuth` flag if it has any trust lines or available offers.                                                                                                                                                                                                                                                                                                                               |\n| `tecPATH_DRY`                      | 128   | The transaction failed because the provided paths did not have enough liquidity to send anything at all. This could mean that the source and destination accounts are not linked by trust lines.                                                                                                                                                                                                                                                                                                                                   |\n| `tecPATH_PARTIAL`                  | 101   | The transaction failed because the provided paths did not have enough liquidity to send the full amount.                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `tecTOO_SOON`                      | 152   | The \\[AccountDelete transaction]\\[] failed because the account to be deleted had a `Sequence` number that is too high. The current ledger index must be at least 256 higher than the account's sequence number.                                                                                                                                                                                                                                                                                                                    |\n| `tecUNFUNDED`                      | 129   | The transaction failed because the account does not hold enough XAH to pay the amount in the transaction _and_ satisfy the additional reserve necessary to execute this transaction.                                                                                                                                                                                                                                                                                                                                               |\n| `tecUNFUNDED_ADD`                  | 102   ||\n| `tecUNFUNDED_PAYMENT`              | 104   | The transaction failed because the sending account is trying to send more XAH than it holds, not counting the reserve.                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `tecUNFUNDED_OFFER`                | 103   | The \\[OfferCreate transaction]\\[] failed because the account creating the offer does not have any of the `TakerGets` currency.                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `tecREQUIRES_FLAG`                 | 169   | The SetHook transaction]\\[] failed because of an incorrect Flag and Field combination.                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `tecPRECISION_LOSS`                | 170   | The transaction failed because the result would end with significant precision loss.                                                                                                                                                                                                                                                                                                                                                                                                                                               |","src/content/docs/docs/protocol-reference/transactions/transaction-results/tec-codes.mdx","a269d68728f64269","docs/protocol-reference/transactions/transaction-results/tef-codes",{"id":1939,"data":1941,"body":1946,"filePath":1947,"digest":1948,"deferredRender":14},{"title":1942,"editUrl":14,"head":1943,"template":16,"sidebar":1944,"pagefind":14,"draft":18},"TEF Codes",[],{"hidden":18,"attrs":1945},{},"These codes indicate that the transaction failed and was not included in a ledger, but the transaction could have succeeded in some theoretical ledger. Typically this means that the transaction can no longer succeed in any future ledger. They have numerical values in the range of -199 to -100. The exact code for any given error is subject to change, so don't rely on it.\n\n**Caution:** Transactions with `tef` codes are not applied to ledgers and cannot cause any changes to the Xahau state. However, a transaction that provisionally failed may still succeed or fail with a different code after being reapplied. For more information, see Finality of Results and Reliable Transaction Submission.\n\n| Code                             | Explanation                                                                                                                                                                                                                                                                                                      |\n| -------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tefALREADY`                     | The same exact transaction has already been applied.                                                                                                                                                                                                                                                             |\n| `tefBAD_ADD_AUTH`                | **DEPRECATED.**                                                                                                                                                                                                                                                                                                  |\n| `tefBAD_AUTH`                    | The key used to sign this account is not authorized to modify this account. (It could be authorized if the account had the same key set as the Regular Key.)                                                                                                                                                     |\n| `tefBAD_AUTH_MASTER`             | The single signature provided to authorize this transaction does not match the master key, but no regular key is associated with this address.                                                                                                                                                                   |\n| `tefBAD_LEDGER`                  | While processing the transaction, the ledger was discovered in an unexpected state. If you can reproduce this error, please [report an issue](https://github.com/ripple/rippled/issues) to get it fixed.                                                                                                         |\n| `tefBAD_QUORUM`                  | The transaction was multi-signed, but the total weights of all included signatures did not meet the quorum.                                                                                                                                                                                                      |\n| `tefBAD_SIGNATURE`               | The transaction was multi-signed, but contained a signature for an address not part of a SignerList associated with the sending account.                                                                                                                                                                         |\n| `tefCREATED`                     | **DEPRECATED.**                                                                                                                                                                                                                                                                                                  |\n| `tefEXCEPTION`                   | While processing the transaction, the server entered an unexpected state. This may be caused by unexpected inputs, for example if the binary data for the transaction is grossly malformed. If you can reproduce this error, please [report an issue](https://github.com/ripple/rippled/issues) to get it fixed. |\n| `tefFAILURE`                     | Unspecified failure in applying the transaction.                                                                                                                                                                                                                                                                 |\n| `tefINTERNAL`                    | When trying to apply the transaction, the server entered an unexpected state. If you can reproduce this error, please [report an issue](https://github.com/ripple/rippled/issues) to get it fixed.                                                                                                               |\n| `tefINVARIANT_FAILED`            | An invariant check failed when trying to claim the transaction cost. Added by the \\[EnforceInvariants amendment]\\[]. If you can reproduce this error, please [report an issue](https://github.com/ripple/rippled/issues).                                                                                        |\n| `tefMASTER_DISABLED`             | The transaction was signed with the account's master key, but the account has the `lsfDisableMaster` field set.                                                                                                                                                                                                  |\n| `tefMAX_LEDGER`                  | The transaction included a `LastLedgerSequence` parameter, but the current ledger's sequence number is already higher than the specified value.                                                                                                                                                                  |\n| `tefNFTOKEN_IS_NOT_TRANSFERABLE` | The transaction attempted to send a non-fungible token to another account, but the `NFToken` has the `lsfTransferable` flag disabled and the transfer would not be to or from the issuer. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                               |\n| `tefNO_AUTH_REQUIRED`            | The \\[TrustSet transaction]\\[] tried to mark a trust line as authorized, but the `lsfRequireAuth` flag is not enabled for the corresponding account, so authorization is not necessary.                                                                                                                          |\n| `tefNO_TICKET`                   | The transaction attempted to use a Ticket, but the specified `TicketSequence` number does not exist in the ledger, and cannot be created in the future because it is earlier than the sender's current sequence number.                                                                                          |\n| `tefNOT_MULTI_SIGNING`           | The transaction was multi-signed, but the sending account has no SignerList defined.                                                                                                                                                                                                                             |\n| `tefPAST_SEQ`                    | The sequence number of the transaction is lower than the current sequence number of the account sending the transaction.                                                                                                                                                                                         |\n| `tefTOO_BIG`                     | The transaction would affect too many objects in the ledger. For example, this was an \\[AccountDelete transaction]\\[] but the account to be deleted owns over 1000 objects in the ledger.                                                                                                                        |\n| `tefWRONG_PRIOR`                 | The transaction contained an `AccountTxnID` field (or the deprecated `PreviousTxnID` field), but the transaction specified there does not match the account's previous transaction.                                                                                                                              |\n| `tefPAST_IMPORT_SEQ`             | The transaction failed because the import sequence number has already been used.                                                                                                                                                                                                                                 |\n| `tefPAST_IMPORT_VL_SEQ`          | The transaction failed because the import validator list sequence number has already been used.                                                                                                                                                                                                                  |","src/content/docs/docs/protocol-reference/transactions/transaction-results/tef-codes.mdx","f269e7e6f05650e9","docs/protocol-reference/transactions/transaction-results/tel-codes",{"id":1949,"data":1951,"body":1956,"filePath":1957,"digest":1958,"deferredRender":14},{"title":1952,"editUrl":14,"head":1953,"template":16,"sidebar":1954,"pagefind":14,"draft":18},"TEL Codes",[],{"hidden":18,"attrs":1955},{},"These codes indicate an error in the local server processing the transaction; it is possible that another server with a different configuration or load level could process the transaction successfully. They have numerical values in the range of -399 to -300. The exact code for any given error is subject to change, so don't rely on it.\n\n**Caution:** Transactions with `tel` codes are not applied to ledgers and cannot cause any changes to the Xahau state. However, these transactions may be automatically cached and retried later. Transactions that provisionally failed may still succeed or fail with a different code after being reapplied. For more information, see Finality of Results and Reliable Transaction Submission.\n\n| Code                                   | Explanation|\n| -------------------------------------- ||\n| `telBAD_DOMAIN`                        | The transaction specified a domain value (for example, the `Domain` field of an \\[AccountSet transaction]\\[]) that cannot be used, probably because it is too long to store in the ledger.                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `telBAD_PATH_COUNT`                    | The transaction contains too many paths for the local server to process|\n| `telBAD_PUBLIC_KEY`                    | The transaction specified a public key value (for example, as the `MessageKey` field of an \\[AccountSet transaction]\\[]) that cannot be used, probably because it is not the right length.                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `telCAN_NOT_QUEUE`                     | The transaction did not meet the open ledger cost, but this server did not queue this transaction because it did not meet the queuing restrictions. For example, a transaction returns this code when the sender already has 10 other transactions in the queue. You can try again later or sign and submit a replacement transaction with a higher transaction cost in the `Fee` field.                                                                                                                                                                                                                                                                 |\n| `telCAN_NOT_QUEUE_BALANCE`             | The transaction did not meet the open ledger cost and also was not added to the transaction queue because the sum of potential XAH costs of already-queued transactions is greater than the expected balance of the account. You can try again later, or try submitting to a different server. \\[New in: rippled 0.70.2]\\[]                                                                                                                                                                                                                                                                                                                              |\n| `telCAN_NOT_QUEUE_BLOCKS`              | The transaction did not meet the open ledger cost and also was not added to the transaction queue. This transaction could not replace an existing transaction in the queue because it would block already-queued transactions from the same sender by changing authorization methods. (This includes all \\[SetRegularKey]\\[] and \\[SignerListSet]\\[] transactions, as well as \\[AccountSet]\\[] transactions that change the `RequireAuth`/`OptionalAuth`, `DisableMaster`, or `AccountTxnID` flags.) You can try again later, or try submitting to a different server. \\[New in: rippled 0.70.2]\\[]                                                      |\n| `telCAN_NOT_QUEUE_BLOCKED`             | The transaction did not meet the open ledger cost and also was not added to the transaction queue because a transaction queued ahead of it from the same sender blocks it. (This includes all \\[SetRegularKey]\\[] and \\[SignerListSet]\\[] transactions, as well as \\[AccountSet]\\[] transactions that change the `RequireAuth`/`OptionalAuth`, `DisableMaster`, or `AccountTxnID` flags.) You can try again later, or try submitting to a different server. \\[New in: rippled 0.70.2]\\[]                                                                                                                                                                 |\n| `telCAN_NOT_QUEUE_FEE`                 | The transaction did not meet the open ledger cost and also was not added to the transaction queue. This code occurs when a transaction with the same sender and sequence number already exists in the queue and the new one does not pay a large enough transaction cost to replace the existing transaction. To replace a transaction in the queue, the new transaction must have a `Fee` value that is at least 25% more, as measured in fee levels. You can increase the `Fee` and try again, send this with a higher `Sequence` number so it doesn't replace an existing transaction, or try sending to another server. \\[New in: rippled 0.70.2]\\[] |\n| `telCAN_NOT_QUEUE_FULL`                | The transaction did not meet the open ledger cost and the server did not queue this transaction because this server's transaction queue is full. You could increase the `Fee` and try again, try again later, or try submitting to a different server. The new transaction must have a higher transaction cost, as measured in fee levels, than the transaction in the queue with the smallest transaction cost. \\[New in: rippled 0.70.2]\\[]                                                                                                                                                                                                            |\n| `telFAILED_PROCESSING`                 | An unspecified error occurred when processing the transaction|\n| `telINSUF_FEE_P`                       | The `Fee` from the transaction is not high enough to meet the server's current transaction cost requirement, which is derived from its load level and network-level requirements. If the individual server is too busy to process your transaction right now, it may cache the transaction and automatically retry later.                                                                                                                                                                                                                                                                                                                                |\n| `telLOCAL_ERROR`                       | Unspecified local error|\n| `telNO_DST`_`PARTIAL`                 | The transaction is an XAH payment that would fund a new account, but the `tfPartialPayment` flag was enabled. This is disallowed|\n| `telWRONG_NETWORK`                     | The transaction specifies the wrong `NetworkID` value for the current network. Either specify the correct the `NetworkID` value for the intended network, or submit the transaction to a server that is connected to the correct network.                                                                                                                                                                                                                                                                                                                                                                                                                |\n| `telREQUIRES_NETWORK_ID`              | The transaction does not specify a `NetworkID` field, but the current network requires one. If the transaction was intended for a network that requires `NetworkID`, add the field and try again. If the transaction was intended for a different network, submit it to a server that is connected to the correct network.                                                                                                                                                                                                                                                                                                                               |\n| `telNETWORK_ID_MAKES_TX_NON_CANONICAL` | The transaction specified a `NetworkID` field, but the current network requires that the `NetworkID` is not submitted|\n| `telNON_LOCAL_EMITTED_TXN`             | The emitted transaction cannot be applied because it was not generated locally|\n| `telIMPORT_VL_KEY_NOT_RECOGNISED`      | The transaction was signed on a different network or the transaction was submitted to the wrong network. For `Import` transactions the validations must match the vl keys on receiving network.                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `telCAN_NOT_QUEUE_IMPORT`              | `Import` transaction was not able to be directly applied and cannot be queued|","src/content/docs/docs/protocol-reference/transactions/transaction-results/tel-codes.mdx","351b141acba1e6b5","docs/protocol-reference/transactions/transaction-results/tem-codes",{"id":1959,"data":1961,"body":1966,"filePath":1967,"digest":1968,"deferredRender":14},{"title":1962,"editUrl":14,"head":1963,"template":16,"sidebar":1964,"pagefind":14,"draft":18},"TEM Codes",[],{"hidden":18,"attrs":1965},{},"These codes indicate that the transaction was malformed, and cannot succeed according to the Xahau protocol. They have numerical values in the range of -299 to -200. The exact code for any given error is subject to change, so don't rely on it.\n\n**Tip:** Transactions with `tem` codes are not applied to ledgers, and cannot cause any changes to the Xahau state. A `tem` result is final unless the rules for a valid transaction change. (For example, using functionality from an Amendment before that amendment is enabled results in `temDISABLED`; such a transaction could succeed later if it becomes valid when the amendment is enabled.)\n\n| Code                           | Explanation                                                                                                                                                                                                                                                                            |\n| ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `temBAD_AMOUNT`                | An amount specified by the transaction (for example the destination `Amount` or `SendMax` values of a \\[Payment]\\[]) was invalid, possibly because it was a negative number.                                                                                                           |\n| `temBAD_AUTH_MASTER`           | The key used to sign this transaction does not match the master key for the account sending it, and the account does not have a Regular Key set.                                                                                                                                       |\n| `temBAD_CURRENCY`              | The transaction improperly specified a currency field. See \\[Specifying Currency Amounts]\\[Currency Amount] for the correct format.                                                                                                                                                    |\n| `temBAD_EXPIRATION`            | The transaction improperly specified an expiration value, for example as part of an \\[OfferCreate transaction]\\[]. Alternatively, the transaction did not specify a required expiration value, for example as part of an \\[EscrowCreate transaction]\\[].                               |\n| `temBAD_FEE`                   | The transaction improperly specified its `Fee` value, for example by listing a non-XAH currency or some negative amount of XAH.                                                                                                                                                        |\n| `temBAD_ISSUER`                | The transaction improperly specified the `issuer` field of some currency included in the request.                                                                                                                                                                                      |\n| `temBAD_LIMIT`                 | The \\[TrustSet transaction]\\[] improperly specified the `LimitAmount` value of a trust line.                                                                                                                                                                                           |\n| `temBAD_NFTOKEN_TRANSFER_FEE`  | The \\[NFTokenMint transaction]\\[] improperly specified the `TransferFee` field of the transaction. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                            |\n| `temBAD_OFFER`                 | The \\[OfferCreate transaction]\\[] specifies an invalid offer, such as offering to trade XAH for itself, or offering a negative amount.                                                                                                                                                 |\n| `temBAD_PATH`                  | The \\[Payment transaction]\\[] specifies one or more Paths improperly, for example including an issuer for XAH, or specifying an account differently.                                                                                                                                   |\n| `temBAD_PATH_LOOP`             | One of the Paths in the \\[Payment transaction]\\[] was flagged as a loop, so it cannot be processed in a bounded amount of time.                                                                                                                                                        |\n| `temBAD_SEND_NATIVE_LIMIT`     | The \\[Payment transaction]\\[] used the `tfLimitQuality` flag in a direct XAH-to-XAH payment, even though XAH-to-XAH payments do not involve any conversions.                                                                                                                           |\n| `temBAD_SEND_NATIVE_MAX`       | The \\[Payment transaction]\\[] included a `SendMax` field in a direct XAH-to-XAH payment, even though sending XAH should never require `SendMax`. (XAH is only valid in `SendMax` if the destination `Amount` is not XAH.)                                                              |\n| `temBAD_SEND_NATIVE_NO_DIRECT` | The \\[Payment transaction]\\[] used the `tfNoDirectRipple` flag for a direct XAH-to-XAH payment, even though XAH-to-XAH payments are always direct.                                                                                                                                     |\n| `temBAD_SEND_NATIVE_PARTIAL`   | The \\[Payment transaction]\\[] used the `tfPartialPayment` flag for a direct XAH-to-XAH payment, even though XAH-to-XAH payments should always deliver the full amount.                                                                                                                 |\n| `temBAD_SEND_NATIVE_PATHS`     | The \\[Payment transaction]\\[] included `Paths` while sending XAH, even though XAH-to-XAH payments should always be direct.                                                                                                                                                             |\n| `temBAD_SEQUENCE`              | The transaction is references a sequence number that is higher than its own `Sequence` number, for example trying to cancel an offer that would have to be placed after the transaction that cancels it.                                                                               |\n| `temBAD_SIGNATURE`             | The signature to authorize this transaction is either missing, or formed in a way that is not a properly-formed signature. (See `tecNO_PERMISSION` for the case where the signature is properly formed, but not authorized for this account.)                                          |\n| `temBAD_SRC_ACCOUNT`           | The `Account` on whose behalf this transaction is being sent (the \"source account\") is not a properly-formed account address.                                                                                                                                                          |\n| `temBAD_TRANSFER_RATE`         | The `TransferRate` field of an AccountSet transaction is not properly formatted or out of the acceptable range.                                                                                                                                                                        |\n| `temCANNOT_PREAUTH_SELF`       | The sender of the \\[DepositPreauth transaction]\\[] was also specified as the account to preauthorize. You cannot preauthorize yourself.                                                                                                                                                |\n| `temDST_IS_SRC`                | The transaction improperly specified a destination address as the `Account` sending the transaction. This includes trust lines (where the destination address is the `issuer` field of `LimitAmount`) and payment channels (where the destination address is the `Destination` field). |\n| `temDST_NEEDED`                | The transaction improperly omitted a destination. This could be the `Destination` field of a \\[Payment transaction]\\[], or the `issuer` sub-field of the `LimitAmount` field fo a `TrustSet` transaction.                                                                              |\n| `temINVALID`                   | The transaction is otherwise invalid. For example, the transaction ID may not be the right format, the signature may not be formed properly, or something else went wrong in understanding the transaction.                                                                            |\n| `temINVALID_COUNT`             | The transaction includes a `TicketCount` field, but the number of Tickets specified is invalid.                                                                                                                                                                                        |\n| `temINVALID_FLAG`              | The transaction includes a Flag that does not exist, or includes a contradictory combination of flags.                                                                                                                                                                                 |\n| `temMALFORMED`                 | Unspecified problem with the format of the transaction.                                                                                                                                                                                                                                |\n| `temREDUNDANT`                 | The transaction would do nothing; for example, it is sending a payment directly to the sending account, or creating an offer to buy and sell the same currency from the same issuer.                                                                                                   |\n| `temREDUNDANT_SEND_MAX`        | \\[Removed in: rippled 0.28.0]\\[]                                                                                                                                                                                                                                                       |\n| `temRIPPLE_EMPTY`              | The \\[Payment transaction]\\[] includes an empty `Paths` field, but paths are necessary to complete this payment.                                                                                                                                                                       |\n| `temBAD_WEIGHT`                | The \\[SignerListSet transaction]\\[] includes a `SignerWeight` that is invalid, for example a zero or negative value.                                                                                                                                                                   |\n| `temBAD_SIGNER`                | The \\[SignerListSet transaction]\\[] includes a signer who is invalid. For example, there may be duplicate entries, or the owner of the SignerList may also be a member.                                                                                                                |\n| `temBAD_QUORUM`                | The \\[SignerListSet transaction]\\[] has an invalid `SignerQuorum` value. Either the value is not greater than zero, or it is more than the sum of all signers in the list.                                                                                                             |\n| `temUNCERTAIN`                 | Used internally only. This code should never be returned.                                                                                                                                                                                                                              |\n| `temUNKNOWN`                   | Used internally only. This code should never be returned.                                                                                                                                                                                                                              |\n| `temDISABLED`                  | The transaction requires logic that is disabled. Typically this means you are trying to use an amendment that is not enabled for the current ledger.                                                                                                                                   |\n| `temHOOK_DATA_TOO_LARGE`       | The transaction `CreateCode` field contains more than 256 bytes.                                                                                                                                                                                                                       |","src/content/docs/docs/protocol-reference/transactions/transaction-results/tem-codes.mdx","e744589d76c3446a","docs/protocol-reference/transactions/transaction-results/ter-codes",{"id":1969,"data":1971,"body":1976,"filePath":1977,"digest":1978,"deferredRender":14},{"title":1972,"editUrl":14,"head":1973,"template":16,"sidebar":1974,"pagefind":14,"draft":18},"TER Codes",[],{"hidden":18,"attrs":1975},{},"These codes indicate that the transaction failed, but it could apply successfully in the future, usually if some other hypothetical transaction applies first. They have numerical values in the range of -99 to -1. The exact code for any given error is subject to change, so don't rely on it.\n\n**Caution:** Transactions with `ter` codes are not applied to the current ledger and cannot cause any changes to the Xahau state. However, a transaction that provisionally failed may still succeed or fail with a different code after being automatically reapplied. For more information, see Finality of Results and Reliable Transaction Submission.\n\n| Code             | Explanation                                                                                                                                                                                                                      |\n| ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `terFUNDS_SPENT` | **DEPRECATED.**                                                                                                                                                                                                                  |\n| `terINSUF_FEE_B` | The account sending the transaction does not have enough XAH to pay the `Fee` specified in the transaction.                                                                                                                      |\n| `terLAST`        | Used internally only. This code should never be returned.                                                                                                                                                                        |\n| `terNO_ACCOUNT`  | The address sending the transaction is not funded in the ledger (yet).                                                                                                                                                           |\n| `terNO_AUTH`     | The transaction would involve adding currency issued by an account with `lsfRequireAuth` enabled to a trust line that is not authorized. For example, you placed an offer to buy a currency you aren't authorized to hold.       |\n| `terNO_LINE`     | Used internally only. This code should never be returned.                                                                                                                                                                        |\n| `terNO_RIPPLE`   | Used internally only. This code should never be returned.                                                                                                                                                                        |\n| `terOWNERS`      | The transaction requires that account sending it has a nonzero \"owners count\", so the transaction cannot succeed. For example, an account cannot enable the `lsfRequireAuth` flag if it has any trust lines or available offers. |\n| `terPRE_SEQ`     | The `Sequence` number of the current transaction is higher than the current sequence number of the account sending the transaction.                                                                                              |\n| `terPRE_TICKET`  | The transaction attempted to use a Ticket, but the specified `TicketSequence` number does not exist in the ledger. However, the Ticket could still be created by another transaction.                                            |\n| `terRETRY`       | Unspecified retriable error.                                                                                                                                                                                                     |\n| `terQUEUED`      | The transaction met the load-scaled transaction cost but did not meet the open ledger requirement, so the transaction has been queued for a future ledger.                                                                       |\n| `terNO_HOOK`     | The transaction attempted to use a `HookHash` that doesn't exist on the ledger.                                                                                                                                                  |","src/content/docs/docs/protocol-reference/transactions/transaction-results/ter-codes.mdx","7b9fdffba215310d","docs/protocol-reference/transactions/transaction-results/tes-codes",{"id":1979,"data":1981,"body":1986,"filePath":1987,"digest":1988,"deferredRender":14},{"title":1982,"editUrl":14,"head":1983,"template":16,"sidebar":1984,"pagefind":14,"draft":18},"TES Codes",[],{"hidden":18,"attrs":1985},{},"The codes `tesSUCCESS`  and `tesPARTIAL` are the only codes that indicates a transaction succeeded. This does not always mean it accomplished what you expected it to do. (For example, an \\[OfferCancel]\\[] can \"succeed\" even if there is no offer for it to cancel.)&#x20;\n\nThe `tesPARTIAL` code indicates that a transaction has partially succeeded. Specifically, it is used in scenarios where an operation, such as deleting hook state records, exceeds a certain limit (e.g., 512 or 1024 records). In such cases, the transaction deletes up to the limit and then requires you to submit additional transactions with new sequence numbers to continue the deletion process until all records are removed. This ensures that large operations are broken down into manageable parts.\n\n| Code         | Explanation                                                                                                                                               |\n| ------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tesSUCCESS` | The transaction was applied and forwarded to other servers. If this appears in a validated ledger, then the transaction's success is final.               |\n| `tesPARTIAL` | The transaction partially succeeded and requires additional transactions to complete large operations, such as deleting more than a set limit of records. |","src/content/docs/docs/protocol-reference/transactions/transaction-results/tes-codes.mdx","3ebaef7c75475f9b","docs/protocol-reference/transactions/transaction-types/accountdelete",{"id":1989,"data":1991,"body":2000,"filePath":2001,"digest":2002,"deferredRender":14},{"title":1992,"description":1993,"editUrl":14,"head":1994,"template":16,"sidebar":1995,"pagefind":14,"draft":18},"AccountDelete","An AccountDelete transaction deletes an account and any objects it owns in Xahau, if possible, sending the account's remaining XAH to a specified destination account.",[],{"hidden":18,"badge":1996,"attrs":1999},{"variant":1997,"text":1998},"danger","Disabled",{},"import { Aside } from '@astrojs/starlight/components';\n\n\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/DeleteAccount.cpp)]\n\n_Added by the DeletableAccounts amendment_\n\n\u003CAside type=\"danger\" title=\"Not enabled\">\nThe _DeletableAccounts_ amendment is not enabled at this time.\n\u003C/Aside>\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"AccountDelete\",\n    \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n    \"Destination\": \"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\",\n    \"DestinationTag\": 13,\n    \"Fee\": \"2000000\",\n    \"Sequence\": 2470665,\n    \"Flags\": 2147483648\n}\n```\n\n| Field            | JSON Type              | \\[Internal Type]\\[] | Description                                                                                                                                                            |\n| ---------------- | ---------------------- | ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Destination`    | String - \\[Address]\\[] | AccountID           | The address of an account to receive any leftover XAH after deleting the sending account. Must be a funded account in the ledger, and must not be the sending account. |\n| `DestinationTag` | Number                 | UInt32              | _(Optional)_ Arbitrary destination tag that identifies a hosted recipient or other information for the recipient of the deleted account's leftover XAH.                |\n\n### Special Transaction Cost\n\nAs an additional deterrent against ledger spam, the AccountDelete transaction requires a much higher than usual transaction cost: instead of the standard minimum of 0.00001 XAH, AccountDelete must destroy at least the owner reserve amount, currently 2 XRP. This discourages excessive creation of new accounts because the reserve requirement cannot be fully recouped by deleting the account.\n\nThe transaction cost always applies when a transaction is included in a validated ledger, even if the transaction fails to delete the account. (See Error Cases.) To greatly reduce the chances of paying the high transaction cost if the account cannot be deleted, submit the transaction with `fail_hard` enabled.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, AccountDelete transactions can result in the following transaction result codes:\n\n| Error Code           | Description                                                                                                                                                                                                                                                                                                                         |\n| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `temDISABLED`        | Occurs if the DeletableAccounts amendment is not enabled.                                                                                                                                                                                                                                                                           |\n| `temDST_IS_SRC`      | Occurs if the `Destination` matches the sender of the transaction (`Account` field).                                                                                                                                                                                                                                                |\n| `tecDST_TAG_NEEDED`  | Occurs if the `Destination` account requires a destination tag, but the `DestinationTag` field was not provided.                                                                                                                                                                                                                    |\n| `tecNO_DST`          | Occurs if the `Destination` account is not a funded account in the ledger.                                                                                                                                                                                                                                                          |\n| `tecNO_PERMISSION`   | Occurs if the `Destination` account requires deposit authorization and the sender is not preauthorized.                                                                                                                                                                                                                             |\n| `tecTOO_SOON`        | Occurs if the sender's `Sequence` number is too high. The transaction's `Sequence` number plus 256 must be less than the current \\[Ledger Index]\\[]. This prevents replay of old transactions if this account is resurrected after it is deleted.                                                                                   |\n| `tecHAS_OBLIGATIONS` | Occurs if the account to be deleted is connected to objects that cannot be deleted in the ledger. (This includes objects created by other accounts, such as escrows and for example NFT's minted, [even if owned by another account](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/DeleteAccount.cpp#L197).) |\n| `tefTOO_BIG`         | Occurs if the sending account is linked to more than 1000 objects in the ledger. The transaction could succeed on retry if some of those objects were deleted separately first.                                                                                                                                                     |","src/content/docs/docs/protocol-reference/transactions/transaction-types/accountdelete.mdx","b2fc5c7cacb3a0eb","docs/protocol-reference/transactions/transaction-types/accountset",{"id":2003,"data":2005,"body":2011,"filePath":2012,"digest":2013,"deferredRender":14},{"title":2006,"description":2007,"editUrl":14,"head":2008,"template":16,"sidebar":2009,"pagefind":14,"draft":18},"AccountSet","An AccountSet transaction modifies the properties of an account in Xahau.",[],{"hidden":18,"attrs":2010},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/SetAccount.cpp)]\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"AccountSet\",\n    \"Account\" : \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"Fee\": \"12\",\n    \"Sequence\": 5,\n    \"Domain\": \"6578616D706C652E636F6D\",\n    \"SetFlag\": 5,\n    \"MessageKey\": \"03AB40A0490F9B7ED8DF29D246BF2D6269820A0EE7742ACDD457BEA7C7D0931EDB\"\n}\n```\n\n| Field           | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                                               |\n| --------------- | --------- | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `ClearFlag`     | Number    | UInt32              | _(Optional)_ Unique identifier of a flag to disable for this account.                                                                                                                                                                                                                     |\n| `Domain`        | String    | Blob                | _(Optional)_ The domain that owns this account, as a string of hex representing the ASCII for the domain in lowercase. [Cannot be more than 256 bytes in length.](https://github.com/Xahau/xahaud/blob/55dc7a252e08a0b02cd5aa39e9b4777af3eafe77/src/ripple/app/tx/impl/SetAccount.h#L34) |\n| `EmailHash`     | String    | Hash128             | _(Optional)_ An arbitrary 128-bit value. Conventionally, clients treat this as the md5 hash of an email address to use for displaying a [Gravatar](http://en.gravatar.com/site/implement/hash/) image.                                                                                    |\n| `MessageKey`    | String    | Blob                | _(Optional)_ Public key for sending encrypted messages to this account. To set the key, it must be exactly 33 bytes, with the first byte indicating the key type: `0x02` or `0x03` for secp256k1 keys, `0xED` for Ed25519 keys. To remove the key, use an empty value.                    |\n| `NFTokenMinter` | String    | Blob                | _(Optional)_ Another account that can mint NFTokens for you. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_                                                                                                                                                                     |\n| `SetFlag`       | Number    | UInt32              | _(Optional)_ Integer flag to enable for this account.                                                                                                                                                                                                                                     |\n| `TransferRate`  | Number    | UInt32              | _(Optional)_ The fee to charge when users transfer this account's tokens, represented as billionths of a unit. Cannot be more than `2000000000` or less than `1000000000`, except for the special case `0` meaning no fee.                                                                |\n| `TickSize`      | Number    | UInt8               | _(Optional)_ Tick size to use for offers involving a currency issued by this address. The exchange rates of those offers is rounded to this many significant digits. Valid values are `3` to `15` inclusive, or `0` to disable. _(Added by the \\[TickSize amendment]\\[])_                 |\n| `WalletLocator` | String    | Hash256             | _(Optional)_ An arbitrary 256-bit value. If specified, the value is stored as part of the account but has no inherent meaning or requirements.                                                                                                                                            |\n| `WalletSize`    | Number    | UInt32              | _(Optional)_ Not used. This field is valid in AccountSet transactions but does nothing.                                                                                                                                                                                                   |\n\nIf none of these options are provided, then the AccountSet transaction has no effect (beyond destroying the transaction cost). See Cancel or Skip a Transaction for more details.\n\n### Domain\n\nThe `Domain` field is represented as the hex string of the lowercase ASCII of the domain. For example, the domain _example.com_ would be represented as `\"6578616D706C652E636F6D\"`.\n\nTo remove the `Domain` field from an account, send an AccountSet with the Domain set to an empty string.\n\nYou can put any domain in your account's `Domain` field. To prove that an account and domain belong to the same person or business, you need a \"two-way link\":\n\n* Accounts you own should have a domain you own in the `Domain` field.\n* At that domain, host an xah-ledger.toml file listing accounts you own, and optionally other information about how you use Xahau.\n\n### AccountSet Flags\n\nThere are several options which can be either enabled or disabled for an account. Account options are represented by different types of flags depending on the situation:\n\n* The `AccountSet` transaction type has several \"AccountSet Flags\" (prefixed **`asf`**) that can enable an option when passed as the `SetFlag` parameter, or disable an option when passed as the `ClearFlag` parameter. Newer options have only this style of flag. You can enable up to one `asf` flag per transaction, and disable up to one `asf` flag per transaction.\n* The `AccountSet` transaction type has several transaction flags (prefixed **`tf`**) that can be used to enable or disable specific account options when passed in the `Flags` parameter. You can enable and disable a combination of settings in one transaction using multiple `tf` flags, but not all settings have `tf` flags.\n* The `AccountRoot` ledger object type has several ledger-state-flags (prefixed **`lsf`**) which represent the state of particular account options within a particular ledger. These settings apply until a transaction changes them.\n\nTo enable or disable Account Flags, use the `SetFlag` and `ClearFlag` parameters of an AccountSet transaction. AccountSet flags have names that begin with **`asf`**.\n\nAll flags are disabled by default.\n\nThe available AccountSet flags are:\n\n| Flag Name                         | Decimal Value | Corresponding Ledger Flag         | Description                                                                                                                                                                                                                                                                                                                           |\n| --------------------------------- | ------------- | --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `asfAccountTxnID`                 | 5             | (None)                            | Track the ID of this account's most recent transaction. Required for `AccountTxnID`                                                                                                                                                                                                                                                   |\n| `asfAuthorizedNFTokenMinter`      | 10            | (None)                            | Enable to allow another account to mint non-fungible tokens (NFTokens) on this account's behalf. Specify the authorized account in the `NFTokenMinter` field of the AccountRoot object. To remove an authorized minter, enable this flag and omit the `NFTokenMinter` field. _(Added by the \\[NonFungibleTokensV1_1 amendment]\\[].)_ |\n| `asfDefaultRipple`                | 8             | `lsfDefaultRipple`                | Enable rippling on this account's trust lines by default.                                                                                                                                                                                                                                                                             |\n| `asfDepositAuth`                  | 9             | `lsfDepositAuth`                  | Enable Deposit Authorization on this account. _(Added by the \\[DepositAuth amendment]\\[].)_                                                                                                                                                                                                                                           |\n| `asfDisableMaster`                | 4             | `lsfDisableMaster`                | Disallow use of the master key pair. Can only be enabled if the account has configured another way to sign transactions, such as a Regular Key or a Signer List.                                                                                                                                                                      |\n| `asfDisallowIncomingCheck`        | 13            | `lsfDisallowIncomingCheck`        | Block incoming Checks. _Added by the \\[DisallowIncoming amendment]\\[]._                                                                                                                                                                                                                                                               |\n| `asfDisallowIncomingNFTokenOffer` | 12            | `lsfDisallowIncomingNFTokenOffer` | Block incoming NFTokenOffers.  _Added by the \\[DisallowIncoming amendment]\\[]._                                                                                                                                                                                                                                                       |\n| `asfDisallowIncomingPayChan`      | 14            | `lsfDisallowIncomingPayChan`      | Block incoming Payment Channels. _Added by the \\[DisallowIncoming amendment]\\[]._                                                                                                                                                                                                                                                     |\n| `asfDisallowIncomingTrustline`    | 15            | `lsfDisallowIncomingTrustline`    | Block incoming trust lines._Added by the \\[DisallowIncoming amendment]\\[]._                                                                                                                                                                                                                                                           |\n| `asfDisallowIncomingRemit`        | 16            | `lsfDisallowIncomingRemit`        | Block incoming Remit txn._Added by the \\[Remit amendment]\\[]._                                                                                                                                                                                                                                                                        |\n| `asfDisallowXRP`                  | 3             | `lsfDisallowXRP`                  | XAH should not be sent to this account. (Advisory; not enforced by Xahau protocol.)                                                                                                                                                                                                                                                   |\n| `asfGlobalFreeze`                 | 7             | `lsfGlobalFreeze`                 | Freeze all assets issued by this account.                                                                                                                                                                                                                                                                                             |\n| `asfNoFreeze`                     | 6             | `lsfNoFreeze`                     | Permanently give up the ability to freeze individual trust lines or disable Global Freeze. This flag can never be disabled after being enabled.                                                                                                                                                                                       |\n| `asfRequireAuth`                  | 2             | `lsfRequireAuth`                  | Require authorization for users to hold balances issued by this address. Can only be enabled if the address has no trust lines connected to it.                                                                                                                                                                                       |\n| `asfRequireDest`                  | 1             | `lsfRequireDestTag`               | Require a destination tag to send transactions to this account.                                                                                                                                                                                                                                                                       |\n| `asfTshCollect`                   | 11            | `lsfTshCollect`                   | The TSH pays for the execution of their own Hook Chain. _Added by the \\[Hooks amendment]\\[]._                                                                                                                                                                                                                                         |\n\nTo enable the `asfDisableMaster` or `asfNoFreeze` flags, you must authorize the transaction by signing it with the master key pair. You cannot use a regular key pair or a multi-signature. You can disable `asfDisableMaster` (that is, re-enable the master key pair) using a regular key pair or multi-signature.\n\nThe following Transaction flags (`tf` flags), specific to the AccountSet transaction type, serve the same purpose. Due to limited space, some settings do not have associated `tf` flags, and new `tf` flags are not being added to the `AccountSet` transaction type. You can use a combination of `tf` and `asf` flags to enable multiple settings with a single transaction.\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Flag Name\u003C/th>\u003Cth>Hex Value\u003C/th>\u003Cth width=\"183\">Decimal Value\u003C/th>\u003Cth>Replaced by AccountSet Flag\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ccode>tfRequireDestTag\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00010000\u003C/code>\u003C/td>\u003Ctd>65536\u003C/td>\u003Ctd>\u003Ccode>asfRequireDest\u003C/code> (\u003Ccode>SetFlag\u003C/code>)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>tfOptionalDestTag\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00020000\u003C/code>\u003C/td>\u003Ctd>131072\u003C/td>\u003Ctd>\u003Ccode>asfRequireDest\u003C/code> (\u003Ccode>ClearFlag\u003C/code>)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>tfRequireAuth\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00040000\u003C/code>\u003C/td>\u003Ctd>262144\u003C/td>\u003Ctd>\u003Ccode>asfRequireAuth\u003C/code> (\u003Ccode>SetFlag\u003C/code>)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>tfOptionalAuth\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00080000\u003C/code>\u003C/td>\u003Ctd>524288\u003C/td>\u003Ctd>\u003Ccode>asfRequireAuth\u003C/code> (\u003Ccode>ClearFlag\u003C/code>)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>tfDisallowXRP\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00100000\u003C/code>\u003C/td>\u003Ctd>1048576\u003C/td>\u003Ctd>\u003Ccode>asfDisallowXRP\u003C/code> (\u003Ccode>SetFlag\u003C/code>)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>tfAllowXRP\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>0x00200000\u003C/code>\u003C/td>\u003Ctd>2097152\u003C/td>\u003Ctd>\u003Ccode>asfDisallowXRP\u003C/code> (\u003Ccode>ClearFlag\u003C/code>)\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\n**Caution:** The numeric values of `tf` and `asf` flags in transactions do not match up with the values they set in the accounts \"at rest\" in the ledger. To read the flags of an account in the ledger, see `AccountRoot` flags.\n\n#### Blocking Incoming Transactions\n\nIncoming transactions with unclear purposes may be an inconvenience for financial institutions, who would have to recognize when a customer made a mistake, and then potentially refund accounts or adjust balances depending on the mistake. The `asfRequireDest` and `asfDisallowXRP` flags are intended to protect users from accidentally sending funds in a way that is unclear about the reason the funds were sent.\n\nFor example, a destination tag is typically used to identify which hosted balance should be credited when a financial institution receives a payment. If the destination tag is omitted, it may be unclear which account should be credited, creating a need for refunds, among other problems. By using the `asfRequireDest` tag, you can ensure that every incoming payment has a destination tag, which makes it harder for others to send you an ambiguous payment by accident.\n\nYou can protect against unwanted incoming payments for non-XAH currencies by not creating trust lines in those currencies. Since XAH does not require trust, the `asfDisallowXRP` flag is used to discourage users from sending XAH to an account. However, this flag is not enforced in Xahau protocol because it could potentially cause accounts to become unusable if they run out of XAH. Instead, client applications should disallow or discourage XAH payments to accounts with the `asfDisallowXRP` flag enabled.\n\nIf you want to block _all_ incoming payments, you can enable Deposit Authorization. This prevents any transaction from sending money to you, even XAH, unless your account is below the reserve requirement.\n\nIf the \\[DisallowIncoming amendment]\\[] :not_enabled: is enabled, you also have the option to block all incoming Checks, NFTokenOffers, Payment Channels, and trust lines. It is generally harmless to be on the receiving end of these objects, but they can block you from deleting your account and it can be confusing to have objects you didn't expect mixed in with the list of objects you created. To block incoming objects, use one or more of these account flags:\n\n* `asfDisallowIncomingCheck` - for Check objects\n* `asfDisallowIncomingNFTOffer` - for NFTokenOffer objects\n* `asfDisallowIncomingPayChan` - for PayChannel objects\n* `asfDisallowIncomingTrustline` - for RippleState (trust line) objects\n\nWhen a transaction would create one of these ledger entries, if the destination account has the corresponding flag enabled, the transaction fails with the result code `tecNO_PERMISSION`. Unlike Deposit Authorization, these settings do not prevent you from receiving payments in general. Also, enabling this setting doesn't stop you from creating these types of objects yourself (unless the destination of your transaction is also using the setting, of course).\n\n### TransferRate\n\nThe `TransferRate` field specifies a fee to charge whenever counterparties transfer the currency you issue.\n\nIn the HTTP and WebSocket APIs, the transfer fee is represented as an integer, the amount that must be sent for 1 billion units to arrive. For example, a 20% transfer fee is represented as the value `1200000000`. The value cannot be less than 1000000000. (Less than that would indicate giving away money for sending transactions, which is exploitable.) You can specify `0` as a shortcut for `1000000000`, meaning no fee.\n\nSee Transfer Fees for more information.","src/content/docs/docs/protocol-reference/transactions/transaction-types/accountset.mdx","866b654c75996045","docs/protocol-reference/transactions/transaction-types/checkcash",{"id":2014,"data":2016,"body":2022,"filePath":2023,"digest":2024,"deferredRender":14},{"title":2017,"description":2018,"editUrl":14,"head":2019,"template":16,"sidebar":2020,"pagefind":14,"draft":18},"CheckCash","Attempts to redeem a Check object in the ledger to receive up to the amount authorized by the corresponding CheckCreate transaction.",[],{"hidden":18,"attrs":2021},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_(Added by the \\[Checks amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"Account\": \"rfkE1aSy9G8Upk4JssnwBxhEv5p4mn2KTy\",\n    \"TransactionType\": \"CheckCash\",\n    \"Amount\": \"100000000\",\n    \"CheckID\": \"838766BA2B995C00744175F69A1B11E32C3DBC40E64801A4056FCBD657F57334\",\n    \"Fee\": \"12\"\n}\n```\n\n| Field        | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                     |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `CheckID`    | String                                                                                                                             | Hash256             | The ID of the Check ledger object to cash, as a 64-character hexadecimal string.                                                                                                                                                |\n| `Amount`     | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | _(Optional)_ Redeem the Check for exactly this amount, if possible. The currency must match that of the `SendMax` of the corresponding CheckCreate transaction. You must provide either this field or `DeliverMin`.             |\n| `DeliverMin` | \\[Currency Amount]\\[]                                                                                                              | Amount              | _(Optional)_ Redeem the Check for at least this amount and for as much as possible. The currency must match that of the `SendMax` of the corresponding CheckCreate transaction. You must provide either this field or `Amount`. |\n\nThe transaction _**must**_ include either `Amount` or `DeliverMin`, but not both.\n\n### Error Cases\n\n* If the sender of the CheckCash transaction is not the `Destination` of the check, the transaction fails with the result code `tecNO_PERMISSION`.\n* If the Check identified by the `CheckID` field does not exist, the transaction fails with the result `tecNO_ENTRY`.\n* If the Check identified by the `CheckID` field has already expired, the transaction fails with the result `tecEXPIRED`.\n* If the destination of the Check has the `RequireDest` flag enabled but the Check, as created, does not have a destination tag, the transaction fails with the result code `tecDST_TAG_NEEDED`.\n* If the transaction specifies both `Amount` and `DeliverMin`, or omits both, the transaction fails with the result `temMALFORMED`.\n* If the `Amount` or `DeliverMin` does not match the currency (and issuer, if not XAH) of the Check, the transaction fails with the result `temBAD_CURRENCY`.","src/content/docs/docs/protocol-reference/transactions/transaction-types/checkcash.mdx","87cb0abc97c599b8","docs/protocol-reference/transactions/transaction-types/checkcancel",{"id":2025,"data":2027,"body":2033,"filePath":2034,"digest":2035,"deferredRender":14},{"title":2028,"description":2029,"editUrl":14,"head":2030,"template":16,"sidebar":2031,"pagefind":14,"draft":18},"CheckCancel","Cancels an unredeemed Check, removing it from the ledger without sending any money. The source or the destination of the check can cancel a Check at any time using this transaction type.",[],{"hidden":18,"attrs":2032},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_(Added by the \\[Checks amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"Account\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\",\n    \"TransactionType\": \"CheckCancel\",\n    \"CheckID\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\",\n    \"Fee\": \"12\"\n}\n```\n\n| Field     | JSON Type | \\[Internal Type]\\[] | Description                                                                        |\n| --------- | --------- | ------------------- | ---------------------------------------------------------------------------------- |\n| `CheckID` | String    | Hash256             | The ID of the Check ledger object to cancel, as a 64-character hexadecimal string. |\n\n### Error Cases\n\n* If the object identified by the `CheckID` does not exist or is not a Check, the transaction fails with the result `tecNO_ENTRY`.\n* If the Check is not expired and the sender of the CheckCancel transaction is not the source or destination of the Check, the transaction fails with the result `tecNO_PERMISSION`.","src/content/docs/docs/protocol-reference/transactions/transaction-types/checkcancel.mdx","2996c34d01f2382a","docs/protocol-reference/transactions/transaction-types/depositpreauth",{"id":2036,"data":2038,"body":2044,"filePath":2045,"digest":2046,"deferredRender":14},{"title":2039,"description":2040,"editUrl":14,"head":2041,"template":16,"sidebar":2042,"pagefind":14,"draft":18},"DepositPreauth","A DepositPreauth transaction gives another account pre-approval to deliver payments to the sender of this transaction.",[],{"hidden":18,"attrs":2043},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"tip\">\n  You can use this transaction to preauthorize certain counterparties before you enable Deposit Authorization. This may be useful to ensure a smooth transition from not requiring deposit authorization to requiring it.\n\u003C/Aside>\n\n\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_Added by the \\[DepositPreauth amendment]\\[]._\n\n### Example\n\n```json\n{\n  \"TransactionType\" : \"DepositPreauth\",\n  \"Account\" : \"rsUiUMpnrgxQp24dJYZDhmV4bE3aBtQyt8\",\n  \"Authorize\" : \"rEhxGqkqPPSxQ3P25J66ft5TwpzV14k2de\",\n  \"Fee\" : \"10\",\n  \"Flags\" : 2147483648,\n  \"Sequence\" : 2\n}\n```\n\n### Fields\n\n| Field         | JSON Type | \\[Internal Type]\\[] | Description                                                                      |\n| ------------- | --------- | ------------------- | -------------------------------------------------------------------------------- |\n| `Authorize`   | String    | AccountID           | _(Optional)_ Xahau address of the sender to preauthorize.                        |\n| `Unauthorize` | String    | AccountID           | _(Optional)_ Xahau address of a sender whose preauthorization should be revoked. |\n\nYou must provide _either_ `Authorize` or `Unauthorize`, but not both.\n\n### Error Cases\n\n* An account cannot preauthorize (or unauthorize) its own address. Attempting to do so fails with the result `temCANNOT_PREAUTH_SELF`.\n* Attempting to preauthorize an account which is already preauthorized fails with the result `tecDUPLICATE`.\n* Attempting to unauthorize an account which is not preauthorized fails with the result `tecNO_ENTRY`.\n* Attempting to preauthorize an address that is not funded in the ledger fails with the result `tecNO_TARGET`.\n* Adding authorization adds a DepositPreauth object to the ledger, which counts toward the owner reserve requirement. If the sender of the transaction does not have enough XAH to pay for the increased reserve, the transaction fails with the result `tecINSUFFICIENT_RESERVE`. If the sender of the account is already at the maximum number of owned objects, the transaction fails with the result `tecDIR_FULL`.","src/content/docs/docs/protocol-reference/transactions/transaction-types/depositpreauth.mdx","4ae68391f6a958c2","docs/protocol-reference/transactions/transaction-types/checkcreate",{"id":2047,"data":2049,"body":2055,"filePath":2056,"digest":2057,"deferredRender":14},{"title":2050,"description":2051,"editUrl":14,"head":2052,"template":16,"sidebar":2053,"pagefind":14,"draft":18},"CheckCreate","Create a Check object in the ledger, which is a deferred payment that can be cashed by its intended destination. The sender of this transaction is the sender of the Check.",[],{"hidden":18,"attrs":2054},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_(Added by the \\[Checks amendment]\\[].)_\n\n### Example\n\n```json\n{\n  \"TransactionType\": \"CheckCreate\",\n  \"Account\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\",\n  \"Destination\": \"rfkE1aSy9G8Upk4JssnwBxhEv5p4mn2KTy\",\n  \"SendMax\": \"100000000\",\n  \"Expiration\": 570113521,\n  \"InvoiceID\": \"6F1DFD1D0FE8A32E40E1F2C05CF1C15545BAB56B617F9C6C2D63A6B704BEF59B\",\n  \"DestinationTag\": 1,\n  \"Fee\": \"12\"\n}\n```\n\n| Field            | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                                                                 |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Destination`    | String                                                                                                                             | AccountID           | The unique address of the account that can cash the Check.                                                                                                                                                                                                                                                  |\n| `SendMax`        | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | Maximum amount of source currency the Check is allowed to debit the sender, including transfer fees on non-XAH currencies. The Check can only credit the destination with the same currency (from the same issuer, for non-XAH currencies). For non-XAH amounts, the nested field names MUST be lower-case. |\n| `DestinationTag` | Number                                                                                                                             | UInt32              | _(Optional)_ Arbitrary tag that identifies the reason for the Check, or a hosted recipient to pay.                                                                                                                                                                                                          |\n| `Expiration`     | Number                                                                                                                             | UInt32              | _(Optional)_ Time after which the Check is no longer valid, in \\[seconds since the Ripple Epoch]\\[].                                                                                                                                                                                                        |\n| `InvoiceID`      | String                                                                                                                             | Hash256             | _(Optional)_ Arbitrary 256-bit hash representing a specific reason or identifier for this Check.                                                                                                                                                                                                            |\n\n### Error Cases\n\n* If the `Destination` account is blocking incoming Checks, the transaction fails with the result code `tecNO_PERMISSION`.&#x20;\n* If the `Destination` is the sender of the transaction, the transaction fails with the result code `temREDUNDANT`.\n* If the `Destination` account does not exist in the ledger, the transaction fails with the result code `tecNO_DST`.\n* If the `Destination` account has the `RequireDest` flag enabled but the transaction does not include a `DestinationTag` field, the transaction fails with the result code `tecDST_TAG_NEEDED`.\n* If `SendMax` specifies a token which is frozen, the transaction fails with the result `tecFROZEN`.\n* If the `Expiration` of the transaction is in the past, the transaction fails with the result `tecEXPIRED`.\n* If the sender does not have enough XAH to meet the owner reserve after adding the Check, the transaction fails with the result `tecINSUFFICIENT_RESERVE`.\n* If either the sender or the destination of the Check cannot own more objects in the ledger, the transaction fails with the result `tecDIR_FULL`.","src/content/docs/docs/protocol-reference/transactions/transaction-types/checkcreate.mdx","c13af26a9211745a","docs/protocol-reference/transactions/transaction-types/escrowcancel",{"id":2058,"data":2060,"body":2066,"filePath":2067,"digest":2068,"deferredRender":14},{"title":2061,"description":2062,"editUrl":14,"head":2063,"template":16,"sidebar":2064,"pagefind":14,"draft":18},"EscrowCancel","Return escrowed XAH or IOU to the sender.",[],{"hidden":18,"attrs":2065},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_Added by the \\[Escrow amendment]\\[]._\n\n### Cancel Using OfferSequence\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"TransactionType\": \"EscrowCancel\",\n    \"Owner\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"OfferSequence\": 7,\n}\n```\n\n### Cancel Using EscrowID\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"TransactionType\": \"EscrowCancel\",\n    \"Owner\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"EscrowID\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\",\n}\n```\n\n### Fields\n\n| Field           | JSON Type | \\[Internal Type]\\[] | Description                                                                                                               |\n| --------------- | --------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------- |\n| `Owner`         | String    | AccountID           | Address of the source account that funded the escrow payment.                                                             |\n| `OfferSequence` | Number    | UInt32              | _(Optional)_ Transaction sequence (or Ticket number) of \\[EscrowCreate transaction]\\[] that created the escrow to cancel. |\n| `EscrowID`      | String    | Hash256             | _(Optional)_ The ID of the Escrow ledger object to cancel, as a 64-character hexadecimal string.                          |\n\nAny account may submit an EscrowCancel transaction.\n\n* If the corresponding \\[EscrowCreate transaction]\\[] did not specify a `CancelAfter` time, the EscrowCancel transaction fails.\n* Otherwise the EscrowCancel transaction fails if the `CancelAfter` time is after the close time of the most recently-closed ledger.","src/content/docs/docs/protocol-reference/transactions/transaction-types/escrowcancel.mdx","b54726ef90fea016","docs/protocol-reference/transactions/transaction-types/escrowcreate",{"id":2069,"data":2071,"body":2077,"filePath":2078,"digest":2079,"deferredRender":14},{"title":2072,"description":2073,"editUrl":14,"head":2074,"template":16,"sidebar":2075,"pagefind":14,"draft":18},"EscrowCreate","Sequester XAH or IOU until the escrow process either finishes or is canceled.",[],{"hidden":18,"attrs":2076},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_Added by the \\[Escrow amendment]\\[]._\n\n### Example\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"TransactionType\": \"EscrowCreate\",\n    \"Amount\" : {\n       \"currency\" : \"USD\",\n       \"value\" : \"1\",\n       \"issuer\" : \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\"\n    },\n    \"Destination\": \"rsA2LpzuawewSBQXkiju3YQTMzW13pAAdW\",\n    \"CancelAfter\": 533257958,\n    \"FinishAfter\": 533171558,\n    \"Condition\": \"A0258020E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855810100\",\n    \"DestinationTag\": 23480,\n    \"SourceTag\": 11747\n}\n```\n\n### Fields\n\n| Field            | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                            |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Amount`         | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | Amount to deduct from the sender's balance and escrow. Once escrowed, the Amount can either go to the `Destination` address (after the `FinishAfter` time) or returned to the sender (after the `CancelAfter` time).                   |\n| `Destination`    | String                                                                                                                             | AccountID           | Address to receive escrowed Amount.                                                                                                                                                                                                    |\n| `CancelAfter`    | Number                                                                                                                             | UInt32              | _(Optional)_ The time, in \\[seconds since the Ripple Epoch]\\[], when this escrow expires. This value is immutable; the funds can only be returned to the sender after this time.                                                       |\n| `FinishAfter`    | Number                                                                                                                             | UInt32              | _(Optional)_ The time, in \\[seconds since the Ripple Epoch]\\[], when the escrowed Amount can be released to the recipient. This value is immutable; the funds cannot move until this time is reached.                                  |\n| `Condition`      | String                                                                                                                             | Blob                | _(Optional)_ Hex value representing a [PREIMAGE-SHA-256 crypto-condition](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02#section-8.1). The funds can only be delivered to the recipient if this condition is fulfilled. |\n| `DestinationTag` | Number                                                                                                                             | UInt32              | _(Optional)_ Arbitrary tag to further specify the destination for this escrowed payment, such as a hosted recipient at the destination address.                                                                                        |\n\nEither `CancelAfter` or `FinishAfter` must be specified. If both are included, the `FinishAfter` time must be before the `CancelAfter` time.\n\nWith the \\[fix1571 amendment]\\[] enabled, you must supply `FinishAfter`, `Condition`, or both. \\[New in: rippled 1.0.0]\\[]","src/content/docs/docs/protocol-reference/transactions/transaction-types/escrowcreate.mdx","fca9cf23e52ad1f8","docs/protocol-reference/transactions/transaction-types/claimreward",{"id":2080,"data":2082,"body":2088,"filePath":2089,"digest":2090,"deferredRender":14},{"title":2083,"description":2084,"editUrl":14,"head":2085,"template":16,"sidebar":2086,"pagefind":14,"draft":18},"ClaimReward","A ClaimReward transaction allows an account to claim the rewards it has accumulated. The rewards can be claimed by the account owner or by a specified issuer. The account can also opt-out of rewards.",[],{"hidden":18,"attrs":2087},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/ClaimReward.cpp)]\n\n_(Added by the \\[BalanceRewards amendment]\\[].)_\n\n### Opt-in + Claim\n\n```json\n{\n    \"TransactionType\": \"ClaimReward\",\n    \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n    \"Issuer\": \"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh\"\n}\n```\n\n### Opt-out\n\n```json\n{\n    \"TransactionType\": \"ClaimReward\",\n    \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n    \"Flags\": 1\n}\n```\n\n### Fields\n\n| Field     | JSON Type | \\[Internal Type]\\[] | Description                                             |\n| --------- | --------- | ------------------- | ------------------------------------------------------- |\n| `Account` | String    | AccountID           | The address of the account that is claiming the reward. |\n| `Flags`   | Number    | UInt32              | _(Optional)_ Can have flag 1 set to opt-out of rewards. |\n| `Issuer`  | String    | AccountID           | _(Optional)_ The genesis account.                       |\n\n### ClaimReward Flags\n\nTransactions of the ClaimReward type support additional values in the `Flags` field, as follows:\n\n| Flag Name  | Hex Value    | Decimal Value | Description                                                                                                                                                                                                           |\n| ---------- | ------------ | ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tfOptOut` | `0x00000001` | 1             | The `isOptOut` flag in the ClaimReward code is used to opt-out an account from rewards by removing reward-related fields from the account object in the ledger if the `sfFlags` field in the transaction is set to 1. |\n\n### Special Transaction Cost\n\nThe ClaimReward transaction has a standard transaction cost, which is the minimum transaction cost required for all transactions.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, ClaimReward transactions can result in the following transaction result codes:\n\n| Error Code        | Description                                                                                             |\n| ----------------- | ------------------------------------------------------------------------------------------------------- |\n| `temDISABLED`     | Occurs if the feature is not enabled.                                                                   |\n| `temINVALID_FLAG` | Occurs if the flag is set to a value other than 1.                                                      |\n| `temMALFORMED`    | Occurs if the issuer is the same as the source account or if the flag and issuer are not correctly set. |\n| `tecNO_ISSUER`    | Occurs if the issuer does not exist.                                                                    |\n| `terNO_ACCOUNT`   | Occurs if the sending account does not exist.                                                           |","src/content/docs/docs/protocol-reference/transactions/transaction-types/claimreward.mdx","fba0712761292d90","docs/protocol-reference/transactions/transaction-types/escrowfinish",{"id":2091,"data":2093,"body":2099,"filePath":2100,"digest":2101,"deferredRender":14},{"title":2094,"description":2095,"editUrl":14,"head":2096,"template":16,"sidebar":2097,"pagefind":14,"draft":18},"EscrowFinish","Deliver XAH or IOU from a held payment to the recipient.",[],{"hidden":18,"attrs":2098},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_Added by the \\[Escrow amendment]\\[]._\n\n### Finish with OfferSequence\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"TransactionType\": \"EscrowFinish\",\n    \"Owner\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"OfferSequence\": 7,\n    \"Condition\": \"A0258020E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855810100\",\n    \"Fulfillment\": \"A0028000\"\n}\n```\n\n### Finish with EscrowID\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"TransactionType\": \"EscrowFinish\",\n    \"Owner\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"EscrowID\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\",\n    \"Condition\": \"A0258020E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855810100\",\n    \"Fulfillment\": \"A0028000\"\n}\n```\n\n### Fields\n\n| Field           | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                                         |\n| --------------- | --------- | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Owner`         | String    | AccountID           | Address of the source account that funded the held payment.                                                                                                                                         |\n| `OfferSequence` | Number    | UInt32              | _(Optional)_ Transaction sequence of \\[EscrowCreate transaction]\\[] that created the held payment to finish.                                                                                        |\n| `Condition`     | String    | Blob                | _(Optional)_ Hex value matching the previously-supplied [PREIMAGE-SHA-256 crypto-condition](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02#section-8.1) of the held payment.         |\n| `Fulfillment`   | String    | Blob                | _(Optional)_ Hex value of the [PREIMAGE-SHA-256 crypto-condition fulfillment](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02#section-8.1.4) matching the held payment's `Condition`. |\n| `EscrowID`      | String    | Hash256             | _(Optional)_ The ID of the Escrow ledger object to finish, as a 64-character hexadecimal string.                                                                                                    |\n\nAny account may submit an EscrowFinish transaction.\n\n* If the held payment has a `FinishAfter` time, you cannot execute it before this time. Specifically, if the corresponding \\[EscrowCreate transaction]\\[] specified a `FinishAfter` time that is after the close time of the most recently-closed ledger, the EscrowFinish transaction fails.\n* If the held payment has a `Condition`, you cannot execute it unless you provide a matching `Fulfillment` for the condition.\n* You cannot execute a held payment after it has expired. Specifically, if the corresponding \\[EscrowCreate transaction]\\[] specified a `CancelAfter` time that is before the close time of the most recently-closed ledger, the EscrowFinish transaction fails.\n\n**Note:** The minimum transaction cost to submit an EscrowFinish transaction increases if it contains a fulfillment. If the transaction has no fulfillment, the transaction cost is the standard 10 drops. If the transaction contains a fulfillment, the transaction cost is 330 \\[drops of XAH]\\[] plus another 10 drops for every 16 bytes in size of the preimage.\n\nIn non-production networks, it may be possible to delete the destination account of a pending escrow. In this case, an attempt to finish the escrow fails with the result `tecNO_TARGET`, but the escrow object remains unless it has expired normally. If another payment re-creates the destination account, the escrow can be finished successfully. The destination account of an escrow can only be deleted if the escrow was created before the fix1523 amendment became enabled. No such escrows exist in the production Xahau, so this edge case is not possible on the production Xahau. This edge case is also not possible in test networks that enable both fix1523 and Escrow amendments at the same time, which is the default when you start a new genesis ledger.","src/content/docs/docs/protocol-reference/transactions/transaction-types/escrowfinish.mdx","a800b6cde3c8ca6e","docs/protocol-reference/transactions/transaction-types",{"id":2102,"data":2104,"body":2109,"filePath":2110,"digest":2111,"deferredRender":14},{"title":2105,"editUrl":14,"head":2106,"template":16,"sidebar":2107,"pagefind":14,"draft":18},"Transaction Types",[],{"hidden":18,"attrs":2108},{},"## Transaction Types\n\nThe type of a transaction (`TransactionType` field) is the most fundamental information about a transaction. This indicates what type of operation the transaction is supposed to do.\n\nAll transactions have certain fields in common:\n\n* Common Fields\n\nEach transaction type has additional fields relevant to the type of action it causes.","src/content/docs/docs/protocol-reference/transactions/transaction-types/index.mdx","3608f7a39797a72c","docs/protocol-reference/transactions/transaction-types/import",{"id":2112,"data":2114,"body":2120,"filePath":2121,"digest":2122,"deferredRender":14},{"title":2115,"description":2116,"editUrl":14,"head":2117,"template":16,"sidebar":2118,"pagefind":14,"draft":18},"Import","Import is a new transaction which accepts an XPOP from the XRPL Mainnet chain (network_id=0) or Testnet (network_id=1) and provides account synchronisation.",[],{"hidden":18,"attrs":2119},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_(Added by the \\[Import amendment]\\[].)_\n\n### Example\n\n```json\n{\n  \"TransactionType\": \"Import\",\n  \"Sequence\": 0,\n  \"Fee\": \"0\",\n  \"Account\": \"rUn84CUYbNjRoTQ6mSW7BVJPSVJNLb1QLo\",\n  \"Blob\" : \"DEADBEEF\"\n}\n```\n\n### Fields\n\n| Field         | JSON Type | \\[Internal Type]\\[] | Description                                          |\n| ------------- | --------- | ------------------- | ---------------------------------------------------- |\n| `Blob`        | String    | Blob                | Hex value representing an XPOP                       |\n| `Issuer`      | String    | AccountID           | (Optional) Address that can be used inside the Hook. |\n| `Destination` | String    | AccountID           | (Optional) Address that can be used inside the Hook. |\n\n### Error Cases\n\n* If the account is Non Activated then the `Sequence` must be 0 and the `Fee` must also be 0\n* If the account is Activated then the `Sequence` and the `Fee` are calculated using the standard method.\n* If the `Issuer` field is present then the `Fee` must be calculated using the standard method.\n\n### Notes\n\n_It is recommended that if you use a `SignerList` or `RegularKey` to sign your transactions that you key your accounts **FIRST** before attempting to _B2M_ XAH_ .\n\n* If the inner (xpop) transaction is `AccountSet` the mainet existing flags will be transfered to the new network.\n* If the inner (xpop) transaction is `SetRegularKey` with the `RegularKey` field omitted or empty, and a signers list does not exist for the account then the `lsfDisableMaster` flag will be set on the account.\n* If the inner (xpop) transaction is `SetRegularKey` then the `lsfPasswordSpent` flag will be set on the account.\n* TicketSequence is not available on `Import`\n\n### Importing for the Issuer\n\nFor issuers, there are additional steps to follow before their asset holders can import transactions.\n\nFirstly, issuers need to install a hook. There are two options for this: `B2MNFToken` or `B2MPayment`.\n\n#### B2MNFToken\n\nA `NFTokenBurn` transaction on mainnet will result in a `URITokenMint` transaction on the network.\n\n> c hook: https://example.com\n\n#### B2MPayment\n\nA `Payment` transaction on mainnet to the Issuer will result in a `Payment` transaction from the Issuer on the network.\n\n> c hook: https://example.com\n\n_Please note that the process of importing for the issuer involves specific transaction types and requires careful configuration. Always ensure that the hooks are correctly set up and that the transactions are valid for the intended operations._","src/content/docs/docs/protocol-reference/transactions/transaction-types/import.mdx","974e74cb0c9502ee","docs/protocol-reference/transactions/transaction-types/offercancel",{"id":2123,"data":2125,"body":2131,"filePath":2132,"digest":2133,"deferredRender":14},{"title":2126,"description":2127,"editUrl":14,"head":2128,"template":16,"sidebar":2129,"pagefind":14,"draft":18},"OfferCancel","An OfferCancel transaction removes an Offer object from Xahau.",[],{"hidden":18,"attrs":2130},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n### Cancel with OfferSequence\n\n```json\n{\n    \"TransactionType\": \"OfferCancel\",\n    \"Account\": \"ra5nK24KXen9AHvsdFTKHSANinZseWnPcX\",\n    \"Fee\": \"12\",\n    \"Flags\": 0,\n    \"LastLedgerSequence\": 7108629,\n    \"OfferSequence\": 6,\n    \"Sequence\": 7\n}\n```\n\n### Cancel with OfferID\n\n```json\n{\n    \"TransactionType\": \"OfferCancel\",\n    \"Account\": \"ra5nK24KXen9AHvsdFTKHSANinZseWnPcX\",\n    \"Fee\": \"12\",\n    \"Flags\": 0,\n    \"LastLedgerSequence\": 7108629,\n    \"OfferID\": \"49647F0D748DC3FE26BDACBC57F251AADEFFF391403EC9BF87C97F67E9977FB0\",\n    \"Sequence\": 7\n}\n```\n\n### Fields\n\n| Field           | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                               |\n| --------------- | --------- | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `OfferSequence` | Number    | UInt32              | _(Optional)_ The sequence number (or Ticket number) of a previous OfferCreate transaction. If specified, cancel any offer object in the ledger that was created by that transaction. It is not considered an error if the offer specified does not exist. |\n| `OfferID`       | String    | Hash256             | _(Optional)_ The ID of the Offer ledger object to cancel, as a 64-character hexadecimal string.                                                                                                                                                           |\n\n_Tip:_ To remove an old offer and replace it with a new one, you can use an \\[OfferCreate transaction]\\[] with an `OfferSequence` parameter, instead of using OfferCancel and another OfferCreate.\n\nThe OfferCancel method returns `tesSUCCESS` even if it did not find an offer with the matching sequence number.","src/content/docs/docs/protocol-reference/transactions/transaction-types/offercancel.mdx","66f0b809e6d322f9","docs/protocol-reference/transactions/transaction-types/invoke",{"id":2134,"data":2136,"body":2142,"filePath":2143,"digest":2144,"deferredRender":14},{"title":2137,"description":2138,"editUrl":14,"head":2139,"template":16,"sidebar":2140,"pagefind":14,"draft":18},"Invoke","An Invoke transaction is used to call a hook, which is a piece of code that is executed in response to certain ledger operations.",[],{"hidden":18,"attrs":2141},{},"\\[[Source](https://github.com/ripple/rippled/blob/develop/src/ripple/app/tx/impl/Invoke.cpp)]\n\n_(Added by the \\[Hooks amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"Invoke\",\n    \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n    \"Blob\": \"697066733A2F2F4445414442454546\",\n    \"Destination\": \"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\"\n}\n```\n\n| Field         | JSON Type | \\[Internal Type]\\[] | Description                                                                                        |\n| ------------- | --------- | ------------------- | -------------------------------------------------------------------------------------------------- |\n| `Account`     | String    | AccountID           | The address of the account that is invoking the hook.                                              |\n| `Blob`        | String    | Blob                | _(Optional)_ A blob of data that is passed to the hook.  (512 byte max)                            |\n| `Destination` | String    | AccountID           | _(Optional)_ The address of the account that is the target of the hook.                            |\n| `InvoiceID`   | String    | Hash256             | _(Optional)_ Arbitrary 256-bit hash representing a specific reason or identifier for this payment. |\n\n### Special Transaction Cost\n\nThe Invoke transaction has a standard transaction cost, plus an additional cost based on the size of the Blob and HookParameters fields.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, Invoke transactions can result in the following transaction result codes:\n\n| Error Code      | Description                                                              |\n| --------------- | ------------------------------------------------------------------------ |\n| `temDISABLED`   | Occurs if the Hooks amendment is not enabled.                            |\n| `temMALFORMED`  | Occurs if the Blob field is larger than 128 KiB.                         |\n| `terNO_ACCOUNT` | Occurs if the sending account or the destination account does not exist. |","src/content/docs/docs/protocol-reference/transactions/transaction-types/invoke.mdx","0a2e35dcb24052df","docs/protocol-reference/transactions/transaction-types/genesismint-emitted-txn",{"id":2145,"data":2147,"body":2153,"filePath":2154,"digest":2155,"deferredRender":14},{"title":2148,"description":2149,"editUrl":14,"head":2150,"template":16,"sidebar":2151,"pagefind":14,"draft":18},"GenesisMint - (Emitted Txn)","The GenesisMint transaction is used to mint new XAH and distribute it to multiple accounts. This transaction can only be used by the genesis account.",[],{"hidden":18,"attrs":2152},{},"\\[[Source](https://github.com/ripple/rippled/blob/develop/src/ripple/app/tx/impl/GenesisMint.cpp)]\n\n_Added by the \\[XahauGenesis amendment]\\[] and the \\[Hooks amendment]\\[]_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"GenesisMint\",\n    \"Account\": \"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh\",\n    \"GenesisMints\": [\n        {\n            \"GenesisMint\": {\n                \"Destination\": \"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\",\n                \"Amount\": \"1000000000\"\n            },\n        }\n    ]\n}\n```\n\n### Fields\n\n| Field          | JSON Type | Internal Type | Description                                                                      |\n| -------------- | --------- | ------------- | -------------------------------------------------------------------------------- |\n| `Account`      | String    | AccountID     | The address of the genesis account that will mint and distribute XAH.            |\n| `GenesisMints` | Array     | Array         | An array of objects representing the destinations and amounts of the minted XAH. |\n\n### GenesisMint Object\n\nThe GenesisMint transaction includes an array of objects called `GenesisMints`. Each object represents a destination account and the amount of XAH to be minted and distributed to that account.\n\n| Field             | JSON Type | Internal Type | Description                                                                |\n| ----------------- | --------- | ------------- | -------------------------------------------------------------------------- |\n| `Destination`     | String    | AccountID     | The address of the account that will receive the minted XAH.               |\n| `Amount`          | String    | Amount        | The amount of XAH to be minted and distributed to the destination account. |\n| `GovernanceFlags` | String    | Hash256       | _(Optional)_ The governance flags associated with the destination account. |\n| `GovernanceMarks` | String    | Hash256       | _(Optional)_ The governance marks associated with the destination account. |\n\n### Special Transaction Cost\n\nThe GenesisMint transaction has a standard transaction cost, which is the minimum transaction cost required for all transactions.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, the GenesisMint transaction can result in the following transaction result codes:\n\n| Error Code     | Description                                                                                |\n| -------------- | ------------------------------------------------------------------------------------------ |\n| `temDISABLED`  | Occurs if the \"Hooks\" or \"XahauGenesis\" amendments are not enabled.                        |\n| `temMALFORMED` | Occurs if the transaction is malformed, such as missing required fields or invalid values. |","src/content/docs/docs/protocol-reference/transactions/transaction-types/genesismint-emitted-txn.mdx","1ba463a654077966","docs/protocol-reference/transactions/transaction-types/offercreate",{"id":2156,"data":2158,"body":2164,"filePath":2165,"digest":2166,"deferredRender":14},{"title":2159,"description":2160,"editUrl":14,"head":2161,"template":16,"sidebar":2162,"pagefind":14,"draft":18},"OfferCreate","An OfferCreate transaction places an [Offer](offers.html) in the [decentralized exchange](decentralized-exchange.html).",[],{"hidden":18,"attrs":2163},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"OfferCreate\",\n    \"Account\": \"ra5nK24KXen9AHvsdFTKHSANinZseWnPcX\",\n    \"Fee\": \"12\",\n    \"Flags\": 0,\n    \"LastLedgerSequence\": 7108682,\n    \"Sequence\": 8,\n    \"TakerGets\": \"6000000\",\n    \"TakerPays\": {\n      \"currency\": \"GKO\",\n      \"issuer\": \"ruazs5h1qEsqpke88pcqnaseXdm6od2xc\",\n      \"value\": \"2\"\n    }\n}\n```\n\n### Fields\n\n| Field           | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                           |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ----------------------------------------------------------------------------------------------------- |\n| `Expiration`    | Number                                                                                                                             | UInt32              | _(Optional)_ Time after which the Offer is no longer active, in \\[seconds since the Ripple Epoch]\\[]. |\n| `OfferSequence` | Number                                                                                                                             | UInt32              | _(Optional)_ An Offer to delete first, specified in the same way as \\[OfferCancel]\\[].                |\n| `OfferID`       | String                                                                                                                             | Hash256             | _(Optional)_ The ID of the Offer ledger object to cancel, as a 64-character hexadecimal string.       |\n| `TakerGets`     | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | The amount and type of currency being sold.                                                           |\n| `TakerPays`     | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | The amount and type of currency being bought.                                                         |\n\n### OfferCreate Flags\n\nTransactions of the OfferCreate type support additional values in the `Flags` field, as follows:\n\n| Flag Name             | Hex Value    | Decimal Value | Description                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| --------------------- | ------------ | ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tfPassive`           | `0x00010000` | 65536         | If enabled, the Offer does not consume Offers that exactly match it, and instead becomes an Offer object in the ledger. It still consumes Offers that cross it.                                                                                                                                                                                                                                                             |\n| `tfImmediateOrCancel` | `0x00020000` | 131072        | Treat the Offer as an [Immediate or Cancel order](http://en.wikipedia.org/wiki/Immediate_or_cancel). The Offer never creates an \\[Offer object]\\[] in the ledger: it only trades as much as it can by consuming existing Offers at the time the transaction is processed. If no Offers match, it executes \"successfully\" without trading anything. In this case, the transaction still uses the result code `tesSUCCESS`. |\n| `tfFillOrKill`        | `0x00040000` | 262144        | Treat the offer as a [Fill or Kill order](http://en.wikipedia.org/wiki/Fill_or_kill). The Offer never creates an \\[Offer object]\\[] in the ledger, and is canceled if it cannot be fully filled at the time of execution. By default, this means that the owner must receive the full `TakerPays` amount; if the `tfSell` flag is enabled, the owner must be able to spend the entire `TakerGets` amount instead.         |\n| `tfSell`              | `0x00080000` | 524288        | Exchange the entire `TakerGets` amount, even if it means obtaining more than the `TakerPays` amount in exchange.                                                                                                                                                                                                                                                                                                            |\n\n### Error Cases\n\n| Error Code               | Description                                                                                                                                                                                                                                                                                                                                                 |\n| ------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `temINVALID_FLAG`        | Occurs if the transaction specifies both `tfImmediateOrCancel` and `tfFillOrKill`.                                                                                                                                                                                                                                                                          |\n| `tecEXPIRED`             | Occurs if the transaction specifies an `Expiration` time that has already passed.                                                                                                                                                                                                                                                                           |\n| `tecKILLED`              | Occurs if the transaction specifies `tfFillOrKill`, and the full amount cannot be filled. If the _\\[ImmediateOfferKilled amendment]\\[]_ is enabled, this result code also occurs when the transaction specifies `tfImmediateOrCancel` and executes without moving funds (previously, this would return `tesSUCCESS`).                                       |\n| `temBAD_EXPIRATION`      | Occurs if the transaction contains an `Expiration` field that is not validly formatted.                                                                                                                                                                                                                                                                     |\n| `temBAD_SEQUENCE`        | Occurs if the transaction contains an `OfferSequence` that is not validly formatted, or is higher than the transaction's own `Sequence` number.                                                                                                                                                                                                             |\n| `temBAD_OFFER`           | Occurs if the Offer tries to trade XAH for XAH, or tries to trade an invalid or negative amount of a token.                                                                                                                                                                                                                                                 |\n| `temREDUNDANT`           | Occurs if the transaction specifies a token for the same token (same issuer and currency code).                                                                                                                                                                                                                                                             |\n| `temBAD_CURRENCY`        | Occurs if the transaction specifies a token with the currency code \"XAH\".                                                                                                                                                                                                                                                                                   |\n| `temBAD_ISSUER`          | Occurs if the transaction specifies a token with an invalid `issuer` value.                                                                                                                                                                                                                                                                                 |\n| `tecNO_ISSUER`           | Occurs if the transaction specifies a token whose `issuer` value is not a funded account in the ledger.                                                                                                                                                                                                                                                     |\n| `tecFROZEN`              | Occurs if the transaction involves a token on a frozen trust line (including local and global freezes).                                                                                                                                                                                                                                                     |\n| `tecUNFUNDED_OFFER`      | Occurs if the owner does not hold a positive amount of the `TakerGets` currency. (Exception: if `TakerGets` specifies a token that the owner issues, the transaction can succeed.)                                                                                                                                                                          |\n| `tecNO_LINE`             | Occurs if the transaction involves a token whose issuer uses Authorized Trust Lines and the necessary trust line does not exist.                                                                                                                                                                                                                            |\n| `tecNO_AUTH`             | Occurs if the transaction involves a token whose issuer uses Authorized Trust Lines and the the trust line that would receive the tokens exists but has not been authorized.                                                                                                                                                                                |\n| `tecINSUF_RESERVE_OFFER` | Occurs if the owner does not have enough XAH to meet the reserve requirement of adding a new Offer object to the ledger, and the transaction did not convert any currency. (If the transaction successfully traded any amount, the transaction succeeds with the result code `tesSUCCESS`, but does not create an Offer object in the ledger for the rest.) |\n| `tecDIR_FULL`            | Occurs if the owner owns too many items in the ledger, or the order book contains too many Offers at the same exchange rate already.                                                                                                                                                                                                                        |","src/content/docs/docs/protocol-reference/transactions/transaction-types/offercreate.mdx","e71b391badc6213d","docs/protocol-reference/transactions/transaction-types/payment",{"id":2167,"data":2169,"body":2175,"filePath":2176,"digest":2177,"deferredRender":14},{"title":2170,"description":2171,"editUrl":14,"head":2172,"template":16,"sidebar":2173,"pagefind":14,"draft":18},"Payment","A Payment transaction represents a transfer of value from one account to another. (Depending on the path taken, this can involve additional exchanges of value, which occur atomically.) This transactio",[],{"hidden":18,"attrs":2174},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/5425a90f160711e46b2c1f1c93d68e5941e4bfb6/src/ripple/app/transactors/Payment.cpp)\n\n### Example\n\n```json\n{\n  \"TransactionType\" : \"Payment\",\n  \"Account\" : \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n  \"Destination\" : \"ra5nK24KXen9AHvsdFTKHSANinZseWnPcX\",\n  \"Amount\" : {\n     \"currency\" : \"USD\",\n     \"value\" : \"1\",\n     \"issuer\" : \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\"\n  },\n  \"Fee\": \"12\",\n  \"Flags\": 2147483648,\n  \"Sequence\": 2,\n}\n```\n\n| Field            | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `Amount`         | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | The amount of currency to deliver. For non-XAH amounts, the nested field names MUST be lower-case. If the `tfPartialPayment` flag is set, deliver _up to_ this amount instead.                                                                                                                                                                                                                                                                   |\n| `Destination`    | String                                                                                                                             | AccountID           | The unique address of the account receiving the payment.                                                                                                                                                                                                                                                                                                                                                                                         |\n| `DestinationTag` | Number                                                                                                                             | UInt32              | _(Optional)_ Arbitrary tag that identifies the reason for the payment to the destination, or a hosted recipient to pay.                                                                                                                                                                                                                                                                                                                          |\n| `InvoiceID`      | String                                                                                                                             | Hash256             | _(Optional)_ Arbitrary 256-bit hash representing a specific reason or identifier for this payment.                                                                                                                                                                                                                                                                                                                                               |\n| `Paths`          | Array of path arrays                                                                                                               | PathSet             | (Optional, auto-fillable) Array of payment paths to be used for this transaction. Must be omitted for XAH-to-XAH transactions.                                                                                                                                                                                                                                                                                                                   |\n| `SendMax`        | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | _(Optional)_ Highest amount of source currency this transaction is allowed to cost, including transfer fees, exchange rates, and [slippage](http://en.wikipedia.org/wiki/Slippage_\\(finance\\)). Does not include the XAH destroyed as a cost for submitting the transaction. For non-XAH amounts, the nested field names MUST be lower-case. Must be supplied for cross-currency/cross-issue payments. Must be omitted for XAH-to-XAH payments. |\n| `DeliverMin`     | \\[Currency Amount]\\[]                                                                                                              | Amount              | _(Optional)_ Minimum amount of destination currency this transaction should deliver. Only valid if this is a partial payment. For non-XAH amounts, the nested field names are lower-case.                                                                                                                                                                                                                                                        |\n\n### Types of Payments\n\nThe Payment transaction type is a general-purpose tool that can represent several different types of abstract actions. You can identify the transaction type based on the transaction's fields, as described in the table below:\n\n| Payment type                 | `Amount`                        | `SendMax`                       | `Paths`          | `Address` = `Destination`? | Description|\n| ---------------------------- | ------------------------------- | ------------------------------- | ---------------- | -------------------------- ||\n| Direct XAH-to-XAH Payment    | String (XAH)                    | Omitted                         | Omitted          | No                         | Transfers XAH directly from one account to another. Always delivers the exact amount. No fee applies other than the basic transaction cost.                                                                                                                                                                                                                                                                                                                                                                                           |\n| Creating or redeeming tokens | Object                          | Object (optional)               | Optional         | No                         | Increases or decreases the amount of a non-XAH currency or asset tracked in Xahau. Transfer fees and freezes do not apply when sending and redeeming directly.                                                                                                                                                                                                                                                                                                                                                                        |\n| Cross-currency Payment       | Object (non-XAH) / String (XAH) | Object (non-XAH) / String (XAH) | Usually required | No                         | Send tokens from one holder to another. The `Amount` or `SendMax` can be XAH or tokens, but they cannot both be XAH. These payments ripple through the issuer and can take longer paths through several intermediaries if the transaction specifies a path set. Transfer fees set by the issuer(s) apply to this type of transaction. These transactions consume offers in the decentralized exchange to connect between different currencies, or possibly even between currencies with the same currency code and different issuers. |\n| Partial payment              | Object (non-XAH) / String (XAH) | Object (non-XAH) / String (XAH) | Usually required | No                         | Sends _up to_ a specific amount of any currency. Uses the `tfPartialPayment` flag. May include a `DeliverMin` amount specifying the minimum that the transaction must deliver to be successful; if the transaction does not specify `DeliverMin`, it can succeed by delivering _any positive amount_.                                                                                                                                                                                                                                 |\n| Currency conversion          | Object (non-XAH) / String (XAH) | Object (non-XAH) / String (XAH) | Required         | Yes                        | Consumes offers in the decentralized exchange to convert one currency to another, possibly taking [arbitrage](https://en.wikipedia.org/wiki/Arbitrage) opportunities. The `Amount` and `SendMax` cannot both be XAH. Also called a _circular payment_ because it delivers money to the sender. The Data API tracks this type of transaction as an \"exchange\" and not a \"payment\".                                                                                                                                                     |\n\n### Special issuer Values for SendMax and Amount\n\nMost of the time, the `issuer` field of a non-XAH \\[Currency Amount]\\[] indicates the issuer of a token. However, when describing payments, there are special rules for the `issuer` field in the `Amount` and `SendMax` fields of a payment.\n\n* There is only ever one balance between two addresses for the same currency code. This means that, sometimes, the `issuer` field of an amount actually refers to a counterparty, instead of the address that issued the token.\n* When the `issuer` field of the destination `Amount` field matches the `Destination` address, it is treated as a special case meaning \"any issuer that the destination accepts.\" This includes all addresses to which the destination has trust lines with a positive limit, as well as tokens with the same currency code issued by the destination.\n* When the `issuer` field of the `SendMax` field matches the source account's address, it is treated as a special case meaning \"any issuer that the source can use.\" This includes creating new tokens on trust lines that other accounts have extended to the source account, and sending tokens the source account holds from other issuers.\n\n### Creating Accounts\n\nThe Payment transaction type can create new accounts in Xahau by sending enough XAH to an unfunded address. Other transactions to unfunded addresses always fail.\n\nFor more information, see Accounts.\n\n### Paths\n\nIf present, the `Paths` field must contain a _path set_ - an array of path arrays. Each individual path represents one way value can flow from the sender to receiver through various intermediary accounts and order books. A single transaction can potentially use multiple paths, for example if the transaction exchanges currency using several different order books to achieve the best rate.\n\nYou must omit the `Paths` field for direct payments, including:\n\n* An XAH-to-XAH transfer.\n* A direct transfer on a trust line that connects the sender and receiver.\n\nIf the `Paths` field is provided, the server decides at transaction processing time which paths to use, from the provided set plus a _default path_ (the most direct way possible to connect the specified accounts). This decision is deterministic and attempts to minimize costs, but it is not guaranteed to be perfect.\n\nThe `Paths` field must not be an empty array, nor an array whose members are all empty arrays.\n\nFor more information, see Paths.\n\n### Payment Flags\n\nTransactions of the Payment type support additional values in the `Flags` field, as follows:\n\n| Flag Name          | Hex Value    | Decimal Value | Description                                                                                                                                                                          |\n| ------------------ | ------------ | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `tfNoDirectRipple` | `0x00010000` | 65536         | Do not use the default path; only use paths included in the `Paths` field. This is intended to force the transaction to take arbitrage opportunities. Most clients do not need this. |\n| `tfPartialPayment` | `0x00020000` | 131072        | If the specified `Amount` cannot be sent without spending more than `SendMax`, reduce the received amount instead of failing outright. See Partial Payments for more details.        |\n| `tfLimitQuality`   | `0x00040000` | 262144        | Only take paths where all the conversions have an input:output ratio that is equal or better than the ratio of `Amount`:`SendMax`. See Limit Quality for details.                    |\n\n### Partial Payments\n\nA partial payment allows a payment to succeed by reducing the amount received. Partial payments are useful for returning payments without incurring additional costs to oneself. However, partial payments can also be used to exploit integrations that naively assume the `Amount` field of a successful transaction always describes the exact amount delivered.\n\nA partial payment is any \\[Payment transaction]\\[] with the `tfPartialPayment` flag enabled. A partial payment can be successful if it delivers any positive amount greater than or equal to its `DeliverMin` field (or any positive amount at all if `DeliverMin` is not specified) without sending more than the `SendMax` value.\n\nThe `delivered_amount` field of a payment's metadata indicates the amount of currency actually received by the destination account.\n\nFor more information, see the full article on Partial Payments.\n\n### Limit Quality\n\nXahau defines the \"quality\" of a currency exchange as the ratio of the numeric amount in to the numeric amount out. For example, if you spend $2 USD to receive £1 GBP, then the \"quality\" of that exchange is `0.5`.\n\nThe `tfLimitQuality` flag allows you to set a minimum quality of conversions that you are willing to take. This limit quality is defined as the destination `Amount` divided by the `SendMax` amount (the numeric amounts only, regardless of currency). When set, the payment processing engine avoids using any paths whose quality (conversion rate) is worse (numerically lower) than the limit quality.\n\nBy itself, the `tfLimitQuality` flag reduces the number of situations in which a transaction can succeed. Specifically, it rejects payments where some part of the payment uses an unfavorable conversion, even if the overall _average_ quality of conversions in the payment is equal or better than the limit quality. If a payment is rejected in this way, the transaction result is `tecPATH_DRY`.\n\nConsider the following example. If I am trying to send you 100 Chinese Yuan (`Amount` = 100 CNY) for 20 United States dollars (`SendMax` = 20 USD) or less, then the limit quality is `5`. Imagine one trader is offering ¥95 for $15 (a ratio of about `6.3` CNY per USD), but the next best offer in the market is ¥5 for $2 (a ratio of `2.5` CNY per USD). If I were to take both offers to send you 100 CNY, then it would cost me 17 USD, for an average quality of about `5.9`.\n\nWithout the `tfLimitQuality` flag set, this transaction would succeed, because the $17 it costs me is within my specified `SendMax`. However, with the `tfLimitQuality` flag enabled, the transaction would fail instead, because the path to take the second offer has a quality of `2.5`, which is worse than the limit quality of `5`.\n\nThe `tfLimitQuality` flag is most useful when combined with partial payments. When both `tfPartialPayment` and `tfLimitQuality` are set on a transaction, then the transaction delivers as much of the destination `Amount` as it can, without using any conversions that are worse than the limit quality.\n\nIn the above example with a ¥95/$15 offer and a ¥5/$2 offer, the situation is different if my transaction has both `tfPartialPayment` and `tfLimitQuality` enabled. If we keep my `SendMax` of 20 USD and a destination `Amount` of 100 CNY, then the limit quality is still `5`. However, because I am doing a partial payment, the transaction sends as much as it can instead of failing if the full destination amount cannot be sent. This means that my transaction consumes the ¥95/$15 offer, whose quality is about `6.3`, but it rejects the ¥5/$2 offer because that offer's quality of `2.5` is worse than the quality limit of `5`. In the end, my transaction only delivers ¥95 instead of the full ¥100, but it avoids wasting money on poor exchange rates.","src/content/docs/docs/protocol-reference/transactions/transaction-types/payment.mdx","7c02fbebdebe38bf","docs/protocol-reference/transactions/transaction-types/paymentchannelclaim",{"id":2178,"data":2180,"body":2186,"filePath":2187,"digest":2188,"deferredRender":14},{"title":2181,"description":2182,"editUrl":14,"head":2183,"template":16,"sidebar":2184,"pagefind":14,"draft":18},"PaymentChannelClaim","Claim Amount from a payment channel, adjust the payment channel's expiration, or both. This transaction can be used differently depending on the transaction sender's role in the specified channel:",[],{"hidden":18,"attrs":2185},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/app/tx/impl/PayChan.cpp)\n\n_Added by the \\[PayChan amendment]\\[]._\n\nThe **source address** of a channel can:\n\n* Send Amount from the channel to the destination with _or without_ a signed Claim.\n* Set the channel to expire as soon as the channel's `SettleDelay` has passed.\n* Clear a pending `Expiration` time.\n* Close a channel immediately, with or without processing a claim first. The source address cannot close the channel immediately if the channel has Amount remaining.\n\nThe **destination address** of a channel can:\n\n* Receive Amount from the channel using a signed Claim.\n* Close the channel immediately after processing a Claim, refunding any unclaimed Amount to the channel's source.\n\n**Any address** sending this transaction can:\n\n* Cause a channel to be closed if its `Expiration` or `CancelAfter` time is older than the previous ledger's close time. Any validly-formed PaymentChannelClaim transaction has this effect regardless of the contents of the transaction.\n\n### Example\n\n```json\n{\n  \"Channel\": \"C1AE6DDDEEC05CF2978C0BAD6FE302948E9533691DC749DCDD3B9E5992CA6198\",\n  \"Amount\" : {\n     \"currency\" : \"USD\",\n     \"value\" : \"1\",\n     \"issuer\" : \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\"\n  },\n  \"Signature\": \"30440220718D264EF05CAED7C781FF6DE298DCAC68D002562C9BF3A07C1E721B420C0DAB02203A5A4779EF4D2CCC7BC3EF886676D803A9981B928D3B8ACA483B80ECA3CD7B9B\",\n  \"PublicKey\": \"32D2471DB72B27E3310F355BB33E339BF26F8392D5A93D3BC0FC3B566612DA0F0A\"\n}\n```\n\n| Field       | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| ----------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Channel`   | String                                                                                                                             | Hash256             | The unique ID of the channel, as a 64-character hexadecimal string.                                                                                                                                                                                                                                                                                                                                                          |\n| `Balance`   | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | _(Optional)_ Total amount delivered by this channel after processing this claim. Required to deliver Amount. Must be more than the total amount delivered by the channel so far, but not greater than the `Amount` of the signed claim. Must be provided except when closing the channel.                                                                                                                                    |\n| `Amount`    | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | _(Optional)_ The amount authorized by the `Signature`. This must match the amount in the signed message. This is the cumulative amount of Amount that can be dispensed by the channel, including XAH previously redeemed.                                                                                                                                                                                                    |\n| `Signature` | String                                                                                                                             | Blob                | _(Optional)_ The signature of this claim, as hexadecimal. The signed message contains the channel ID and the amount of the claim. Required unless the sender of the transaction is the source address of the channel.                                                                                                                                                                                                        |\n| `PublicKey` | String                                                                                                                             | Blob                | _(Optional)_ The public key used for the signature, as hexadecimal. This must match the `PublicKey` stored in the ledger for the channel. Required unless the sender of the transaction is the source address of the channel and the `Signature` field is omitted. (The transaction includes the public key so that `rippled` can check the validity of the signature before trying to apply the transaction to the ledger.) |\n\nIf the payment channel was created before the fixPayChanRecipientOwnerDir amendment became enabled (on 2020-05-01), it is possible that the destination of the payment channel has been deleted and does not currently exist in the ledger. If the destination has been deleted, the source account cannot send XAH from the channel to the destination; instead, the transaction fails with `tecNO_DST`. (And, of course, the deleted account cannot send any transactions at all.) Other uses of this transaction type are unaffected when the destination account has been deleted, including adjusting the channel expiration, closing a channel with no Amount, or removing a channel that has passed its expiration time.\n\n### PaymentChannelClaim Flags\n\nTransactions of the PaymentChannelClaim type support additional values in the `Flags` field, as follows:\n\n| Flag Name | Hex Value    | Decimal Value | Description|\n| --------- | ------------ | ------------- ||\n| `tfRenew` | `0x00010000` | 65536         | Clear the channel's `Expiration` time. (`Expiration` is different from the channel's immutable `CancelAfter` time.) Only the source address of the payment channel can use this flag|\n| `tfClose` | `0x00020000` | 131072        | Request to close the channel. Only the channel source and destination addresses can use this flag. This flag closes the channel immediately if it has no more Amount allocated to it after processing the current claim, or if the destination address uses it. If the source address uses this flag when the channel still holds an Amount, this schedules the channel to close after `SettleDelay` seconds have passed. (Specifically, this sets the `Expiration` of the channel to the close time of the previous ledger plus the channel's `SettleDelay` time, unless the channel already has an earlier `Expiration` time.) If the destination address uses this flag when the channel still holds an Amount, any Amount that remains after processing the claim is returned to the source address. |","src/content/docs/docs/protocol-reference/transactions/transaction-types/paymentchannelclaim.mdx","204d609570cdca28","docs/protocol-reference/transactions/transaction-types/paymentchannelcreate",{"id":2189,"data":2191,"body":2197,"filePath":2198,"digest":2199,"deferredRender":14},{"title":2192,"description":2193,"editUrl":14,"head":2194,"template":16,"sidebar":2195,"pagefind":14,"draft":18},"PaymentChannelCreate","Create a payment channel and fund it with an Amount. The address sending this transaction becomes the \"source address\" of the payment channel.",[],{"hidden":18,"attrs":2196},{},"[\\[Source\\]](https://github.com/Xahau/xahaud/blob/master/src/ripple/app/tx/impl/PayChan.cpp)\n\n_Added by the \\[PayChan amendment]\\[]._\n\n### Example\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"TransactionType\": \"PaymentChannelCreate\",\n    \"Amount\" : {\n       \"currency\" : \"USD\",\n       \"value\" : \"1\",\n       \"issuer\" : \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\"\n    },\n    \"Destination\": \"rsA2LpzuawewSBQXkiju3YQTMzW13pAAdW\",\n    \"SettleDelay\": 86400,\n    \"PublicKey\": \"32D2471DB72B27E3310F355BB33E339BF26F8392D5A93D3BC0FC3B566612DA0F0A\",\n    \"CancelAfter\": 533171558,\n    \"DestinationTag\": 23480,\n    \"SourceTag\": 11747\n}\n```\n\n| Field            | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                                                                                   |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Amount`         | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | Amount to deduct from the sender's balance and set aside in this channel. While the channel is open, the Amount can only go to the `Destination` address. When the channel closes, any unclaimed Amount is returned to the source address's balance.                                                                          |\n| `Destination`    | String                                                                                                                             | AccountID           | Address to receive claims against this channel. This is also known as the \"destination address\" for the channel. Cannot be the same as the sender (`Account`).                                                                                                                                                                |\n| `SettleDelay`    | Number                                                                                                                             | UInt32              | Amount of time the source address must wait before closing the channel if it has unclaimed Amount.                                                                                                                                                                                                                            |\n| `PublicKey`      | String                                                                                                                             | Blob                | The 33-byte public key of the key pair the source will use to sign claims against this channel, in hexadecimal. This can be any secp256k1 or Ed25519 public key. For more information on key pairs, see Key Derivation                                                                                                        |\n| `CancelAfter`    | Number                                                                                                                             | UInt32              | _(Optional)_ The time, in \\[seconds since the Ripple Epoch]\\[], when this channel expires. Any transaction that would modify the channel after this time closes the channel without otherwise affecting it. This value is immutable; the channel can be closed earlier than this time but cannot remain open after this time. |\n| `DestinationTag` | Number                                                                                                                             | UInt32              | _(Optional)_ Arbitrary tag to further specify the destination for this payment channel, such as a hosted recipient at the destination address.                                                                                                                                                                                |\n\nIf the `Destination` account is blocking incoming payment channels, the transaction fails with result code `tecNO_PERMISSION`. _(Requires the \\[DisallowIncoming amendment]\\[] :not_enabled:)_","src/content/docs/docs/protocol-reference/transactions/transaction-types/paymentchannelcreate.mdx","d86ccc6f089a6ba9","docs/protocol-reference/transactions/transaction-types/paymentchannelfund",{"id":2200,"data":2202,"body":2208,"filePath":2209,"digest":2210,"deferredRender":14},{"title":2203,"description":2204,"editUrl":14,"head":2205,"template":16,"sidebar":2206,"pagefind":14,"draft":18},"PaymentChannelFund","Add additional Amount to an open payment channel, and optionally update the expiration time of the channel. Only the source address of the channel can use this transaction.",[],{"hidden":18,"attrs":2207},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/master/src/ripple/app/tx/impl/PayChan.cpp)\n\n_Added by the \\[PayChan amendment]\\[]._\n\n### Example\n\n```json\n{\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"TransactionType\": \"PaymentChannelFund\",\n    \"Channel\": \"C1AE6DDDEEC05CF2978C0BAD6FE302948E9533691DC749DCDD3B9E5992CA6198\",\n    \"Amount\" : {\n         \"currency\" : \"USD\",\n         \"value\" : \"1\",\n         \"issuer\" : \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\"\n      },\n    \"Expiration\": 543171558\n}\n```\n\n| Field        | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- ||\n| `Channel`    | String                                                                                                                             | Hash256             | The unique ID of the channel to fund, as a 64-character hexadecimal string|\n| `Amount`     | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | Amount to add to the channel. Must be a positive amount.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `Expiration` | Number                                                                                                                             | UInt32              | _(Optional)_ New `Expiration` time to set for the channel, in \\[seconds since the Ripple Epoch]\\[]. This must be later than either the current time plus the `SettleDelay` of the channel, or the existing `Expiration` of the channel. After the `Expiration` time, any transaction that would access the channel closes the channel without taking its normal action. Any unspent Amount is returned to the source address when the channel closes. (`Expiration` is separate from the channel's immutable `CancelAfter` time.) For more information, see the PayChannel ledger object type. |\n\n### Error Cases\n\nBesides errors that can occur for all transactions, PaymentChannelFund transactions can result in the following transaction result codes:\n\n| Error Code                | Description                                                                                                                                                                                        |\n| ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tecINSUFFICIENT_RESERVE` | The sending account has less XAH than the reserve requirement.                                                                                                                                     |\n| `tecNO_DST`               | The destination account of the channel has been deleted. This is only possible if the payment channel was created before the fixPayChanRecipientOwnerDir amendment became enabled (on 2020-05-01). |\n| `tecNO_ENTRY`             | The Payment Channel identified by the `Channel` field does not exist.                                                                                                                              |\n| `tecNO_PERMISSION`        | The sender of the transaction is not the source address for the channel.                                                                                                                           |\n| `tecUNFUNDED`             | The sending account does not have enough Amount to fund the channel with the requested amount and still meet the reserve requirement.                                                              |\n| `temBAD_AMOUNT`           | The `Amount` field of the transaction is invalid. The amount cannot be zero or negative.                                                                                                           |\n| `temBAD_EXPIRATION`       | The `Expiration` field is invalid.                                                                                                                                                                 |","src/content/docs/docs/protocol-reference/transactions/transaction-types/paymentchannelfund.mdx","e80e8b8d8a04c07c","docs/protocol-reference/transactions/transaction-types/remit",{"id":2211,"data":2213,"body":2219,"filePath":2220,"digest":2221,"deferredRender":14},{"title":2214,"description":2215,"editUrl":14,"head":2216,"template":16,"sidebar":2217,"pagefind":14,"draft":18},"Remit","The Remit transaction allows the user to send multiple payment types, mint a URIToken, transfer a list of URITokens and activate an account.",[],{"hidden":18,"attrs":2218},{},"import { Aside } from '@astrojs/starlight/components';\n\n\u003CAside type=\"caution\">\nThe Remit transaction pays all fees for _Account Activation, Trustlines and URIToken Reserves._\n\u003C/Aside>\n\n\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/Remit.cpp)]\n\n_(Added by the \\[Remit amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"Remit\",\n    \"Account\": \"rGvbdrdCxG2tk9ZU2673XmsjRdHCDQEpt7\",\n    \"Amounts\": [\n        {\n            \"AmountEntry\": {\n                \"Amount\": \"1000000\"\n            }\n        }, {\n            \"AmountEntry\": {\n                \"Amount\": {\n                    \"currency\": \"USD\",\n                    \"issuer\": \"rExKpRKXNz25UAjbckCRtQsJFcSfjL9Er3\",\n                    \"value\": \"1\"\n                }\n            }\n        }\n    ],\n    \"Destination\": \"rG1QQv2nh2gr7RCZ1P8YYcBUKCCN633jCn\",\n    \"URITokenIDs\": [\n        \"714F206C865D334721B2F3388BEAF33AA91BC1D78C71941D10A2A653C873EDD3\"\n    ],\n    \"MintURIToken\": {\n        \"Digest\": \"6F11A4DF4EE794E2800BB361173D454BFBECB3D7506C4F4CB0EC5AE98BE43747\",\n        \"Flags\": 1,\n        \"URI\": \"697066733A2F2F\"\n    }\n}\n```\n\n| Field            | JSON Type | \\[Internal Type]\\[] | Description                                                                                                      |\n| ---------------- | --------- | ------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| `Account`        | String    | AccountID           | The address of the account that will activate the account, send the payment and/or mint/transfer the URIToken/s. |\n| `Destination`    | String    | AccountID           | The unique address of the account receiving the payment and/or URIToken/s.                                       |\n| `DestinationTag` | Number    | UInt32              | _(Optional)_ A DestinationTag for deposits to a shared custody account.                                          |\n| `MintURIToken`   | Object    | STObject            | _(Optional)_ A `MintURIToken` STObject containing the URIToken details you want to mint on the `Destination`.    |\n| `URITokenIDs`    | Array     | STArray             | _(Optional)_ An array of URITokenIDs (256-bit hash) to to be transferred to the `Destination`. _Limit 32._       |\n| `Amounts`        | Array     | STArray             | _(Optional)_ An array of `AmountEntry` STObjects the account wants to send to the `Destination`. _Limit 32._     |\n| `Inform`         | String    | AccountID           | _(Optional)_ A unique address of an account that can have a hook installed and be informed when a remit occurs.  |\n| `Blob`           | String    | Blob                | _(Optional)_ Arbitrary hex value that can be added to the tx for use in Hooks.                                   |\n| `InvoiceID`      | String    | Hash256             | _(Optional)_ Arbitrary 256-bit hash representing a specific reason or identifier for this remit.                 |\n\n### AmountEntry Fields\n\n| Field    | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                            |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ---------------------------------------------------------------------- |\n| `Amount` | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | The amount of currency the account wants to send to the `Destination`. |\n\n### MintURIToken Fields\n\n| Field    | JSON Type | \\[Internal Type]\\[] | Description                                                 |\n| -------- | --------- | ------------------- | ----------------------------------------------------------- |\n| `URI`    | String    | String              | The URI associated with the minted URIToken. (256 byte max) |\n| `Digest` | String    | Hash256             | _(Optional)_ The digest of the URIToken.                    |\n| `Flags`  | Number    | UInt32              | _(Optional)_ Flags on the mint transaction                  |\n\n### MintURIToken Flags\n\nThe `MintURIToken` STObject supports the values in the `Flags` field, as follows:\n\n| Flag Name    | Hex Value    | Decimal Value | Description                                                                                     |\n| ------------ | ------------ | ------------- | ----------------------------------------------------------------------------------------------- |\n| `tfBurnable` | `0x00000001` | 1             | Allow the issuer to destroy the minted `URIToken`. (The `URIToken`'s owner can _always_ do so.) |\n\n### Special Transaction Cost\n\nThe Remit transaction has a standard transaction cost, which is the minimum fee required for any transaction in Xahau.\n\nIn addition to the minimum fee required the Remit transaction will also deduct the fees for the following:\n\n| Action               | Fee                          |\n| -------------------- | ---------------------------- |\n| `Account Activation` | Standard Reserve Requirement |\n| `Create Trustline`   | Standard Reserve Requirement |\n| `URIToken Mint`      | Standard Reserve Requirement |\n| `URIToken Transfer`  | Standard Reserve Requirement |\n\n### Error Cases\n\nBesides errors that can occur for all transactions, Remit transactions can result in the following transaction result codes:\n\n| Error Code                     | Description                                                                                                                                        |\n| ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `temINVALID_FLAG`              | Occurs if any flag is specific `tfFullyCanonicalSig`                                                                                               |\n| `temREDUNDANT`                 | Occurs if the Account is the same as the Destination                                                                                               |\n| `temMALFORMED (Inform & Blob)` | Occurs when; sfInform is same as \" \"source or destination. Blob was more than 128kib.                                                              |\n| `temMALFORMED (AmountEntry)`   | Occurs when; AmountEntry count exceeds `32.` Expected AmountEntry. Native Currency appears more than once. Issued Currency appears more than once. |\n| `temMALFORMED (MintURIToken)`  | Occurs when; sfMintURIToken contains invalid field. URI was not provided. URI was too long/short. Invalid UTF8 inside MintURIToken.                |\n| `temMALFORMED (URITokenIDs)`   | Occurs when; URITokenIDs too short/long. Duplicate URITokenID.                                                                                     |\n| `temBAD_AMOUNT`                | Occurs when an Amount in the AmountEntry is invalid.                                                                                               |\n| `terNO_ACCOUNT`                | Occurs when the source account does not exist.                                                                                                     |\n| `tecNO_TARGET`                 | Occurs when the `sfInform` field is present but the account does not exist.                                                                        |\n| `tecNO_PERMISSION`             | Occurs when `disallowIncomingRemit` is enabled on the `Destination`                                                                                |\n| `tecNO_PERMISSION`             | Occurs when the `Destination` has `DepositAuthorization` enabled.                                                                                  |\n| `tecDST_TAG_NEEDED`            | Occurs if the destination account requires a destination tag, but the transaction does not include one.                                            |\n| `tecDUPLICATE`                 | Occurs when the `MintURIToken` URI from that issuer already exists.                                                                                |\n| `tecDIR_FULL`                  | Occurs when the source or destination accouts directory is full.                                                                                   |\n| `tecNO_ENTRY`                  | Occurs when the URIToken does not exist.                                                                                                           |\n| `tecNO_PERMISSION`             | Occurs when the URIToken is not owned by the source account.                                                                                       |\n| `tecUNFUNDED_PAYMENT`          | Occurs when the source account does not have the required funds to execute the transaction. (XAH or Issued Currencies)                             |","src/content/docs/docs/protocol-reference/transactions/transaction-types/remit.mdx","ae0178c2590aa9b6","docs/protocol-reference/transactions/transaction-types/setremarks",{"id":2222,"data":2224,"body":2230,"filePath":2231,"digest":2232,"deferredRender":14},{"title":2225,"description":2226,"editUrl":14,"head":2227,"template":16,"sidebar":2228,"pagefind":14,"draft":18},"SetRemarks","The SetRemarks transaction enables accounts to attach, update, or remove arbitrary remarks (key-value pairs) on supported ledger objects.",[],{"hidden":18,"attrs":2229},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/SetRemarks.cpp)]\n\n_(Added by the \\[_&#x52;emarks _amendment]\\[].)_\n\n### Example\n\n```json\n{\n  \"TransactionType\": \"SetRemarks\",\n  \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n  \"Flags\": 0,\n  \"ObjectID\": \"AABBCCDDEEFF00112233445566778899AABBCCDDEEFF00112233445566778899\",\n  \"Remarks\": [\n    {\n      \"Remark\": {\n        \"RemarkName\": \"CAFE\",\n        \"RemarkValue\": \"DEADBEEF\",\n        \"Flags\": 0\n      }\n    }\n  ]\n}\n\n```\n\n| Field      | JSON Type | Internal Type | Description                                                                                    |\n| ---------- | --------- | ------------- | ---------------------------------------------------------------------------------------------- |\n| `Account`  | String    | AccountID     | The address of the account submitting the transaction (must be the owner/issuer of the object) |\n| `ObjectID` | String    | Hash256       | The ledger object ID to which the remarks are attached (see Supported Objects)                 |\n| `Remarks`  | Array     | Array         | Array of remark objects to set, update, or delete (see Remarks Format)                         |\n\n### SetRemarks Flags\n\n| Flag Name     | Hex Value    | Decimal Value | Description                                             |\n| ------------- | ------------ | ------------- | ------------------------------------------------------- |\n| `tfImmutable` | `0x00000001` | 1             | Marks the remark as immutable (cannot change or delete) |\n\n### Remarks Format\n\nEach entry in the `Remarks` array is an object with a single `Remark` field, which itself is an object with the following fields:\n\n| Field         | JSON Type | Internal Type | Required | Description                                                              |\n| ------------- | --------- | ------------- | -------- | ------------------------------------------------------------------------ |\n| `RemarkName`  | String    | Blob          | Yes      | The name/key of the remark (1–256 bytes, must be unique per object)      |\n| `RemarkValue` | String    | Blob          | No       | The value of the remark (1–256 bytes). Omit to delete the remark.        |\n| `Flags`       | Number    | UInt32        | No       | Set to `1` (`tfImmutable`) to make the remark immutable. Default is `0`. |\n\n### Supported Objects and Permissions\n\nRemarks can be attached to the following ledger object types. **Only the specified party (owner or issuer) may create, update, or delete remarks on each object:**\n\n| Ledger Object Type          | Who Can Set Remarks? | Notes                                                                                    |\n| --------------------------- | -------------------- | ---------------------------------------------------------------------------------------- |\n| **AccountRoot**             | Owner                | The account itself (the address in the object)                                           |\n| **Offer**                   | Owner                | The account that created the offer                                                       |\n| **Escrow**                  | Owner                | The account that created the escrow                                                      |\n| **Ticket**                  | Owner                | The account that created the ticket                                                      |\n| **PayChannel**              | Owner                | The account that created the payment channel                                             |\n| **Check**                   | Owner                | The account that created the check                                                       |\n| **DepositPreauth**          | Owner                | The account that created the deposit preauthorization                                    |\n| **URI Token**               | Issuer               | The account that issued the URI token (field `sfIssuer`)                                 |\n| **Trustline (RippleState)** | Issuer               | Only the issuer side of the trustline (the account that issued the IOU) can set remarks. |\n\n### Limits\n\n* **Maximum 32 remarks** per object.\n* Each `RemarkName` and `RemarkValue` must be 1–256 bytes.\n* Each `RemarkName` must be unique per object.\n* Once a remark is marked as immutable (`Flags: 1`), it cannot be changed or deleted.\n\n### Special Transaction Cost\n\nThe base transaction cost is increased by **1 drop per byte** of all `RemarkName` and `RemarkValue` fields in the transaction.\n\n### Error Cases\n\n| Error Code            | Description                                                                                  |\n| --------------------- | -------------------------------------------------------------------------------------------- |\n| `temDISABLED`         | The Remarks amendment is not enabled.                                                        |\n| `temINVALID_FLAG`     | Invalid flags set on the transaction.                                                        |\n| `temMALFORMED`        | The transaction is malformed (e.g., too many remarks, duplicate names, invalid field sizes). |\n| `terNO_ACCOUNT`       | The sending account does not exist.                                                          |\n| `tecNO_TARGET`        | The target object does not exist.                                                            |\n| `tecNO_PERMISSION`    | The sender is not the owner/issuer of the object.                                            |\n| `tecIMMUTABLE`        | Attempted to modify or delete an immutable remark.                                           |\n| `tecTOO_MANY_REMARKS` | The number of remarks on the object would exceed the limit of 32.                            |","src/content/docs/docs/protocol-reference/transactions/transaction-types/setremarks.mdx","ec8fd8eb175ad3d9","docs/protocol-reference/transactions/transaction-types/sethook",{"id":2233,"data":2235,"body":2241,"filePath":2242,"digest":2243,"deferredRender":14},{"title":2236,"description":2237,"editUrl":14,"head":2238,"template":16,"sidebar":2239,"pagefind":14,"draft":18},"SetHook","The SetHook transaction allows users to install, update, delete, or perform other operations on hooks in Xahau.",[],{"hidden":18,"attrs":2240},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/SetHook.cpp)]\n\n_(Added by the \\[Hooks amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"SetHook\",\n    \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n    \"Flags\": 0,\n    \"Hooks\": [\n        {\n            \"Hook\": {\n                \"HookHash\": \"610F33B8EBF7EC795F822A454FB852156AEFE50BE0CB8326338A81CD74801864\",\n                \"CreateCode\": \"697066733A2F2F4445414442454546697066733A2F2F44454144424545467878\",\n                \"HookGrants\": [],\n                \"HookNamespace\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n                \"HookParameters\": [],\n                \"HookOn\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n                \"HookApiVersion\": 0,\n                \"Flags\": 0\n            }\n        }\n    ]\n}\n```\n\n| Field     | JSON Type | \\[Internal Type]\\[] | Description                                        |\n| --------- | --------- | ------------------- | -------------------------------------------------- |\n| `Account` | String    | AccountID           | The address of the account that will own the hook. |\n| `Hooks`   | Array     | Array               | The array of hooks to be set.                      |\n\n### Special Transaction Cost\n\nThe SetHook transaction has a standard transaction cost, which is the minimum transaction cost required for all transactions.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, SetHook transactions can result in the following transaction result codes:\n\n| Error Code      | Description                                                                  |\n| --------------- | ---------------------------------------------------------------------------- |\n| `tecDUPLICATE`  | Occurs if a hook with the same hash already exists.                          |\n| `tecDIR_FULL`   | Occurs if the owner's directory is full and cannot accommodate the new hook. |\n| `terNO_ACCOUNT` | Occurs if the sending account does not exist.                                |\n| `terNO_HOOK`    | Occurs if no hook exists with the specified hash.                            |\n| `temDISABLED`   | Occurs if the Hooks Amendment is not enabled.                                |\n| `temMALFORMED`  | Occurs if the transaction is malformed.                                      |\n\n### SetHook Operations\n\nThere are six possible operations: No Operation, Create, Update, Delete, Install and Namespace Delete\n\nEach operation is specified by the inclusion or omission of certain HookSet Object fields. This might seem confusing at first but by working through a few examples the reader should find it intuitive; Essentially HookSet operations are a type of **diff** between a specific Hook's _defaults_, _existing_ and newly specified fields.\n\nAchieving each type of operation is explained in a subsection below.\n\n### No Operation\n\n**Occurs when**:\n\n* The HookSet Object is empty\n\n**Behaviour**:\n\n* No change of any kind is made.\n\n**Example**:\n\nJSON\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {}\n        }\n    ]\n}\n```\n\n### Create Operation\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* The Corresponding Hook does not exist _or_`FLAG_OVERRIDE` is specified.\n* `CreateCode` field is specified and is not blank and contains the valid web assembly bytecode for a valid Hook.\n* No instance of the same web assembly bytecode already exists on the XRPL. (If it does and all other requirements are met then interpret as an Install Operation — see below.)\n\n**Behaviour**:\n\n* A reference counted `HookDefinition` object is created on the XRPL containing the fields in the HookSet Object, with all specified fields (Namespace, Parameters, HookOn) becoming defaults (but not Grants.)\n* A `Hooks` array is created on the executing account, if it doesn't already exist. (This is the structure that contains the Corresponding Hooks.)\n* A `Hook` object is created at the Corresponding Hook position if one does not already exist.\n* The `Hook` object points at the `HookDefinition`.\n* The `Hook` object contains no fields except `HookHash` which points at the created `HookDefinition`.\n* If `hsfNSDELETE` flag is specified then any HookState entires in the destination namespace are deleted if they currently exist.\n\n**Example**:\n\nJSON\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {                \n                CreateCode: fs.readFileSync('accept.wasm').toString('hex').toUpperCase(),\n                HookOn: '0000000000000000',\n                HookNamespace: addr.codec.sha256('accept').toString('hex').toUpperCase(),\n                HookApiVersion: 0\n            }\n        }\n    ]\n}\n```\n\n### Install Operation\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* The Corresponding Hook does not exist _or_`FLAG_OVERRIDE` is specified.\n* `HookHash` field is specified and is not blank and contains the hash of a Hook that already exists as a `HookDefinition` on the ledger _or_ `CreateCode` field is specified and is not blank and contains the valid web assembly bytecode for a valid hook that already exists on the ledger as a `HookDefinition`.\n\n**Behaviour**:\n\n* The reference count of the `HookDefinition` object is incremented.\n* A `Hooks` array is created on the executing account, if it doesn't already exist. (This is the structure that contains the Corresponding Hooks.)\n* A `Hook` object is created at the Corresponding Hook position if one does not already exist.\n* The `Hook` object points at the `HookDefinition`.\n* The `Hook` object contains all the fields in the HookSet Object, except and unless:\n* A field or key-pair within a field is identical to the Hook Defaults set on the `HookDefinition`, in which case it is omitted due to defaults.\n* If `hsfNSDELETE` flag is specified then any HookState entires in the destination namespace are deleted if they currently exist.\n\n**Example**:\n\nJSON\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {                \n                HookHash: \"A5663784D04ED1B4408C6B97193464D27C9C3334AAF8BBB4FA5EB8E557FC4A2C\",\n                HookOn: '0000000000000000',\n                HookNamespace: addr.codec.sha256('accept').toString('hex').toUpperCase(),\n            }\n        }\n    ]\n}\n```\n\n### Update Operation\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* The Corresponding Hook exists.\n* `HookHash` is absent.\n* `CreateCode` is absent.\n* One or more of `HookNamespace`, `HookParameters` or `HookGrants` is present.\n\n**General Behaviour**:\n\n* The Corresponding Hook is updated in such a way that the desired changes are reflected in the Corresponding Hook.\n\n**Specific Behaviour**:\n\nIf `HookNamespace` is specified and differs from the Corresponding Hook's Namespace:\n\n* the Corresponding Hook's `HookNamespace` is updated, and\n* if the `hsfNSDELETE` flag is specified all HookState entires in the old namespace are deleted.\n\nIf `HookParameters` is specified, then for each entry:\n\n* If `HookParameterName` exists but `HookParameterValue` is absent and the Corresponding Hook's Parameters (either specifically or via defaults) contains this `HookParameterName` then the parameter is marked as deleted on the Corresponding Hook.\n* If `HookParameterName` exists and `HookParameterValue` exists then the Corresponding Hook's Parameters are modified to include the new or updated parameter.\n\nIf `HookGrants` is specified then:\n\n* The Corresponding Hook's `HookGrants` array is replaced with the array.\n\n**Example**:\n\nJSON\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {\n                HookNamespace: addr.codec.sha256('new_accept').toString('hex').toUpperCase(),\n            }\n        }\n    ]\n}\n```\n\n### Delete Operation\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* The Corresponding Hook exists.\n* `hsfOVERRIDE` is specified.\n* optionally `hsfNSDELETE` is also specified.\n* `HookHash` is absent.\n* `CreateCode` is present but empty.\n\n**Behaviour**:\n\n* The reference count of the `HookDefinition` object is decremented.\n* If the reference count is now zero the `HookDefintion` is removed from the ledger.\n* The `Hook` object in the Corresponding Hook position is deleted, leaving an empty position.\n* If `hsfNSDELETE` is specified the namespace and all HookState entries are also deleted.\n\n**Example**:\n\nJSON\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {\n                CreateCode: \"\",\n                Flags: 1,\n            }\n        }\n    ]\n}\n```\n\n### Namespace Reset\n\n**Occurs when**:\n\n_All_ of the following conditions are met:\n\n* `flags` is present and `hsfNSDELETE` is set. `hsfOVERRIDE` can optionally also be specified if the Hook at this position is to be deleted.\n* `HookNamespace` is specified.\n* `CreateCode` is absent.\n* `HookHash` is absent.\n* `HookGrants`, `HookParameters`, `HookOn` and `HookApiVersion` are absent.\n\n**Behaviour**:\n\n* If the Corresponding Hook exists, it remains, nothing happens to it.\n* A subset of HookState objects and the HookState directory for the specified namespace are removed from the ledger, up to the defined limit (512). Further transactions are needed to continue the deletion process until all relevant records are removed. See [`tesPARTIAL`](https://docs.xahau.network/technical/protocol-reference/transactions/transaction-results/tes-codes).&#x20;\n\n**Example**:\n\nJSON\n\n```json\n{ \n    Account: \"r4GDFMLGJUKMjNhhycgt2d5LXCdXzCYPoc\",\n    TransactionType: \"SetHook\",\n    Fee: \"2000000\",\n    Hooks:\n    [        \n        {                        \n            Hook: {\n              \tHookNamespace: addr.codec.sha256('accept').toString('hex').toUpperCase(),\n                Flags: 3,\n            }\n        }\n    ]\n}\n```\n\n### Hook Fields\n\nThe following fields are used in the hook object:\n\n| Field            | JSON Type | Internal Type | Description                                       |\n| ---------------- | --------- | ------------- | ------------------------------------------------- |\n| `HookHash`       | String    | Hash256       | The hash of the hook.                             |\n| `CreateCode`     | String    | Blob          | The WebAssembly code for the hook.                |\n| `HookGrants`     | Array     | Array         | The grants associated with the hook.              |\n| `HookNamespace`  | String    | Hash256       | The namespace of the hook.                        |\n| `HookParameters` | Array     | Array         | The parameters of the hook.                       |\n| `HookOn`         | String    | Hash256       | The transaction/s on which the hook is triggered. |\n| `HookCanEmit`    | String    | Hash256       | The transaction/s which the hook can emit.        |\n| `HookApiVersion` | Number    | UInt16        | The API version of the hook.                      |\n| `Flags`          | Number    | UInt32        | Additional flags for the hook.                    |\n\n### Flags\n\nThe `Flags` field in the hook object specifies additional flags for the hook. The following flags are supported:\n\n| Flag Name     | Description                                                              |\n| ------------- | ------------------------------------------------------------------------ |\n| `hsfOVERRIDE` | Allows the hook to be deleted even if it is referenced by other objects. |\n| `hsfNSDELETE` | Deletes an entire namespace of hooks.                                    |\n| `hsfCOLLECT`  | Collects the hook's associated objects.                                  |\n\n### Hook Grants\n\nThe `HookGrants` field is an array of objects that specify the grants associated with the hook. Each grant object has the following fields:\n\n| Field       | JSON Type | Internal Type | Description                                        |\n| ----------- | --------- | ------------- | -------------------------------------------------- |\n| `HookHash`  | String    | Hash256       | The hook to apply the grant to.                    |\n| `Authorize` | String    | AccountID     | The address of the account that is granted access. |\n| `Flags`     | Number    | Uint32        | Flags                                              |\n\n### Hook Parameters\n\nThe `HookParameters` field is an array of objects that specify the parameters of the hook. Each parameter object has the following fields:\n\n| Field                | JSON Type | Internal Type | Description                 |\n| -------------------- | --------- | ------------- | --------------------------- |\n| `HookParameterName`  | String    | Blob          | The name of the parameter.  |\n| `HookParameterValue` | String    | Blob          | The value of the parameter. |\n\n### Hook Executions\n\nWhen Hooks execute they leave behind information about the status of that execution. This appears in the Originating Transaction metadata as an `sfHookExecutions` block. This block contains the following fields:\n\n| Field                  | JSON Type | Internal Type | Description                                                                                                                                                  |\n| ---------------------- | --------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `HookAccount`          | String    | AccountID     | The account the Hook ran on.                                                                                                                                 |\n| `HookEmitCount`        | Number    | UInt16        | The total number of Emitted Transactions produced by the Hook.                                                                                               |\n| `HookExecutionIndex`   | Number    | UInt16        | The SHA512H of the Hook at the time it was executed.                                                                                                         |\n| `HookHash`             | String    | Hash256       | The value of the parameter.                                                                                                                                  |\n| `HookInstructionCount` | String    | UInt64        | The total number of webassembly instructions that were executed when the Hook ran.                                                                           |\n| `HookResult`           | Number    | UInt8         | \u003Cp>Hooks can end in three ways: \u003Ccode>accept\u003C/code>, \u003Ccode>rollback\u003C/code> and \u003Ccode>error\u003C/code>.\u003Cbr />This is \u003Cem>not\u003C/em> the same as sfHookReturnCode!\u003C/p> |\n| `HookReturnCode`       | String    | UInt64        | The integer returned as the third parameter of `accept` or `rollback`.                                                                                       |\n| `HookReturnString`     | String    | Blob          | The string returned in the first two parameters of `accept` or `rollback`, if any.                                                                           |\n| `HookStateChangeCount` | Number    | UInt16        | The number of Hook State changes the Hook made during execution.                                                                                             |","src/content/docs/docs/protocol-reference/transactions/transaction-types/sethook.mdx","ce5993caa0551b62","docs/protocol-reference/transactions/transaction-types/ticketcreate",{"id":2244,"data":2246,"body":2252,"filePath":2253,"digest":2254,"deferredRender":14},{"title":2247,"description":2248,"editUrl":14,"head":2249,"template":16,"sidebar":2250,"pagefind":14,"draft":18},"TicketCreate","A TicketCreate transaction sets aside one or more [sequence numbers][Sequence Number] as Tickets.",[],{"hidden":18,"attrs":2251},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/develop/src/ripple/app/tx/impl/CreateTicket.cpp)\n\n_(Added by the \\[TicketBatch amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"TicketCreate\",\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"Fee\": \"10\",\n    \"Sequence\": 381,\n    \"TicketCount\": 10\n}\n```\n\n| Field         | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                            |\n| ------------- | --------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `TicketCount` | Number    | UInt32              | How many Tickets to create. This must be a positive number and cannot cause the account to own more than 250 Tickets after executing this transaction. |\n\nIf the transaction cannot create _all_ of the requested Tickets (either due to the 250-Ticket limit or the owner reserve), it fails and creates no Tickets. To look up how many Tickets an account currently owns, use the \\[account_info method]\\[] and check the `account_data.TicketCount` field.\n\n**Tip:** This transaction increases the sending account's \\[sequence number]\\[Sequence Number] by 1 _plus_ the number of tickets created (`TicketCount`). This is the only transaction that increases an account's sequence number by more than 1.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, TicketCreate transactions can result in the following transaction result codes:\n\n| Error Code                | Description                                                                                                                                                 |\n| ------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `temINVALID_COUNT`        | The `TicketCount` field is invalid. It must be an integer from 1 to 250.                                                                                    |\n| `tecDIR_FULL`             | This transaction would cause the account to own more than the limit of 250 Tickets at a time, or more than the maximum number of ledger objects in general. |\n| `tecINSUFFICIENT_RESERVE` | The sending account does not have enough XAH to meet the owner reserve of all the requested Tickets.                                                        |","src/content/docs/docs/protocol-reference/transactions/transaction-types/ticketcreate.mdx","0723a2cb27504f4f","docs/protocol-reference/transactions/transaction-types/setregularkey",{"id":2255,"data":2257,"body":2263,"filePath":2264,"digest":2265,"deferredRender":14},{"title":2258,"description":2259,"editUrl":14,"head":2260,"template":16,"sidebar":2261,"pagefind":14,"draft":18},"SetRegularKey","A SetRegularKey transaction assigns, changes, or removes the regular key pair associated with an account.",[],{"hidden":18,"attrs":2262},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/4239880acb5e559446d2067f00dabb31cf102a23/src/ripple/app/transactors/SetRegularKey.cpp)\n\nYou can protect your account by assigning a regular key pair to it and using it instead of the master key pair to sign transactions whenever possible. If your regular key pair is compromised, but your master key pair is not, you can use a `SetRegularKey` transaction to regain control of your account.\n\n### Example SetRegularKey JSON\n\n```json\n{\n    \"Flags\": 0,\n    \"TransactionType\": \"SetRegularKey\",\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"Fee\": \"12\",\n    \"RegularKey\": \"rAR8rR8sUkBoCZFawhkWzY4Y5YoyuznwD\"\n}\n```\n\n| Field        | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                             |\n| ------------ | --------- | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `RegularKey` | String    | AccountID           | _(Optional)_ A base-58-encoded \\[Address]\\[] that indicates the regular key pair to be assigned to the account. If omitted, removes any existing regular key pair from the account. Must not match the master key pair for the address. |\n\n### See Also\n\nFor more information about regular and master key pairs, see Cryptographic Keys.\n\nFor a tutorial on assigning a regular key pair to an account, see Working with a Regular Key Pair.\n\nFor even greater security, you can use multi-signing, but multi-signing requires additional XAH for the \\[transaction cost]\\[] and reserve.","src/content/docs/docs/protocol-reference/transactions/transaction-types/setregularkey.mdx","a6ed4c64021841db","docs/protocol-reference/transactions/transaction-types/trustset",{"id":2266,"data":2268,"body":2274,"filePath":2275,"digest":2276,"deferredRender":14},{"title":2269,"description":2270,"editUrl":14,"head":2271,"template":16,"sidebar":2272,"pagefind":14,"draft":18},"TrustSet","Create or modify a trust line linking two accounts.",[],{"hidden":18,"attrs":2273},{},"[\\[Source\\]](https://github.com/Xahau/xahaud/blob/master/src/ripple/app/tx/impl/SetTrust.cpp)\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"TrustSet\",\n    \"Account\": \"ra5nK24KXen9AHvsdFTKHSANinZseWnPcX\",\n    \"Fee\": \"12\",\n    \"Flags\": 262144,\n    \"LastLedgerSequence\": 8007750,\n    \"LimitAmount\": {\n      \"currency\": \"USD\",\n      \"issuer\": \"rsP3mgGb2tcYUrxiLFiHJiQXhsziegtwBc\",\n      \"value\": \"100\"\n    },\n    \"Sequence\": 12\n}\n```\n\n| Field                    | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                                   |\n| ------------------------ | --------- | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `LimitAmount`            | Object    | Amount              | Object defining the trust line to create or modify, in the format of a \\[Currency Amount]\\[].                                                                                                 |\n| `LimitAmount`.`currency` | String    | (Amount.currency)   | The currency to this trust line applies to, as a three-letter [ISO 4217 Currency Code](https://www.xe.com/iso4217.php) or a 160-bit hex value according to currency format. \"XAH\" is invalid. |\n| `LimitAmount`.`value`    | String    | (Amount.value)      | Quoted decimal representation of the limit to set on this trust line.                                                                                                                         |\n| `LimitAmount`.`issuer`   | String    | (Amount.issuer)     | The address of the account to extend trust to.                                                                                                                                                |\n| `QualityIn`              | Number    | UInt32              | _(Optional)_ Value incoming balances on this trust line at the ratio of this number per 1,000,000,000 units. A value of `0` is shorthand for treating balances at face value.                 |\n| `QualityOut`             | Number    | UInt32              | _(Optional)_ Value outgoing balances on this trust line at the ratio of this number per 1,000,000,000 units. A value of `0` is shorthand for treating balances at face value.                 |\n\nIf the account specified in `LimitAmount.issuer` is blocking incoming trust lines, the transaction fails with the result code `tecNO_PERMISSION`. _(Requires the \\[DisallowIncoming amendment]\\[] :not_enabled:)_\n\n### TrustSet Flags\n\nTransactions of the TrustSet type support additional values in the `Flags` field, as follows:\n\n| Flag Name         | Hex Value    | Decimal Value | Description                                                                                                                                        |\n| ----------------- | ------------ | ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tfSetfAuth`      | `0x00010000` | 65536         | Authorize the other party to hold currency issued by this account. (No effect unless using the `asfRequireAuth` AccountSet flag.) Cannot be unset. |\n| `tfSetNoRipple`   | `0x00020000` | 131072        | Enable the No Ripple flag, which blocks rippling between two trust lines of the same currency if this flag is enabled on both.                     |\n| `tfClearNoRipple` | `0x00040000` | 262144        | Disable the No Ripple flag, allowing rippling on this trust line.                                                                                  |\n| `tfSetFreeze`     | `0x00100000` | 1048576       | Freeze the trust line.                                                                                                                             |\n| `tfClearFreeze`   | `0x00200000` | 2097152       | Unfreeze the trust line.                                                                                                                           |\n\nIf a transaction tries to enable No Ripple but cannot, it fails with the result code `tecNO_PERMISSION`. Before the \\[fix1578 amendment]\\[] became enabled, such a transaction would result in `tesSUCCESS` (making any other changes it could) instead.\n\nThe Auth flag of a trust line does not determine whether the trust line counts towards its owner's XAH reserve requirement. However, an enabled Auth flag prevents the trust line from being in its default state. An authorized trust line can never be deleted. An issuer can pre-authorize a trust line with the `tfSetfAuth` flag only, even if the limit and balance of the trust line are 0.","src/content/docs/docs/protocol-reference/transactions/transaction-types/trustset.mdx","4eb87b7776b29f04","docs/protocol-reference/transactions/transaction-types/uritokenburn",{"id":2277,"data":2279,"body":2285,"filePath":2286,"digest":2287,"deferredRender":14},{"title":2280,"description":2281,"editUrl":14,"head":2282,"template":16,"sidebar":2283,"pagefind":14,"draft":18},"URITokenBurn","The URITokenBurn transaction is used to burn a URIToken in Xahau. Burning a URIToken permanently removes it from circulation.",[],{"hidden":18,"attrs":2284},{},"[\\[Source\\]](https://github.com/ripple/rippled/blob/develop/src/ripple/app/tx/impl/URIToken.cpp)\n\n_(Added by the \\[URIToken amendment]\\[].)_\n\nThe URITokenBurn transaction is used to burn a URIToken in Xahau. Burning a URIToken permanently removes it from circulation.\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"URITokenBurn\",\n    \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n    \"URITokenID\": \"C1AE6DDDEEC05CF2978C0BAD6FE27362498DGS691DC749DCDD3B95992978C0BA\",\n}\n```\n\n| Field        | JSON Type | \\[Internal Type]\\[] | Description                                                     |\n| ------------ | --------- | ------------------- | --------------------------------------------------------------- |\n| `Account`    | String    | AccountID           | The address of the account that owns the URIToken to be burned. |\n| `URITokenID` | String    | Hash256             | The ID of the URIToken to burn.                                 |\n\n### Special Transaction Cost\n\nThe URITokenBurn transaction does not have any special transaction cost requirements.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, URITokenBurn transactions can result in the following transaction result codes:\n\n| Error Code         | Description                                                       |\n| ------------------ | ----------------------------------------------------------------- |\n| `tecNO_PERMISSION` | Occurs if the account does not have permission to burn the token. |","src/content/docs/docs/protocol-reference/transactions/transaction-types/uritokenburn.mdx","df9935461df0b7cc","docs/protocol-reference/transactions/transaction-types/signerlistset",{"id":2288,"data":2290,"body":2296,"filePath":2297,"digest":2298,"deferredRender":14},{"title":2291,"description":2292,"editUrl":14,"head":2293,"template":16,"sidebar":2294,"pagefind":14,"draft":18},"SignerListSet","The SignerListSet transaction creates, replaces, or removes a list of signers that can be used to multi-sign a transaction. This transaction type was introduced by the [MultiSign amendment][].",[],{"hidden":18,"attrs":2295},{},"[\\[Source\\]](https://github.com/Xahau/xahaud/blob/master/src/ripple/app/tx/impl/SetSignerList.cpp)\n\n### Example\n\n```json\n{\n    \"Flags\": 0,\n    \"TransactionType\": \"SignerListSet\",\n    \"Account\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n    \"Fee\": \"12\",\n    \"SignerQuorum\": 3,\n    \"SignerEntries\": [\n        {\n            \"SignerEntry\": {\n                \"Account\": \"rsA2LpzuawewSBQXkiju3YQTMzW13pAAdW\",\n                \"SignerWeight\": 2\n            }\n        },\n        {\n            \"SignerEntry\": {\n                \"Account\": \"rUpy3eEg8rqjqfUoLeBnZkscbKbFsKXC3v\",\n                \"SignerWeight\": 1\n            }\n        },\n        {\n            \"SignerEntry\": {\n                \"Account\": \"raKEEVSGnKSD9Zyvxu4z6Pqpm4ABH8FS6n\",\n                \"SignerWeight\": 1\n            }\n        }\n    ]\n}\n```\n\n| Field           | JSON Type | \\[Internal Type]\\[] | Description                                                                                                                                                                                                                                                                                                                                                                     |\n| --------------- | --------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `SignerQuorum`  | Number    | UInt32              | A target number for the signer weights. A multi-signature from this list is valid only if the sum weights of the signatures provided is greater than or equal to this value. To delete a signer list, use the value `0`.                                                                                                                                                        |\n| `SignerEntries` | Array     | Array               | _(Omitted when deleting)_ Array of `SignerEntry` objects, indicating the addresses and weights of signers in this list. This signer list must have at least 1 member and no more than 32 members. No address may appear more than once in the list, nor may the `Account` submitting the transaction appear in the list. _(Updated by the \\[ExpandedSignerList amendment]\\[].)_ |\n\nA successful SignerListSet transaction replaces the account's `SignerList` object in the ledger, or adds one if it did not exist before. An account may not have more than one signer list. To delete a signer list, you must set `SignerQuorum` to `0` _and_ omit the `SignerEntries` field. Otherwise, the transaction fails with the error `temMALFORMED`. A transaction to delete a signer list is considered successful even if there was no signer list to delete.\n\nYou cannot create a signer list such that the `SignerQuorum` could never be met. The `SignerQuorum` must be greater than 0 but less than or equal to the sum of the `SignerWeight` values in the list. Otherwise, the transaction fails with the error `temMALFORMED`.\n\nYou can create, update, or remove a signer list using the master key, regular key, or the current signer list, if those methods of signing transactions are available.\n\nYou cannot remove the last method of signing transactions from an account. If an account's master key is disabled (the account has the `lsfDisableMaster` flag enabled) and the account does not have a Regular Key configured, then you cannot delete the signer list from the account. Instead, the transaction fails with the error `tecNO_ALTERNATIVE_KEY`.\n\nCreating or replacing a signer list enables the `lsfOneOwnerCount` flag on the SignerList object. Lists that were created before the \\[MultiSignReserve amendment]\\[] became enabled do not have this flag and have a higher owner reserve. You can decrease the owner reserve for these lists by replacing the list with the same list. For more information, see SignerList Flags.","src/content/docs/docs/protocol-reference/transactions/transaction-types/signerlistset.mdx","be44b19ba668b983","docs/protocol-reference/transactions/transaction-types/uritokenbuy",{"id":2299,"data":2301,"body":2307,"filePath":2308,"digest":2309,"deferredRender":14},{"title":2302,"description":2303,"editUrl":14,"head":2304,"template":16,"sidebar":2305,"pagefind":14,"draft":18},"URITokenBuy","The URITokenBuy transaction allows a user to buy a URIToken from the issuer. This transaction is used to transfer ownership of a URIToken from the issuer to the buyer.",[],{"hidden":18,"attrs":2306},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_(Added by the \\[URIToken amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"URITokenBuy\",\n    \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n    \"URITokenID\": \"C1AE6DDDEEC05CF2978C0BAD6FE27362498DGS691DC749DCDD3B95992978C0BA\",\n    \"Amount\": {\n      \"issuer\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n      \"currency\": \"USD\",\n      \"value\": \"100\",\n    },\n}\n```\n\n| Field        | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                         |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | --------------------------------------------------- |\n| `Account`    | String                                                                                                                             | AccountID           | The address of the buyer's account.                 |\n| `URITokenID` | String                                                                                                                             | Hash256             | The unique identifier of the URIToken to be bought. |\n| `Amount`     | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | The amount of currency to pay for the URIToken.     |\n\n### Special Transaction Cost\n\nThe URITokenBuy transaction has a standard transaction cost, which is the minimum fee required for any transaction in Xahau.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, URITokenBuy transactions can result in the following transaction result codes:\n\n| Error Code                         | Description                                                                                                                  |\n| ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| `tecCANT_ACCEPT_OWN_NFTOKEN_OFFER` | Occurs if the owner of the token is the one claiming the offer.                                                              |\n| `tecDST_TAG_NEEDED`                | Occurs if the destination account requires a destination tag, but the transaction does not include one.                      |\n| `tecNO_PERMISSION`                 | Occurs if the seller does not have the token listed for sale or the token `Destination` is not the account buying the token. |\n| `temBAD_CURRENCY`                  | Occurs when the buying currency does not match the offer currency.                                                           |\n| `tecINSUFFICIENT_PAYMENT`          | Occurs when the buy amount is less than the offer amount.                                                                    |\n| `tecINSUFFICIENT_FUNDS`            | Occurs when the buyer doesn't have sufficient funds including the `Fee` to purchase the token.                               |","src/content/docs/docs/protocol-reference/transactions/transaction-types/uritokenbuy.mdx","ef5771af6e5edf14","docs/protocol-reference/transactions/transaction-types/uritokencancelselloffer",{"id":2310,"data":2312,"body":2318,"filePath":2319,"digest":2320,"deferredRender":14},{"title":2313,"description":2314,"editUrl":14,"head":2315,"template":16,"sidebar":2316,"pagefind":14,"draft":18},"URITokenCancelSellOffer","An URITokenCancelSellOffer transaction cancels a sell offer for a URIToken in Xahau.",[],{"hidden":18,"attrs":2317},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_(Added by the \\[URIToken amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"URITokenCancelSellOffer\",\n    \"Account\": \"r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59\",\n    \"URITokenID\": \"C1AE6DDDEEC05CF2978C0BAD6FE27362498DGS691DC749DCDD3B95992978C0BA\",\n}\n```\n\n\n\n### Fields\n\n| Field        | JSON Type | \\[Internal Type]\\[] | Description                                                    |\n| ------------ | --------- | ------------------- | -------------------------------------------------------------- |\n| `Account`    | String    | AccountID           | The address of the account that owns the sell offer to cancel. |\n| `URITokenID` | String    | Hash256             | The ID of the URIToken to cancel the sell offer.               |\n\n### Error Cases\n\nBesides errors that can occur for all transactions, URITokenCancelSellOffer transactions can result in the following transaction result codes:\n\n| Error Code         | Description                                                             |\n| ------------------ | ----------------------------------------------------------------------- |\n| `tecNO_PERMISSION` | Occurs when the account executing the tx is not the owner of the token. |","src/content/docs/docs/protocol-reference/transactions/transaction-types/uritokencancelselloffer.mdx","7d2b59892c52acef","docs/protocol-reference/transactions/transaction-types/uritokencreateselloffer",{"id":2321,"data":2323,"body":2329,"filePath":2330,"digest":2331,"deferredRender":14},{"title":2324,"description":2325,"editUrl":14,"head":2326,"template":16,"sidebar":2327,"pagefind":14,"draft":18},"URITokenCreateSellOffer","An URITokenCreateSellOffer transaction allows a user to create a sell offer for a URIToken on Xahau's decentralized exchange.",[],{"hidden":18,"attrs":2328},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_(Added by the \\[URIToken amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"URITokenCreateSellOffer\",\n    \"Account\": \"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\",\n    \"URITokenID\": \"C1AE6DDDEEC05CF2978C0BAD6FE27362498DGS691DC749DCDD3B95992978C0BA\",\n    \"Destination\": \"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\",\n    \"Amount\": {\n      \"issuer\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n      \"currency\": \"USD\",\n      \"value\": \"100\",\n    },\n}\n```\n\n### Fields\n\n| Field         | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                       |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | --------------------------------------------------------------------------------- |\n| `Account`     | String                                                                                                                             | AccountID           | The address of the account creating the sell offer.                               |\n| `URITokenID`  | String                                                                                                                             | Hash256             | The ID of the URIToken being sold.                                                |\n| `Destination` | String                                                                                                                             | AccountID           | _(Optional)_ The address of the account to receive the sell offer.                |\n| `Amount`      | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | The amount of currency the account wants to receive in exchange for the URIToken. |\n\n### Error Cases\n\nBesides errors that can occur for all transactions, URITokenCreateSellOffer transactions can result in the following transaction result codes:\n\n| Error Code               | Description                                                                      |\n| ------------------------ | -------------------------------------------------------------------------------- |\n| `tecNO_TARGET`           | Occurs if the target account does not exist.                                     |\n| `tecNO_PERMISSION`       | Occurs if the account does not have permission to create a sell offer.           |\n| `tecINSUF_RESERVE_LINE`  | Occurs if the account does not have a sufficient reserve to create a sell offer. |\n| `tecINSUF_RESERVE_OFFER` | Occurs if the account does not have a sufficient reserve to create a sell offer. |\n| `tecUNFUNDED_OFFER`      | Occurs if the account does not have a sufficient balance to create a sell offer. |\n| `tecOFFER_INVALID`       | Occurs if the sell offer is invalid.                                             |","src/content/docs/docs/protocol-reference/transactions/transaction-types/uritokencreateselloffer.mdx","e0c33a7a82f5346d","docs/protocol-reference/transactions/transaction-types/uritokenmint",{"id":2332,"data":2334,"body":2340,"filePath":2341,"digest":2342,"deferredRender":14},{"title":2335,"description":2336,"editUrl":14,"head":2337,"template":16,"sidebar":2338,"pagefind":14,"draft":18},"URITokenMint","An URIToken Mint transaction mints a new URIToken and assigns ownership to the specified account. The URIToken represents a unique digital asset that can be used in various applications.",[],{"hidden":18,"attrs":2339},{},"\\[[Source](https://github.com/Xahau/xahaud/blob/dev/src/ripple/app/tx/impl/URIToken.cpp)]\n\n_(Added by the \\[URIToken amendment]\\[].)_\n\n### Example\n\n```json\n{\n    \"TransactionType\": \"URITokenMint\",\n    \"Account\": \"rWYkbWkCeg8dP6rXALnjgZSjjLyih5NXm\",\n    \"Flags\": 1,\n    \"URI\": \"697066733A2F2F4445414442454546\",\n    \"Digest\": \"697066733A2F2F4445414442454546697066733A2F2F44454144424545467878\",\n    \"Destination\": \"rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\",\n    \"Amount\": {\n      \"issuer\": \"rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn\",\n      \"currency\": \"USD\",\n      \"value\": \"100\",\n    },\n}\n```\n\n\n\n| Field         | JSON Type                                                                                                                          | \\[Internal Type]\\[] | Description                                                                                    |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ---------------------------------------------------------------------------------------------- |\n| `Account`     | String                                                                                                                             | AccountID           | The address of the account that will own the minted URIToken.                                  |\n| `URI`         | String                                                                                                                             | String              | The URI associated with the minted URIToken. (256 byte max)                                    |\n| `Digest`      | String                                                                                                                             | Hash256             | _(Optional)_ The digest of the URIToken.                                                       |\n| `Destination` | String                                                                                                                             | AccountID           | _(Optional)_ The address of the account that can buy the minted URIToken.                      |\n| `Amount`      | [Currency Amount](https://docs.xahau.network/technical/protocol-reference/data-types/currency-formats#specifying-currency-amounts) | Amount              | _(Optional)_ The amount of currency the account wants to receive in exchange for the URIToken. |\n\n### URITokenMint Flags\n\nTransactions of the URITokenMint type support additional values in the `Flags` field, as follows:\n\n| Flag Name    | Hex Value    | Decimal Value | Description                                                                                                                             |\n| ------------ | ------------ | ------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| `tfBurnable` | `0x00000001` | 1             | Allow the issuer (or an entity authorized by the issuer) to destroy the minted `URIToken`. (The `URIToken`'s owner can _always_ do so.) |\n\n### Error Cases\n\n### Special Transaction Cost\n\nThe URIToken Mint transaction has a standard transaction cost, which is the minimum transaction cost required for all transactions.\n\n### Error Cases\n\nBesides errors that can occur for all transactions, URIToken Mint transactions can result in the following transaction result codes:\n\n| Error Code        | Description                                                                      |\n| ----------------- | -------------------------------------------------------------------------------- |\n| `tecDUPLICATE`    | Occurs if a URIToken with the same URI from the same issuer already exists.      |\n| `tecDIR_FULL`     | Occurs if the owner's directory is full and cannot accommodate the new URIToken. |\n| `temINVALID_FLAG` | Occurs when the user specified an incorrect `Flag`.                              |\n| `terNO_ACCOUNT`   | Occurs if the sending account does not exist.                                    |","src/content/docs/docs/protocol-reference/transactions/transaction-types/uritokenmint.mdx","d0246fd123232654","docs/infrastructure/installing-xahaud",{"id":2343,"data":2345,"body":2351,"filePath":2352,"digest":2353,"deferredRender":14},{"title":2346,"description":2347,"editUrl":14,"head":2348,"template":16,"sidebar":2349,"pagefind":14,"draft":18},"Installing xahaud","The software behind Xahau is open source, and anyone can run a node locally. Users can run a Docker container, a local instance, or a binary file.",[],{"hidden":18,"attrs":2350},{},"When running a node, users will have to configure settings based on whether the node will run on the test network or the main network. When transitioning a single node from one network to the other, database files must be wiped, except wallet.db, which contains the server's identity credentials.\n\nIn addition to [building from scratch](../building-xahau), there are three ways to install xahaud: Docker, locally, and using a portable binary. The below install methods all rely on the xahaud builds published at: [https://build.xahau.tech](https://build.xahau.tech), though the end result is different. \n## Docker Container\n\nTo run xahaud in a Docker Container:\n\n1. Clone the appropriate (Mainnet or Testnet) Xahau Docker GitHub repository using the URL in the table below: \u003Ccode>git clone [repository-url]\u003C/code>\n2. Navigate to the repository directory: \u003Ccode>cd [repository-name]\u003C/code>\n3. Run: \u003Ccode>./build\u003C/code>\n4. Run: \u003Ccode>./up\u003C/code>\n5. Commands and additional information are located in the README.md file in the Docker repository. Configuration files and databases are located in the `store` directory inside the Docker directory.\n\n## Local Install\nThe Xahau Docker repositories (Mainnet and Testnet) each contains a script to automate the local install process, so that xahaud can be run outside of Docker. These scripts will create systemd files, a 'xahaud' user, and default configuration files. The URLs for these scripts are in the table at the bottom of this page. To install locally:\n\n1. Download and run the install script: \u003Ccode>curl -sL [https://link-to-script] | bash\u003C/code>\n2. Edit the configuration file: \u003Ccode>/opt/xahahud/etc/xahaud.cfg\u003C/code>\n3. Verify and, if needed, edit the contents of the trusted validators file: \u003Ccode>/opt/xahaud/etc/validators-xahau.txt\u003C/code>\n4. Start and enable xahaud to run automatically: \u003Ccode>systemctl enable --now xahaud\u003C/code>\n5. Verify xahaud is running: \u003Ccode>/opt/xahaud/bin/xahaud server_info\u003C/code>\n\n## Binary Files\nUsers seeking to install xahaud in non-traditional environments (e.g., outside Ubuntu) may benefit from the binary release packages, which are built with necessary dependencies. This install process is essentially the same as the \"Local Install\", however, xahaud is not configured as a systemd service and config files are not installed in default directories.\n1. Download the latest release from [https://build.xahau.tech](https://build.xahau.tech)\n2. Download and edit the relevant configuration and trusted validators files (see the table below for links to Mainnet and Testnet configurations). Ensure the paths to the validators-xahau.txt file, the database directory, and the logfile are accessible.\n3. Change permissions on the downloaded binary, so it is executable: \u003Ccode>chmod 500 [/path/to/xahaud]\u003C/code>\n4. Consider restricting access to xahaud.cfg and validators-xahau.txt: \u003Ccode>chmod 400 xahaud.cfg validators-xahau.txt\u003C/code>\n5. Run the binary: \u003Ccode>./[path/to/xahaud] --net --conf [path to xahaud.cfg]\u003C/code>\n6. Verify xahaud is running: \u003Ccode>./[path/to/xahaud] server_info\u003C/code>\n\n## Resources, Peering, and Configurations\nThis peering is relevant for both Docker containers and local installations.\n\n\u003Ctable style=\"width: 100%; table-layout: fixed;\">\n\u003Cthead>\u003Ctr>\u003Cth>Resource\u003C/th>\u003Cth>Main Network\u003C/th>\u003Cth>Test Network\u003C/th>\u003C/tr>\u003C/thead>\n\u003Ctbody>\n\u003Ctr>\u003Ctd>Documentation and Resources\u003C/td>\u003Ctd>\u003Ca href=\"https://xahau.network/\">https://xahau.network/\u003C/a>\u003C/td>\u003Ctd>Same as Mainnet\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>Hooks Smart Contract Documentation\u003C/td>\u003Ctd>\u003Ca href=\"https://xrpl-hooks.readme.io/\">https://xrpl-hooks.readme.io\u003C/a>\u003C/td>\u003Ctd>Same as Mainnet\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>Explorer\u003C/td>\u003Ctd>\u003Ca href=\"https://explorer.xahau.network/\">https://explorer.xahau.network/\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://explorer.xahau-test.net/\">https://explorer.xahau-test.net\u003C/a>\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>WebSocket URL\u003C/td>\u003Ctd>\u003Ca href=\"wss://xahau.network\">wss://xahau.network\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://xahau-test.net\">https://xahau-test.net\u003C/a>\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>Network ID &amp; Peer Listening Port\u003C/td>\u003Ctd>21337\u003C/td>\u003Ctd>21338\u003C/td>\u003C/tr>\n\u003Ctr>\n\u003Ctd>Peering and Bootstrap Servers\u003C/td>\n\u003Ctd>bacab.alloy.ee 21337\u003Cbr>\u003C/br>hubs.xahau.as16089.net 21337\u003C/td>\n\u003Ctd>79.110.60.122 21338\u003Cbr>\u003C/br>79.110.60.124 21338\u003Cbr>\u003C/br>79.110.60.125 21338\u003Cbr>\u003C/br>79.110.60.121 21338\u003Cbr>\u003C/br>\u003Cbr>\u003C/br>2a0c:3bc0::1c74 21338\u003Cbr>\u003C/br>2a0c:3bc0::169d 21338\u003Cbr>\u003C/br>2a0c:3bc0::1aaf 21338\u003Cbr>\u003C/br>2a0c:3bc0::1d78 21338\u003C/td>\n\u003C/tr>\n\u003Ctr>\u003Ctd>Docker Container\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/mainnet-docker\">https://github.com/Xahau/mainnet-docker\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/Xahau-Testnet-Docker\">https://github.com/Xahau/Xahau-Testnet-Docker\u003C/a>\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>Local Install Scripts\u003C/td>\u003Ctd>\u003Ca href=\"https://raw.githubusercontent.com/Xahau/mainnet-docker/refs/heads/main/xahaud-install-update.sh\">https://raw.githubusercontent.com/Xahau/mainnet-docker/refs/heads/main/xahaud-install-update.sh\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/Xahau-Testnet-Docker/blob/main/xahaud-install-update.sh\">https://github.com/Xahau/Xahau-Testnet-Docker/blob/main/xahaud-install-update.sh\u003C/a>\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>Binary Releases\u003C/td>\u003Ctd>\u003Ca href=\"https://build.xahau.tech\">https://build.xahau.tech\u003C/a>\u003C/td>\u003Ctd>Same as Mainnet\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>Sample Configuration File\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/mainnet-docker/blob/main/store/etc/xahaud.sample.cfg\">https://github.com/Xahau/mainnet-docker/blob/main/store/etc/xahaud.sample.cfg\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/Xahau-Testnet-Docker/blob/main/store/etc/xahaud.cfg\">https://github.com/Xahau/Xahau-Testnet-Docker/blob/main/store/etc/xahaud.cfg\u003C/a>\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>Sample Trusted Validators (UNL) File\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/mainnet-docker/blob/main/store/etc/validators-xahau.sample.txt\">https://github.com/Xahau/mainnet-docker/blob/main/store/etc/validators-xahau.sample.txt\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://github.com/Xahau/Xahau-Testnet-Docker/blob/main/store/etc/validators-xahau.txt\">https://github.com/Xahau/Xahau-Testnet-Docker/blob/main/store/etc/validators-xahau.txt\u003C/a>\u003C/td>\u003C/tr>\n\u003Ctr>\u003Ctd>Github Build Actions (release numbers)\u003C/td>\u003Ctd style=\"word-break: break-all;\">\u003Ca href=\"https://github.com/Xahau/xahaud/actions?query=branch%3Arelease+is%3Asuccess+build+using+docker\">https://github.com/Xahau/xahaud/actions?query=branch%3Arelease+is%3Asuccess+build+using+docker\u003C/a>\u003C/td>\u003Ctd>Same as Mainnet\u003C/td>\u003C/tr>\n\u003C/tbody>\n\u003C/table>","src/content/docs/docs/infrastructure/installing-xahaud.mdx","9c9328d80631b7af","docs/infrastructure/interacting",{"id":2354,"data":2356,"body":2361,"filePath":2362,"digest":2363,"deferredRender":14},{"title":2357,"editUrl":14,"head":2358,"template":16,"sidebar":2359,"pagefind":14,"draft":18},"Interacting With xahaud Using Websocket and RPC",[],{"hidden":18,"attrs":2360},{},"The xahaud software provides both websocket and RPC interfaces that can be configured for a variety of use cases, such as submitting transactions or querying ledger history. Some users may choose to place proxy software in front of xahaud to provide encryption, load balancing, or other benefits. It is possible to install TLS certificates in the xahaud.cfg file using parameters such as `ssl_key = [/path/to/key]`.\n\n### Configuring Websocket and RPC Ports\nTo enable listening ports, edit the `xahaud.cfg` file. Enabled ports are listed under the `[server]` stanza in the configuration file. Each port listed under the `[server]` section must be further defined via it's own stanza. In addition to configuring websocket or RPC ports, administrators can also configure the port used to listen for incoming peer connections (`port_peer`). On validating servers, it is ideal to remove `port_peer` from the configuration file, to avoid incoming connections. A configuration file with the peer protocol, one websocket port, and one RPC port might look like:\u003Cbr>\u003C/br>\u003Cbr>\u003C/br>\n\n```\n[server]\nport_peer\nport_ws_public\nport_rpc_public\n\n[port_peer] # Name of the port.\nprotocol = peer # Required field.\nport = 21337 # Required field.\nip = :: # Address of interface to bind to.\n\n[port_ws_public]\nprotocol = ws\nport = 16006\nip = ::\nlimit = 150 # Maximum number of clients allowed to connect to a given port. \"0\" is unlimited.\nadmin = [ 10.10.10.5, 10.11.11.0/24 ] # IP addresses or subnets allowed to submit [admin](../../features/http-websocket-apis/admin-api-methods) requests.\nsecure_gateway = [ 10.10.10.20, 10.15.15.0/24 ] # Addresses allowed to send X-Forwarded-For and X-User headers.\n\n[port_rpc_public]\nprotocol = http\nport = 16007\nip = ::\n```\n\u003Cbr>\u003C/br>\nAdditional configuration options for websocket and RPC connections are available in the [Example Configuration File](https://github.com/Xahau/xahaud/blob/dev/cfg/rippled-example.cfg).","src/content/docs/docs/infrastructure/interacting.mdx","c4ada4754190b7c9","docs/infrastructure/system-requirements",{"id":2364,"data":2366,"body":2371,"filePath":2372,"digest":2373,"deferredRender":14},{"title":2367,"editUrl":14,"head":2368,"template":16,"sidebar":2369,"pagefind":14,"draft":18},"System Requirements",[],{"hidden":18,"attrs":2370},{},"Hardware requirements for nodes customized for various tasks (e.g., RPC/WS, hubs, validators, etc.) should be consistent with the specs outlined below. Consider tailoring your individual system based on your intended use case.\n\n### Types of Nodes\nIt is possible to run xahaud in diverse configurations, based on a users needs. Similarly, one xahaud server can be configured for multiple purposes, such as a full history server that is also used for RPC/WS calls. The server's purpose dictates necessary system requirements. Some xahaud configurations might include:\n1. Stock server - This term is commonly used to refer to any xahaud node that is not configured as a validator. A stock server generally has very few changes from the default configuration.\n2. Full history servers - Are useful for querying historic data. In addition to a large amount of storage space, potentially higher disk IOPS and network bandwidth are needed, depending on the number of users querying the server.\n3. RPC/Websocket servers - Are tailored for tasks such as submitting transactions or querying current ledger data, like order books or the validation stream. Nginx or other proxy sofware is often placed in front of RPC/WS servers to provide load balancing, encryption, and other benefits.\n4. Hub server - Peering between nodes is critical for relaying messages across the Xahau Network, and a single server can be configured to provide peering for hundreds of peers. However, a large amount of bandwidth can be required (10 Gbit+).\n5. [Validating servers](../enabling-validation) - Validators differ from other types of nodes, in that they require an additional cryptographic key to be installed, so they can sign off on the sequence of transactions in a proposed ledger. As availability and security are critical, it is not recommended to use a validator for other functions.\n\n### General Notes\n* Builds are typically tested on Ubuntu LTS. However, Docker, portable binaries, custom builds, and other install methods allow for diverse operating system support.\n* Typically one IPv4 and/or IPv6 address is needed for each xahaud instance. Running multiple instances behind one IPv4 address is not recommended.\n* Machines storing full history must use XFS or similar to avoid limitations with single file size in EXT4 (max. file size of 16TB). If storing less history, EXT4 is sufficient.\n* It may be possible to run xahaud on machines that do not meet the below \"Minimum\" specifications for production servers. However, doing so risks instability.\n* These system requirements may grow over time. For example, disk space for full history servers is consistently increasing.\n* As of August 6, 2025 \u003Cstrong>the full history for the Xahau Network is approximately 8TB\u003C/strong>.\n\n### Recommended Specs for Production xahaud Servers\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth width=\"140\">\u003C/th>\u003Cth width=\"200\">Minimum\u003C/th>\u003Cth width=\"199\">Preferred\u003C/th>\u003Cth>Ideal\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>CPU (2.5+ GHz x86_64)\u003C/td>\u003Ctd>8 cores\u003C/td>\u003Ctd>20 cores\u003C/td>\u003Ctd>40+ cores\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Memory\u003C/td>\u003Ctd>32GB\u003C/td>\u003Ctd>64GB\u003C/td>\u003Ctd>128GB+\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Disk IO (sustained)\u003C/td>\u003Ctd>15k random RW\u003C/td>\u003Ctd>20k random RW\u003C/td>\u003Ctd>30k random RW\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Disk Size\u003C/td>\u003Ctd>500GB\u003C/td>\u003Ctd>1TB\u003C/td>\u003Ctd>20TB+\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Filesystem\u003C/td>\u003Ctd>XFS\u003C/td>\u003Ctd>XFS\u003C/td>\u003Ctd>XFS\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Network IO\u003C/td>\u003Ctd>500Mbit+\u003C/td>\u003Ctd>1Gbit\u003C/td>\u003Ctd>10Gbit\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>","src/content/docs/docs/infrastructure/system-requirements.mdx","d006e70f192c0f2c","docs/infrastructure/updating-xahaud",{"id":2374,"data":2376,"body":2381,"filePath":2382,"digest":2383,"deferredRender":14},{"title":2377,"editUrl":14,"head":2378,"template":16,"sidebar":2379,"pagefind":14,"draft":18},"Updating xahaud",[],{"hidden":18,"attrs":2380},{},"The process for updating xahaud varies depending on the install method used, however, all three methods rely on the releases published at [https://build.xahau.tech](https://build.xahau.tech). When updating a validator, hub, or other 'critical' infrastructure, please check the network health prior to restarting a server to install an update. It is possible to automate the update process using a crontab entry and an update script, however, administrators are discouraged from doing so, as automatic updates may result in restarts at times when the network is unstable. Similarly, human presence allows operators to ensure updates are successful, thereby minimizing downtime.\n\n### Backup\nUsers should always keep backups of:\n1. The primary configuration file: `xahaud.cfg`\n    - Location varies based on install type.\n2. The trusted validators file: `validators-xahau.txt`\n    - Location is specified in 'xahaud.cfg'.\n3. The server's identity credentials: `wallet.db`\n    - Located in the database directory defined in 'xahaud.cfg'.\n4. Validators must keep their validation private key backed up in a secure, offline location.\n\n### Updating Docker Containers\nUpdating xahaud inside a Docker container involves replacing the currently running binary with the new version, downloaded from [https://build.xahau.tech](https://build.xahau.tech). This can be accomplished either by replacing the xahaud binary inside the container or by updating the entire container.\n\u003Cbr>\u003C/br>\nTo update the xahaud binary inside a running Docker container:\n1. Download the [script](https://gist.githubusercontent.com/WietseWind/2ed35d85dcd056d82645de2958934f86/raw/34be773fd6af42e82cc3a21baf70bfb1e2a6c583/update.sh): `wget https://gist.githubusercontent.com/WietseWind/2ed35d85dcd056d82645de2958934f86/raw/34be773fd6af42e82cc3a21baf70bfb1e2a6c583/update.sh`\n2. Edit the script and change the first line to the [release version](https://build.xahau.tech) you would like to install.\n3. Run the script: `bash ./update.sh`\n4. Verify xahaud is running: `docker exec xahaud-[mainnet/testnet] xahaud server_info`\n\u003Cbr>\u003C/br>\nTo replace the current Docker image with a new version, without overwriting databases or configuration files (which are ignored via the .gitignore file):\n1. Navigate to the repository: `cd [/path/to/docker-repo]`\n2. Update to the latest version `git pull`\n3. List running Docker containers and note the name of the xahaud container: `docker ps`\n4. Stop the old xahaud instance: `docker stop xahaud-[mainnet/testnet]`\n5. Remove the old instance: `docker rm xahaud-[mainnet/testnet]`\n6. Start the new instance: `./build && ./up`\n\n### Updating Local Installations\nTo update a locally installed version of xahaud, simply replace the current binary with a new binary:\n1. Download the new binary from: [https://build.xahau.tech](https://build.xahau.tech)\n2. Mark the new binary executable: `chmod +x [/path/to/download]`\n3. Stop the currently running xahaud instance: `/opt/xahaud/bin/xahaud stop`\n4. Replace the old binary with the new: `mv [/path/to/download] /opt/xahaud/bin/xahaud`\n5. Start xahaud: `systemctl start xahaud`\n6. Verify xahaud is running: `/opt/xahaud/bin/xahaud server_info`\n\u003Cbr>\u003C/br>\nA [script](https://gist.githubusercontent.com/WietseWind/9480a4fc95e904e54524406005c8c963/raw/2b200fdc2e5b471ae4f6625674aff1765d63e744/update.sh) that automates the above steps is available.\n\n### Updating Binary Files\nUpdating the xahaud binary files is essentially the same as the original install instructions:\n1. Remove the currently running version: `rm [/path/to/xahaud]`\n2. Download the new version: [https://build.xahau.tech](https://build.xahau.tech)\n3. Mark the download as executable: `chmod 500 [/path/to/xahaud]`\n4. Start xahaud: `./[path/to/xahud] --net --conf [/path/to/xahaud.cfg]`","src/content/docs/docs/infrastructure/updating-xahaud.mdx","b2801dfbdf290b34","docs/infrastructure/enabling-validation",{"id":2384,"data":2386,"body":2391,"filePath":2392,"digest":2393,"deferredRender":14},{"title":2387,"editUrl":14,"head":2388,"template":16,"sidebar":2389,"pagefind":14,"draft":18},"Enabling Validations in xahaud",[],{"hidden":18,"attrs":2390},{},"Validators are xahaud nodes that are configured with an additional public/private keypair, which is used to sign each proposed ledger. Thus, validators are the primary mechanism used to achieve consensus regarding the order in which transactions are applied on the Xahau Network.\n\n### Security and Availability\nWhen running xahaud as a validator, system security and availability are critical. Validator operators are expected to actively monitor their servers and to respond quickly to outages. Some validator operators choose to host standby machines in diverse data centers, so they can quickly recover from outages. While it is possible to host a reliable validator in one's home, it is unlikely that such a setup could provide sufficient stability and security for the validator to gain broader trust (e.g., inclusion on published UNLs). Similarly, validator operators are strongly discouraged from running software other than xahaud on a machine used as a xahaud validator, since this increases the probability of running out of resources or exposing a security vulnerability. System administrators who require websocket or RPC access to a server are encouraged to run different machines for queries, so resources are not taken away from the critical task of validating ledgers.\n\u003Cbr>\u003C/br>\nThe private/public validation keypair should be stored and backed up in a secure, offline environment. Anyone with access to the keys of a trusted validator has potential to harm the network. After installing a validation token into the xahaud.cfg file, it is advised to restrict read access (`chmod 400 xahaud.cfg`) and change ownership of the file to \"root\" or \"xahaud\", depending on the type of install (`chown root:root xahaud.cfg`).\n\n### Identity Attestation\nTo avoid a [Sybil attack](https://en.wikipedia.org/wiki/Sybil_attack) and build trust, validating xahaud nodes attest to their identity by cryptographically signing a domain name with their validation keys. This signature is then hosted at the same domain, in a TOML format file. In addition to verifying the identity of a validator, this TOML file can also be used to verify the identity of individual account holders on the Xahau Network, by providing an attestation signed by the private account key instead of the private validation key. The TOML file should be hosted on a web server with TLS encryption enabled at:\u003Cbr>\u003C/br>\u003Ccode>https://[your-domain.com]/.well-known/xah-ledger.toml\u003C/code>\u003Cbr>\u003C/br>\n\n### Peering\nTo maintain a high level of security, xahaud nodes that are configured as validators should only peer with known, trusted peers. Enabling the `peer_private` setting and explicitly defining `ips_fixed` in the xahaud.cfg file will force a server to only connect to defined peers. Operating system and hardware level protections, such as firewalls, provide additional reassurance that the server is only connecting to defined peers. However, this can be a challenge, as validators with too few peers, typically less than about five, are at risk of falling out of sync with the rest of the network.\n\n### Governance and Trust\nThe Xahau Network utilizes the [Governance Game](../../features/governance-game) as a democratic method for managing the Network. Additionally, each xahaud instance participating in the Network is required to install a list of trusted validating servers, called a Unique Node List or UNL. Thus, the existing governance participants can vote a new validator into a seat at the governance table. Separately, trusted UNL publishers, such as the [InFTF](https://inftf.org), can choose to include a validator in their recommended list of trusted validators. Running a validator does not guarantee inclusion in either the Governance Game or any UNL. Typically, validating servers that are selected for inclusion in the governance process have:\n1. High availability\n    - Effective 24/7/365 monitoring with rapid responses to outages\n2. High agreement with the rest of the network\n3. An identified owner/operator and a clear geographic location\n4. A proactive approach to updating and voting for [amendments](../../features/amendments) and fees\n    - This requires taking the time to watch what is in development\n\n### Building the Validation Keys Tool\nAt this time, there is not a packaged tool for generating validation keys. Thus, users can either build the tool from scratch or rely on a packaged version provided with rippled (this tool is not packaged with the xahaud binary). The instructions for building the tool are the same as the instructions for building rippled, and they are provided on the [ripple/validator-keys-tool](https://github.com/ripple/validator-keys-tool) repository page. There are also some [packaged binaries](https://github.com/jscottbranson/rippled-examples/blob/master/validator-keys) available on unofficial repositories.\n\n### Generating and Installing Validation Keys\nConsider using an offline machine to generate validation keys and a validation token.\n1. Navigate to the directory containing the validation keys tool: `cd [/path/to/tool]`\n2. Generate a new keypair: `./validator-keys create_keys`\n3. The newly generated keypair is stored in `/home/[username]/.ripple/validator-keys.json`. \n4. Ideally, validators should provide identity attestation. To do so, set your domain in the validator-keys.json file: `./validator-keys set_domain [example.com]`\n    - If you do not wish to provide an identifying domain, generate a validation token without a domain: `./validator-keys create_token --keyfile /home/[username]/.ripple/validator-keys.json`\n5. Review the output of the previous command. Note the `[validator_token]`, as this will be installed in xahaud.cfg to enable validation. If a domain was set, note the `attestation=\"\"` line, as it will need to be added into the TOML file served at your domain.\n6. Open xahaud.cfg and paste in the `[validation_token]`, then restart the xahaud service.\n7. Paste the `attestation=\"\"` into your TOML file to prove the identity of your validator.","src/content/docs/docs/infrastructure/enabling-validation.mdx","f9c94f831ab89a0c"]
